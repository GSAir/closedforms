// # loop-invgen/NetBSD_loop_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int MAXPATHLEN
    t_int pathbuf_off
    t_int bound_off
    t_int glob2_p_off
    t_int glob2_pathbuf_off
    t_int glob2_pathlim_off
    (op_assign MAXPATHLEN __VERIFIER_nondet_int())
    if (op_logicalAnd (op_greaterThan MAXPATHLEN 0) (op_lessThan MAXPATHLEN 2147483647)) {}
    else goto END
    (op_assign pathbuf_off 0)
    (op_assign bound_off (op_minus (op_plus pathbuf_off (op_bracketedPrimary (op_plus MAXPATHLEN 1))) 1))
    (op_assign glob2_pathbuf_off pathbuf_off)
    (op_assign glob2_pathlim_off bound_off)
    for ((op_assign glob2_p_off glob2_pathbuf_off)
    ;(op_lessEqual glob2_p_off glob2_pathlim_off);(op_postFixIncr glob2_p_off)){
      __VERIFIER_assert((op_lessEqual 0 glob2_p_off))
      __VERIFIER_assert((op_lessThan glob2_p_off (op_plus MAXPATHLEN 1)))
    }
    END:
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int MAXPATHLEN;
    int pathbuf_off;
    int bound_off;
    int glob2_p_off;
    int glob2_pathbuf_off;
    int glob2_pathlim_off;
    MAXPATHLEN = __VERIFIER_nondet_int();
    if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647);
    else
    goto END;
    pathbuf_off = 0;
    bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;
    glob2_pathbuf_off = pathbuf_off;
    glob2_pathlim_off = bound_off;
    for(glob2_p_off = glob2_pathbuf_off;glob2_p_off <= glob2_pathlim_off;glob2_p_off++){
      __VERIFIER_assert(0 <= glob2_p_off);
      __VERIFIER_assert(glob2_p_off < MAXPATHLEN + 1);
    }
    END:
    return 0;
  }
