// loop-invgen/apache-escape-absolute_true-unreach-call_true-termination.i
t_void __VERIFIER_error
t_void __VERIFIER_assume
{
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_int __VERIFIER_nondet_int
{
  t_int scheme
  t_int urilentokenlen
  t_int cpc
  (op_assign urilen __VERIFIER_nondet_int((exp null)))
  (op_assign tokenlen __VERIFIER_nondet_int((exp null)))
  (op_assign scheme __VERIFIER_nondet_int((exp null)))
  if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual urilen 1000000) (op_greaterEqual urilen (op_minus 1000000))))) return 0
  else {}
  if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual tokenlen 1000000) (op_greaterEqual tokenlen (op_minus 1000000))))) return 0
  else {}
  if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual scheme 1000000) (op_greaterEqual scheme (op_minus 1000000))))) return 0
  else {}
  if (op_greaterThan urilen 0) {}
  else goto END
  if (op_greaterThan tokenlen 0) {}
  else goto END
  if (op_greaterEqual scheme 0) {}
  else goto END
  if (op_logicalOr (op_equals scheme 0) (op_bracketedPrimary (op_lessThan (op_minus urilen 1) scheme))) {
    goto END
  }
  else {}
  (op_assign cp scheme)
  __VERIFIER_assert((op_lessThan (op_minus cp 1) urilen))
  __VERIFIER_assert((op_lessEqual 0 (op_minus cp 1)))
  if __VERIFIER_nondet_int((exp null)) {
    __VERIFIER_assert((op_lessThan cp urilen))
    __VERIFIER_assert((op_lessEqual 0 cp))
    while (op_notequals cp (op_minus urilen 1))
    {
      if __VERIFIER_nondet_int((exp null)) break
      else {}
      __VERIFIER_assert((op_lessThan cp urilen))
      __VERIFIER_assert((op_lessEqual 0 cp))
      (op_prefixIncr cp)
    }
    __VERIFIER_assert((op_lessThan cp urilen))
    __VERIFIER_assert((op_lessEqual 0 cp))
    if (op_equals cp (op_minus urilen 1)) goto END
    else {}
    __VERIFIER_assert((op_lessThan (op_plus cp 1) urilen))
    __VERIFIER_assert((op_lessEqual 0 (op_plus cp 1)))
    if (op_equals (op_plus cp 1) (op_minus urilen 1)) goto END
    else {}
    (op_prefixIncr cp)
    (op_assign scheme cp)
    if __VERIFIER_nondet_int((exp null)) {
      (op_assign c 0)
      __VERIFIER_assert((op_lessThan cp urilen))
      __VERIFIER_assert((op_lessEqual 0 cp))
      while (op_logicalAnd (op_notequals cp (op_minus urilen 1)) (op_lessThan c (op_minus tokenlen 1)))
      {
        __VERIFIER_assert((op_lessThan cp urilen))
        __VERIFIER_assert((op_lessEqual 0 cp))
        if __VERIFIER_nondet_int((exp null)) {
          (op_prefixIncr c)
          __VERIFIER_assert((op_lessThan c tokenlen))
          __VERIFIER_assert((op_lessEqual 0 c))
          __VERIFIER_assert((op_lessThan cp urilen))
          __VERIFIER_assert((op_lessEqual 0 cp))
        }
        else {}
        (op_prefixIncr cp)
      }
      goto END
    }
    else {}
  }
  else {}
  END:
  return 0
}
