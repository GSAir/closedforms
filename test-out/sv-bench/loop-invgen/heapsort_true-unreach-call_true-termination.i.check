// loop-invgen/heapsort_true-unreach-call_true-termination.i
t_void __VERIFIER_error
t_void __VERIFIER_assume
t_void __VERIFIER_assert(/* TODO: param list ... */) {
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_int __VERIFIER_nondet_int
t_int main(/* TODO: param list ... */) {
  t_int nlrij
  (op_assign n __VERIFIER_nondet_int((exp null)))
  if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 1 n) (op_lessEqual n 1000000)))) return 0
  else {}
  (op_assign l (op_plus (op_divide n 2) 1))
  (op_assign r n)
  if (op_greaterThan l 1) {
    (op_postFixDecr l)
  }
  else {
    (op_postFixDecr r)
  }
  while (op_greaterThan r 1)
  {
    (op_assign i l)
    (op_assign j (op_multiply 2 l))
    while (op_lessEqual j r)
    {
      if (op_lessThan j r) {
        __VERIFIER_assert((op_lessEqual 1 j))
        __VERIFIER_assert((op_lessEqual j n))
        __VERIFIER_assert((op_lessEqual 1 (op_plus j 1)))
        __VERIFIER_assert((op_lessEqual (op_plus j 1) n))
        if __VERIFIER_nondet_int((exp null)) (op_assign j (op_plus j 1))
        else {}
      }
      else {}
      __VERIFIER_assert((op_lessEqual 1 j))
      __VERIFIER_assert((op_lessEqual j n))
      if __VERIFIER_nondet_int((exp null)) {
        break
      }
      else {}
      __VERIFIER_assert((op_lessEqual 1 i))
      __VERIFIER_assert((op_lessEqual i n))
      __VERIFIER_assert((op_lessEqual 1 j))
      __VERIFIER_assert((op_lessEqual j n))
      (op_assign i j)
      (op_assign j (op_multiply 2 j))
    }
    if (op_greaterThan l 1) {
      __VERIFIER_assert((op_lessEqual 1 l))
      __VERIFIER_assert((op_lessEqual l n))
      (op_postFixDecr l)
    }
    else {
      __VERIFIER_assert((op_lessEqual 1 r))
      __VERIFIER_assert((op_lessEqual r n))
      (op_postFixDecr r)
    }
  }
  return 0
}
