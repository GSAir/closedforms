// # loop-invgen/large_const_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(t_int argc,t_char argv){
    t_int c1 = 4000
    t_int c2 = 2000
    t_int c3 = 10000
    t_int nv
    t_int ikj
    (op_assign n __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 0 n) (op_lessThan n 10)))) return 0
    else {}
    (op_assign k 0)
    (op_assign i 0)
    while (op_lessThan i n)
    {
      (op_postFixIncr i)
      (op_assign v __VERIFIER_nondet_int())
      if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 0 v) (op_lessThan n 2)))) return 0
      else {}
      if (op_equals v 0) (op_plusAssign k c1)
      else if (op_equals v 1) (op_plusAssign k c2)
      else (op_plusAssign k c3)
    }
    (op_assign j 0)
    while (op_lessThan j n)
    {
      __VERIFIER_assert((op_greaterThan k 0))
      (op_postFixIncr j)
      (op_postFixDecr k)
    }
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main(int argc, char *argv[])
  {
    int c1 = 4000;
    int c2 = 2000;
    int c3 = 10000;
    int n, v;
    int i, k, j;
    n = __VERIFIER_nondet_int();
    if(!(0 <= n && n < 10))
    return 0;
    k = 0;
    i = 0;
    while(i < n){
      i++;
      v = __VERIFIER_nondet_int();
      if(!(0 <= v && n < 2))
      return 0;
      if(v == 0)
      k += c1;
      else
      if(v == 1)
      k += c2;
      else
      k += c3;
    }
    j = 0;
    while(j < n){
      __VERIFIER_assert(k > 0);
      j++;
      k--;
    }
    return 0;
  }
