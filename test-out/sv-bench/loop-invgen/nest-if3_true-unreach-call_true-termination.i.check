// # loop-invgen/nest-if3_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int iknl
    (op_assign n __VERIFIER_nondet_int())
    (op_assign l __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_greaterThan l 0))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_lessThan l 1000000))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_lessThan n 1000000))) return 0
    else {}
    for ((op_assign k 1)
    ;(op_lessThan k n);(op_postFixIncr k)){
      for ((op_assign i l)
      ;(op_lessThan i n);(op_postFixIncr i)){
        __VERIFIER_assert((op_lessEqual 1 i))
      }
      if __VERIFIER_nondet_int() (op_assign l (op_plus l 1))
      else {}
    }
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int i, k, n, l;
    n = __VERIFIER_nondet_int();
    l = __VERIFIER_nondet_int();
    if(!(l > 0))
    return 0;
    if(!(l < 1000000))
    return 0;
    if(!(n < 1000000))
    return 0;
    for(k = 1;k < n;k++){
      for(i = l;i < n;i++){
        __VERIFIER_assert(1 <= i);
      }
      if(__VERIFIER_nondet_int())
      l = l + 1;
    }
  }
