// # loop-invgen/nested6_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int ijkn
    (op_assign k __VERIFIER_nondet_int())
    (op_assign n __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_lessThan n 1000000))) return 0
    else {}
    if (op_equals k n) {
    }
    else {
      goto END
    }
    for ((op_assign i 0)
    ;(op_lessThan i n);(op_postFixIncr i)){
      for ((op_assign j (op_multiply 2 i))
      ;(op_lessThan j n);(op_postFixIncr j)){
        if __VERIFIER_nondet_int() {
          for ((op_assign k j)
          ;(op_lessThan k n);(op_postFixIncr k)){
            __VERIFIER_assert((op_greaterEqual k (op_multiply 2 i)))
          }
        }
        else {
          __VERIFIER_assert((op_greaterEqual k n))
          __VERIFIER_assert((op_lessEqual k n))
        }
      }
    }
    END:
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int i, j, k, n;
    k = __VERIFIER_nondet_int();
    n = __VERIFIER_nondet_int();
    if(!(n < 1000000))
    return 0;
    if(k == n){
    }else{
      goto END;
    }
    for(i = 0;i < n;i++){
      for(j = 2 * i;j < n;j++){
        if(__VERIFIER_nondet_int()){
          for(k = j;k < n;k++){
            __VERIFIER_assert(k >= 2 * i);
          }
        }
        else{
          __VERIFIER_assert(k >= n);
          __VERIFIER_assert(k <= n);
        }
      }
    }
    END:
    return 0;
  }
