// # loop-invgen/nested9_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int __BLAST_NONDET
  t_int main(){
    t_int ijknlm
    (op_assign n __VERIFIER_nondet_int())
    (op_assign m __VERIFIER_nondet_int())
    (op_assign l __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessThan (op_minus 1000000) n) (op_lessThan n 1000000)))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessThan (op_minus 1000000) m) (op_lessThan m 1000000)))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessThan (op_minus 1000000) l) (op_lessThan l 1000000)))) return 0
    else {}
    if (op_lessEqual (op_multiply 3 n) (op_plus m l)) {}
    else goto END
    for ((op_assign i 0)
    ;(op_lessThan i n);(op_postFixIncr i))for ((op_assign j (op_multiply 2 i))
    ;(op_lessThan j (op_multiply 3 i));(op_postFixIncr j))for ((op_assign k i)
    ;(op_lessThan k j);(op_postFixIncr k))__VERIFIER_assert((op_lessEqual (op_minus k i) (op_multiply 2 n)))
    END:
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int __BLAST_NONDET;
  int main()
  {
    int i, j, k, n, l, m;
    n = __VERIFIER_nondet_int();
    m = __VERIFIER_nondet_int();
    l = __VERIFIER_nondet_int();
    if(!(-1000000 < n && n < 1000000))
    return 0;
    if(!(-1000000 < m && m < 1000000))
    return 0;
    if(!(-1000000 < l && l < 1000000))
    return 0;
    if(3 * n <= m + l);
    else
    goto END;
    for(i = 0;i < n;i++)
    for(j = 2 * i;j < 3 * i;j++)
    for(k = i;k < j;k++)
    __VERIFIER_assert(k - i <= 2 * n);
    END:
    return 0;
  }
