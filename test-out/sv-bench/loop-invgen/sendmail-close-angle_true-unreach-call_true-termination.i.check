// # loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int in
    t_int inlen = __VERIFIER_nondet_int()
    t_int bufferlen = __VERIFIER_nondet_int()
    t_int buf
    t_int buflim
    if (op_greaterThan bufferlen 1) {}
    else goto END
    if (op_greaterThan inlen 0) {}
    else goto END
    if (op_lessThan bufferlen inlen) {}
    else goto END
    (op_assign buf 0)
    (op_assign in 0)
    (op_assign buflim (op_minus bufferlen 2))
    while __VERIFIER_nondet_int()
    {
      if (op_equals buf buflim) break
      else {}
      __VERIFIER_assert((op_lessEqual 0 buf))
      __VERIFIER_assert((op_lessThan buf bufferlen))
      (op_postFixIncr buf)
      out:
      (op_postFixIncr in)
      __VERIFIER_assert((op_lessEqual 0 in))
      __VERIFIER_assert((op_lessThan in inlen))
    }
    __VERIFIER_assert((op_lessEqual 0 buf))
    __VERIFIER_assert((op_lessThan buf bufferlen))
    (op_postFixIncr buf)
    __VERIFIER_assert((op_lessEqual 0 buf))
    __VERIFIER_assert((op_lessThan buf bufferlen))
    (op_postFixIncr buf)
    END:
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int in;
    int inlen = __VERIFIER_nondet_int();
    int bufferlen = __VERIFIER_nondet_int();
    int buf;
    int buflim;
    if(bufferlen > 1);
    else
    goto END;
    if(inlen > 0);
    else
    goto END;
    if(bufferlen < inlen);
    else
    goto END;
    buf = 0;
    in = 0;
    buflim = bufferlen - 2;
    while(__VERIFIER_nondet_int()){
      if(buf == buflim)
      break;
      __VERIFIER_assert(0 <= buf);
      __VERIFIER_assert(buf < bufferlen);
      buf++;
      out:
      in++;
      __VERIFIER_assert(0 <= in);
      __VERIFIER_assert(in < inlen);
    }
    __VERIFIER_assert(0 <= buf);
    __VERIFIER_assert(buf < bufferlen);
    buf++;
    __VERIFIER_assert(0 <= buf);
    __VERIFIER_assert(buf < bufferlen);
    buf++;
    END:
    return 0;
  }
