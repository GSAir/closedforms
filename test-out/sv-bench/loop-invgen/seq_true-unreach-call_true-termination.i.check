// # loop-invgen/seq_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int n0n1
    t_int i0 = 0
    t_int k = 0
    (op_assign n0 __VERIFIER_nondet_int())
    (op_assign n1 __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual (op_minus 1000000) n0) (op_lessThan n0 1000000)))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual (op_minus 1000000) n1) (op_lessThan n1 1000000)))) return 0
    else {}
    while (op_lessThan i0 n0)
    {
      (op_postFixIncr i0)
      (op_postFixIncr k)
    }
    t_int i1 = 0
    while (op_lessThan i1 n1)
    {
      (op_postFixIncr i1)
      (op_postFixIncr k)
    }
    t_int j1 = 0
    while (op_lessThan j1 (op_plus n0 n1))
    {
      __VERIFIER_assert((op_greaterThan k 0))
      (op_postFixIncr j1)
      (op_postFixDecr k)
    }
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int n0, n1;
    int i0 = 0;
    int k = 0;
    n0 = __VERIFIER_nondet_int();
    n1 = __VERIFIER_nondet_int();
    if(!(-1000000 <= n0 && n0 < 1000000))
    return 0;
    if(!(-1000000 <= n1 && n1 < 1000000))
    return 0;
    while(i0 < n0){
      i0++;
      k++;
    }
    int i1 = 0;
    while(i1 < n1){
      i1++;
      k++;
    }
    int j1 = 0;
    while(j1 < n0 + n1){
      __VERIFIER_assert(k > 0);
      j1++;
      k--;
    }
  }
