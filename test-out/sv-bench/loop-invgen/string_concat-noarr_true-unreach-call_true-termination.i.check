// # loop-invgen/string_concat-noarr_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(t_void ){
    t_int ij
    L0:
    (op_assign i 0)
    L1:
    while (op_logicalAnd __VERIFIER_nondet_int() (op_lessThan i 1000000))
    {
      (op_postFixIncr i)
    }
    if (op_greaterEqual i 100) STUCK:
    goto STUCK
    else {}
    (op_assign j 0)
    L2:
    while (op_logicalAnd __VERIFIER_nondet_int() (op_lessThan i 1000000))
    {
      (op_postFixIncr i)
      (op_postFixIncr j)
    }
    if (op_greaterEqual j 100) goto STUCK
    else {}
    __VERIFIER_assert((op_lessThan i 200))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main(void)
  {
    int i, j;
    L0:
    i = 0;
    L1:
    while(__VERIFIER_nondet_int() && i < 1000000){
      i++;
    }
    if(i >= 100)
    STUCK:
    goto STUCK;
    j = 0;
    L2:
    while(__VERIFIER_nondet_int() && i < 1000000){
      i++;
      j++;
    }
    if(j >= 100)
    goto STUCK;
    __VERIFIER_assert(i < 200);
    return 0;
  }
