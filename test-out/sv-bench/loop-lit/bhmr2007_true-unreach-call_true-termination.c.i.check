// # loop-lit/bhmr2007_true-unreach-call_true-termination.c.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int inab
    (op_assign i 0)
    (op_assign a 0)
    (op_assign b 0)
    (op_assign n __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_greaterEqual n 0) (op_lessEqual n 1000000)))) return 0
    else {}
    while (op_lessThan i n)
    {
      if __VERIFIER_nondet_int() {
        (op_assign a (op_plus a 1))
        (op_assign b (op_plus b 2))
      }
      else {
        (op_assign a (op_plus a 2))
        (op_assign b (op_plus b 1))
      }
      (op_assign i (op_plus i 1))
    }
    __VERIFIER_assert((op_equals (op_plus a b) (op_multiply 3 n)))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int i, n, a, b;
    i = 0;
    a = 0;
    b = 0;
    n = __VERIFIER_nondet_int();
    if(!(n >= 0 && n <= 1000000))
    return 0;
    while(i < n){
      if(__VERIFIER_nondet_int()){
        a = a + 1;
        b = b + 2;
      }else{
        a = a + 2;
        b = b + 1;
      }
      i = i + 1;
    }
    __VERIFIER_assert(a + b == 3 * n);
    return 0;
  }
