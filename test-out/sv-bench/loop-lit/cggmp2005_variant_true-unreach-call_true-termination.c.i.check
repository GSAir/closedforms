// # loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int lomidhi
    (op_assign lo 0)
    (op_assign mid __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_greaterThan mid 0) (op_lessEqual mid 1000000)))) return 0
    else {}
    (op_assign hi (op_multiply 2 mid))
    while (op_greaterThan mid 0)
    {
      (op_assign lo (op_plus lo 1))
      (op_assign hi (op_minus hi 1))
      (op_assign mid (op_minus mid 1))
    }
    __VERIFIER_assert((op_equals lo hi))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int lo, mid, hi;
    lo = 0;
    mid = __VERIFIER_nondet_int();
    if(!(mid > 0 && mid <= 1000000))
    return 0;
    hi = 2 * mid;
    while(mid > 0){
      lo = lo + 1;
      hi = hi - 1;
      mid = mid - 1;
    }
    __VERIFIER_assert(lo == hi);
    return 0;
  }
