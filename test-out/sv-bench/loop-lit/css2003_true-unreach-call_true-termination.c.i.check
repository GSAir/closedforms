// # loop-lit/css2003_true-unreach-call_true-termination.c.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int ijk
    (op_assign i 1)
    (op_assign j 1)
    (op_assign k __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 0 k) (op_lessEqual k 1)))) return 0
    else {}
    while (op_lessThan i 1000000)
    {
      (op_assign i (op_plus i 1))
      (op_assign j (op_plus j k))
      (op_assign k (op_minus k 1))
      __VERIFIER_assert((op_logicalAnd (op_logicalAnd (op_lessEqual 1 (op_plus i k)) (op_lessEqual (op_plus i k) 2)) (op_greaterEqual i 1)))
    }
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int i, j, k;
    i = 1;
    j = 1;
    k = __VERIFIER_nondet_int();
    if(!(0 <= k && k <= 1))
    return 0;
    while(i < 1000000){
      i = i + 1;
      j = j + k;
      k = k - 1;
      __VERIFIER_assert(1 <= i + k && i + k <= 2 && i >= 1);
    }
    return 0;
  }
