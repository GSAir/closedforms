// # loop-lit/hhk2008_true-unreach-call_true-termination.c.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int a = __VERIFIER_nondet_int()
    t_int b = __VERIFIER_nondet_int()
    t_int rescnt
    if (op_not (op_bracketedPrimary (op_lessEqual a 1000000))) return 0
    else {}
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 0 b) (op_lessEqual b 1000000)))) return 0
    else {}
    (op_assign res a)
    (op_assign cnt b)
    while (op_greaterThan cnt 0)
    {
      (op_assign cnt (op_minus cnt 1))
      (op_assign res (op_plus res 1))
    }
    __VERIFIER_assert((op_equals res (op_plus a b)))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int a = __VERIFIER_nondet_int();
    int b = __VERIFIER_nondet_int();
    int res, cnt;
    if(!(a <= 1000000))
    return 0;
    if(!(0 <= b && b <= 1000000))
    return 0;
    res = a;
    cnt = b;
    while(cnt > 0){
      cnt = cnt - 1;
      res = res + 1;
    }
    __VERIFIER_assert(res == a + b);
    return 0;
  }
