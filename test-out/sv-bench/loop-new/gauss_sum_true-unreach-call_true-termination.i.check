// # loop-new/gauss_sum_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error(t_void )
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int nsumi
    (op_assign n __VERIFIER_nondet_int())
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessEqual 1 n) (op_lessEqual n 1000)))) return 0
    else {}
    (op_assign sum 0)
    for ((op_assign i 1)
    ;(op_lessEqual i n);(op_postFixIncr i)){
      (op_assign sum (op_plus sum i))
    }
    __VERIFIER_assert((op_equals (op_multiply 2 sum) (op_multiply n (op_bracketedPrimary (op_plus n 1)))))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int n, sum, i;
    n = __VERIFIER_nondet_int();
    if(!(1 <= n && n <= 1000))
    return 0;
    sum = 0;
    for(i = 1;i <= n;i++){
      sum = sum + i;
    }
    __VERIFIER_assert(2 * sum == n * (n + 1));
    return 0;
  }
