// loops/eureka_01_true-unreach-call.i
t_void __VERIFIER_error
t_void __VERIFIER_assert(/* TODO: param list ... */) {
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_int INFINITY = 899
t_int main(/* TODO: param list ... */) {
  t_int nodecount = 5
  t_int edgecount = 20
  t_int source = 0
  t_int Source = {0,4,1,1,0,0,1,3,4,4,2,2,3,0,0,3,1,2,2,3}
  t_int Dest = {1,3,4,1,1,4,3,4,3,0,0,0,0,2,3,0,2,1,0,4}
  t_int Weight = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}
  t_int distance
  t_int xy
  t_int ij
  for ((op_assign i 0)
  ;(op_lessThan i nodecount);(op_postFixIncr i)){
    if (op_equals i source) {
      (op_assign distance[i] 0)
    }
    else {
      (op_assign distance[i] INFINITY)
    }
  }
  for ((op_assign i 0)
  ;(op_lessThan i nodecount);(op_postFixIncr i)){
    for ((op_assign j 0)
    ;(op_lessThan j edgecount);(op_postFixIncr j)){
      (op_assign x Dest[j])
      (op_assign y Source[j])
      if (op_greaterThan distance[x] (op_plus distance[y] Weight[j])) {
        (op_assign distance[x] (op_plus distance[y] Weight[j]))
      }
      else {}
    }
  }
  for ((op_assign i 0)
  ;(op_lessThan i edgecount);(op_postFixIncr i)){
    (op_assign x Dest[i])
    (op_assign y Source[i])
    if (op_greaterThan distance[x] (op_plus distance[y] Weight[i])) {
      return 0
    }
    else {}
  }
  for ((op_assign i 0)
  ;(op_lessThan i nodecount);(op_postFixIncr i)){
    __VERIFIER_assert((op_greaterEqual distance[i] 0))
  }
  return 0
}
