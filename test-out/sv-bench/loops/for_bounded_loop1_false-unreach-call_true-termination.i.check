// # loops/for_bounded_loop1_false-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int i = 0x = 0y = 0
    t_int n = __VERIFIER_nondet_int()
    if (op_not (op_bracketedPrimary (op_greaterThan n 0))) return 0
    else {}
    for ((op_assign i 0)
    ;(op_lessThan i n);(op_postFixIncr i)){
      (op_assign x (op_minus x y))
      __VERIFIER_assert((op_equals x 0))
      (op_assign y __VERIFIER_nondet_int())
      if (op_not (op_bracketedPrimary (op_notequals y 0))) return 0
      else {}
      (op_assign x (op_plus x y))
      __VERIFIER_assert((op_notequals x 0))
    }
    __VERIFIER_assert((op_equals x 0))
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main()
  {
    int i = 0, x = 0, y = 0;
    int n = __VERIFIER_nondet_int();
    if(!(n > 0))
    return 0;
    for(i = 0;i < n;i++){
      x = x - y;
      __VERIFIER_assert(x == 0);
      y = __VERIFIER_nondet_int();
      if(!(y != 0))
      return 0;
      x = x + y;
      __VERIFIER_assert(x != 0);
    }
    __VERIFIER_assert(x == 0);
  }
