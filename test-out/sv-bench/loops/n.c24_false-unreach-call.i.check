// loops/n.c24_false-unreach-call.i
t_void __VERIFIER_error
{
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_int size_t
t_void memcpy
t_void memmove
t_void memccpy
t_void memset
t_int memcmp
t_void memchr
t_char strcpy
t_char strncpy
t_char strcat
t_char strncat
t_int strcmp
t_int strncmp
t_int strcoll
size_t strxfrm
__locale_struct __locale_t
__locale_t locale_t
t_int strcoll_l
size_t strxfrm_l
t_char strdup
t_char strndup
t_char strchr
t_char strrchr
size_t strcspn
size_t strspn
t_char strpbrk
t_char strstr
t_char strtok
t_char __strtok_r
t_char strtok_r
size_t strlen
size_t strnlen
t_char strerror
t_int strerror_r
t_char strerror_l
t_void __bzero
t_void bcopy
t_void bzero
t_int bcmp
t_char index
t_char rindex
t_int ffs
t_int strcasecmp
t_int strncasecmp
t_char strsep
t_char strsignal
t_char __stpcpy
t_char stpcpy
t_char __stpncpy
t_char stpncpy
t_int __VERIFIER_nondet_int
{
  return __VERIFIER_nondet_int((exp null))
}
{
  (op_assign (op_star x) __VERIFIER_nondet_int((exp null)))
  return (op_star x)
}
{
  t_int ijretoffsettmp_cnttel_dataklen
  t_char x
  for ((op_assign i 0)
  ;(op_lessThan i 1000);(op_prefixIncr i))(op_assign x[i] __VERIFIER_nondet_int((exp null)))
  for ((op_assign i 0)
  ;(op_lessThan i 1000);(op_prefixIncr i)){
    (op_assign ret __VERIFIER_nondet_int((exp null)))
    if (op_notequals ret 0) return (op_minus 1)
    else {}
    (op_assign tmp_cnt __VERIFIER_nondet_int((exp null)))
    if (op_lessThan tmp_cnt 0) return (op_minus 1)
    else {}
    for ((op_assign offset 0)
    ;(op_lessThan offset tmp_cnt);(op_postFixIncr offset)){
      (op_assign ret foo((op_amper tel_data)))
      if (op_logicalOr (op_bracketedPrimary (op_equals ret 0)) (op_bracketedPrimary (op_equals ret 1))) {
        return 1
      }
      else if (op_equals ret (op_minus 1)) {
        continue
      }
      else {}
      for ((op_assign j 0)
      ;(op_notequals x[j] 0);(op_postFixIncr j)){
        if (op_equals x[i] 1) {
          memmove(((op_amper x[i]),(op_amper x[(op_plus i 1)]),(op_minus (op_bracketedPrimary 1001) (op_bracketedPrimary (op_plus i 1)))))
        }
        else {}
      }
      (op_assign ret bar(x))
      if (op_notequals ret (op_minus 1)) {
        continue
      }
      else {}
      (op_assign klen strlen(x))
      if (op_greaterThan klen 20) {
        (op_assign x[i] 0)
      }
      else if (op_greaterThan klen 0) {
        (op_assign x[i] (op_minus 1))
      }
      else {}
    }
  }
  __VERIFIER_assert((op_logicalAnd (op_greaterEqual offset 0) (op_lessEqual offset 1000)))
  return 1
}
