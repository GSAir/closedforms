// # loops/s3_false-unreach-call.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void malloc(t_int sz)
  t_int __VERIFIER_nondet_int(t_void )
  t_int size_t
  t_unspecified __time_t
  buf_mem_st
  buf_mem_st BUF_MEM
  __time_t time_t
  stack_st
  stack_st STACK
  bio_st
  bio_st
  crypto_ex_data_st
  crypto_ex_data_st CRYPTO_EX_DATA
  bio_st BIO
  t_void bio_info_cb(bio_st ,t_int ,t_char ,t_int ,t_unspecified ,t_unspecified )
  bio_method_st
  bio_method_st BIO_METHOD
  bio_st
  bignum_st
  bignum_st BIGNUM
  bignum_ctx
  bignum_ctx BN_CTX
  bn_blinding_st
  bn_blinding_st BN_BLINDING
  bn_mont_ctx_st
  bn_mont_ctx_st BN_MONT_CTX
  X509_algor_st
  X509_algor_st
  X509_algor_st
  asn1_object_st
  asn1_object_st ASN1_OBJECT
  asn1_string_st
  asn1_string_st ASN1_STRING
  asn1_string_st ASN1_INTEGER
  asn1_string_st ASN1_ENUMERATED
  asn1_string_st ASN1_BIT_STRING
  asn1_string_st ASN1_OCTET_STRING
  asn1_string_st ASN1_PRINTABLESTRING
  asn1_string_st ASN1_T61STRING
  asn1_string_st ASN1_IA5STRING
  asn1_string_st ASN1_GENERALSTRING
  asn1_string_st ASN1_UNIVERSALSTRING
  asn1_string_st ASN1_BMPSTRING
  asn1_string_st ASN1_UTCTIME
  asn1_string_st ASN1_TIME
  asn1_string_st ASN1_GENERALIZEDTIME
  asn1_string_st ASN1_VISIBLESTRING
  asn1_string_st ASN1_UTF8STRING
  t_int ASN1_BOOLEAN
  __anonunion_value_19
  asn1_type_st
  asn1_type_st ASN1_TYPE
  MD5state_st
  MD5state_st MD5_CTX
  SHAstate_st
  SHAstate_st SHA_CTX
  MD2state_st
  MD2state_st MD2_CTX
  MD4state_st
  MD4state_st MD4_CTX
  RIPEMD160state_st
  RIPEMD160state_st RIPEMD160_CTX
  t_char des_cblock
  __anonunion_ks_20
  des_ks_struct
  des_ks_struct des_key_schedule
  rc4_key_st
  rc4_key_st RC4_KEY
  rc2_key_st
  rc2_key_st RC2_KEY
  rc5_key_st
  rc5_key_st RC5_32_KEY
  bf_key_st
  bf_key_st BF_KEY
  cast_key_st
  cast_key_st CAST_KEY
  idea_key_st
  idea_key_st IDEA_KEY_SCHEDULE
  mdc2_ctx_st
  mdc2_ctx_st MDC2_CTX
  rsa_st
  rsa_st
  rsa_st RSA
  rsa_meth_st
  rsa_meth_st RSA_METHOD
  rsa_st
  dh_st
  dh_st
  dh_st DH
  dh_method
  dh_method DH_METHOD
  dh_st
  dsa_st
  dsa_st
  dsa_st DSA
  DSA_SIG_st
  DSA_SIG_st DSA_SIG
  dsa_method
  dsa_method DSA_METHOD
  dsa_st
  __anonunion_pkey_21
  evp_pkey_st
  evp_pkey_st EVP_PKEY
  env_md_st
  env_md_st EVP_MD
  __anonunion_md_22
  env_md_ctx_st
  env_md_ctx_st EVP_MD_CTX
  evp_cipher_st
  evp_cipher_st
  evp_cipher_st EVP_CIPHER
  evp_cipher_ctx_st
  evp_cipher_ctx_st
  evp_cipher_ctx_st EVP_CIPHER_CTX
  evp_cipher_st
  __anonstruct_rc4_24
  __anonstruct_desx_cbc_25
  __anonstruct_des_ede_26
  __anonstruct_rc2_27
  __anonstruct_rc5_28
  __anonunion_c_23
  evp_cipher_ctx_st
  comp_method_st
  comp_method_st COMP_METHOD
  comp_ctx_st
  comp_ctx_st COMP_CTX
  X509_algor_st
  X509_algor_st X509_ALGOR
  X509_val_st
  X509_val_st X509_VAL
  X509_pubkey_st
  X509_pubkey_st X509_PUBKEY
  X509_name_st
  X509_name_st X509_NAME
  x509_cinf_st
  x509_cinf_st X509_CINF
  x509_cert_aux_st
  x509_cert_aux_st X509_CERT_AUX
  AUTHORITY_KEYID_st
  AUTHORITY_KEYID_st
  x509_st
  x509_st X509
  lhash_node_st
  lhash_node_st LHASH_NODE
  lhash_st
  x509_store_ctx_st
  x509_store_ctx_st
  x509_store_ctx_st X509_STORE_CTX
  x509_store_st
  x509_store_st X509_STORE
  x509_store_ctx_st
  t_int pem_password_cb(t_char buf,t_int size,t_int rwflag,t_void userdata)
  ssl_st
  ssl_st
  ssl_cipher_st
  ssl_cipher_st SSL_CIPHER
  ssl_st SSL
  ssl_ctx_st
  ssl_ctx_st
  ssl_ctx_st SSL_CTX
  ssl3_enc_method
  ssl3_enc_method
  ssl_method_st
  ssl_method_st SSL_METHOD
  sess_cert_st
  sess_cert_st
  ssl_session_st
  ssl_session_st SSL_SESSION
  ssl_comp_st
  ssl_comp_st SSL_COMP
  __anonstruct_stats_37
  cert_st
  cert_st
  ssl_ctx_st
  ssl2_state_st
  ssl2_state_st
  ssl3_state_st
  ssl3_state_st
  ssl_st
  __anonstruct_tmp_38
  ssl2_state_st
  ssl3_record_st
  ssl3_record_st SSL3_RECORD
  ssl3_buffer_st
  ssl3_buffer_st SSL3_BUFFER
  __anonstruct_tmp_39
  ssl3_state_st
  cert_pkey_st
  cert_pkey_st CERT_PKEY
  cert_st
  sess_cert_st
  ssl3_enc_method
  t_void memcpy(t_void __dest,t_void __src,size_t __n)
  SSL_METHOD SSLv3_client_method(t_void )
  SSL_METHOD sslv3_base_method(t_void )
  t_int ssl3_connect(SSL s)
  SSL_METHOD ssl3_get_client_method(t_int ver)
  SSL_METHOD ssl3_get_client_method(t_int ver){
    SSL_METHOD tmp
    {
      if (op_equals ver 768) {
        {
          (op_assign tmp SSLv3_client_method())
        }
        return (op_bracketedPrimary tmp)
      }
      else {
        return (op_bracketedPrimary (t_unspecified)(op_bracketedPrimary (t_unspecified)0))
      }
    }
  }
  t_int init = 1
  SSL_METHOD SSLv3_client_data
  SSL_METHOD SSLv3_client_method(t_void ){
    t_char tmp
    SSL_METHOD tmp___0
    {
      if init {
        {
          (op_assign init 0)
          (op_assign tmp___0 sslv3_base_method())
          (op_assign tmp (t_unspecified)tmp___0)
          memcpy(((t_unspecified)(op_bracketedPrimary (t_unspecified)(op_bracketedPrimary (op_amper SSLv3_client_data))),(t_unspecified)tmp,op_sizeof(SSL_METHOD)))
          (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4ac99d0) (op_amper ssl3_connect))
          (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@195d695) (op_amper ssl3_get_client_method))
        }
      }
      else {
      }
      return (op_bracketedPrimary (op_amper SSLv3_client_data))
    }
  }
  t_int main(t_void ){
    SSL s
    {
      {
        (op_assign s malloc(op_sizeof(SSL)))
        (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2412d7d3) malloc(op_sizeof(ssl3_state_st)))
        (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@31cb814e) 12292)
        ssl3_connect(s)
      }
      return (op_bracketedPrimary 0)
    }
  }
  t_int ssl3_connect(SSL s){
    BUF_MEM buf
    t_unspecified tmp
    t_unspecified l
    t_unspecified num1
    t_void ()
    t_int ret
    t_int new_state
    t_int state
    t_int skip
    t_int tmp___0
    t_int tmp___1
    t_int tmp___2
    t_int tmp___3
    t_int tmp___4
    t_int tmp___5
    t_int tmp___6
    t_int tmp___7
    t_int tmp___8
    t_unspecified tmp___9
    t_int blastFlag
    {
      (op_assign blastFlag 0)
      (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@51c9fcbe) 12292)
      (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7ec7a96c) __VERIFIER_nondet_int())
      (op_assign tmp __VERIFIER_nondet_int())
      (op_assign cb (t_unspecified)(op_bracketedPrimary (t_unspecified)0))
      (op_assign ret (op_minus 1))
      (op_assign skip 0)
      (op_assign tmp___0 (t_unspecified)malloc(op_sizeof(t_int)))
      (op_assign (op_star tmp___0) 0)
      if (op_notequals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4cd94528) (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
        (op_assign cb (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@21756c0c))
      }
      else {
        if (op_notequals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3f475890) (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
          (op_assign cb (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7c880add))
        }
        else {
        }
      }
      (op_plusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7a7ee061) 1)
      if (op_binaryAnd tmp___1 12288) {
        if (op_binaryAnd tmp___2 16384) {
        }
        else {
        }
      }
      else {
      }
      {
        while 1
        {
          while_0_continue:
          {}
          (op_assign state (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7061e62e))
          if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7567a36a) 12292) {
            goto switch_1_12292
          }
          else {
            if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@490591f9) 16384) {
              goto switch_1_16384
            }
            else {
              if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@44751d50) 4096) {
                goto switch_1_4096
              }
              else {
                if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3bdac366) 20480) {
                  goto switch_1_20480
                }
                else {
                  if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@73ee4b84) 4099) {
                    goto switch_1_4099
                  }
                  else {
                    if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@16819659) 4368) {
                      goto switch_1_4368
                    }
                    else {
                      if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7a728644) 4369) {
                        goto switch_1_4369
                      }
                      else {
                        if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@175eab9f) 4384) {
                          goto switch_1_4384
                        }
                        else {
                          if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@16ed709b) 4385) {
                            goto switch_1_4385
                          }
                          else {
                            if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@c441f41) 4400) {
                              goto switch_1_4400
                            }
                            else {
                              if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@626ae82b) 4401) {
                                goto switch_1_4401
                              }
                              else {
                                if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@8aa5aa) 4416) {
                                  goto switch_1_4416
                                }
                                else {
                                  if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7d9e6488) 4417) {
                                    goto switch_1_4417
                                  }
                                  else {
                                    if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@518cc26d) 4432) {
                                      goto switch_1_4432
                                    }
                                    else {
                                      if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@641243c7) 4433) {
                                        goto switch_1_4433
                                      }
                                      else {
                                        if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@31e01d1a) 4448) {
                                          goto switch_1_4448
                                        }
                                        else {
                                          if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3fd4858a) 4449) {
                                            goto switch_1_4449
                                          }
                                          else {
                                            if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@8fca7b7) 4464) {
                                              goto switch_1_4464
                                            }
                                            else {
                                              if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7e06d114) 4465) {
                                                goto switch_1_4465
                                              }
                                              else {
                                                if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4f3f0b03) 4466) {
                                                  goto switch_1_4466
                                                }
                                                else {
                                                  if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@54dc3fbb) 4467) {
                                                    goto switch_1_4467
                                                  }
                                                  else {
                                                    if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@39f0fb88) 4480) {
                                                      goto switch_1_4480
                                                    }
                                                    else {
                                                      if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@71b603d3) 4481) {
                                                        goto switch_1_4481
                                                      }
                                                      else {
                                                        if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@46e669f5) 4496) {
                                                          goto switch_1_4496
                                                        }
                                                        else {
                                                          if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@73f2b775) 4497) {
                                                            goto switch_1_4497
                                                          }
                                                          else {
                                                            if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4d603e38) 4512) {
                                                              goto switch_1_4512
                                                            }
                                                            else {
                                                              if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@c8904dc) 4513) {
                                                                goto switch_1_4513
                                                              }
                                                              else {
                                                                if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@79d56d79) 4528) {
                                                                  goto switch_1_4528
                                                                }
                                                                else {
                                                                  if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@1ffa2429) 4529) {
                                                                    goto switch_1_4529
                                                                  }
                                                                  else {
                                                                    if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@53275810) 4560) {
                                                                      goto switch_1_4560
                                                                    }
                                                                    else {
                                                                      if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@17cc094c) 4561) {
                                                                        goto switch_1_4561
                                                                      }
                                                                      else {
                                                                        if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@45200069) 4352) {
                                                                          goto switch_1_4352
                                                                        }
                                                                        else {
                                                                          if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@bb5af88) 3) {
                                                                            goto switch_1_3
                                                                          }
                                                                          else {
                                                                            {
                                                                              goto switch_1_default
                                                                              if 0 {
                                                                                switch_1_12292:
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@62bb8136) 1)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@15ca6244) 4096)
                                                                                (op_plusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@502c1bdc) 1)
                                                                                switch_1_16384:
                                                                                {}
                                                                                switch_1_4096:
                                                                                {}
                                                                                switch_1_20480:
                                                                                {}
                                                                                switch_1_4099:
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@76c337be) 0)
                                                                                if (op_notequals (t_unspecified)cb (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_notequals (op_bracketedPrimary (op_binaryAnd (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@48cfba61) 65280)) 768) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@ed1397e) 4096)
                                                                                if (op_equals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3e133183) (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                                                                                  (op_assign tmp___3 __VERIFIER_nondet_int())
                                                                                  if (op_not tmp___3) {
                                                                                    (op_assign ret (op_minus 1))
                                                                                    goto end
                                                                                  }
                                                                                  else {
                                                                                  }
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@51028f38) buf)
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign tmp___4 __VERIFIER_nondet_int())
                                                                                if (op_not tmp___4) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign tmp___5 __VERIFIER_nondet_int())
                                                                                if (op_not tmp___5) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@64ab2bcb) 4368)
                                                                                (op_plusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@6336e4e9) 1)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@440e5e25) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4368:
                                                                                {}
                                                                                switch_1_4369:
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@13072d3) 0)
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_equals blastFlag 0) {
                                                                                  (op_assign blastFlag 1)
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3c78e44d) 4384)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@68bd5e87) 0)
                                                                                if (op_notequals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@5ef4cac3) (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@5c508d24)) {
                                                                                }
                                                                                else {
                                                                                }
                                                                                goto switch_1_break
                                                                                switch_1_4384:
                                                                                {}
                                                                                switch_1_4385:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_equals blastFlag 1) {
                                                                                  (op_assign blastFlag 2)
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@27f1506f) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@25ba6b70) 4560)
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@5de00fd6) 4400)
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@50190e3) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4400:
                                                                                {}
                                                                                switch_1_4401:
                                                                                {}
                                                                                if (op_binaryAnd (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@285eda04) 256UL) {
                                                                                  (op_assign skip 1)
                                                                                }
                                                                                else {
                                                                                  (op_assign ret __VERIFIER_nondet_int())
                                                                                  if (op_equals blastFlag 2) {
                                                                                    (op_assign blastFlag 3)
                                                                                  }
                                                                                  else {
                                                                                  }
                                                                                  if (op_lessEqual ret 0) {
                                                                                    goto end
                                                                                  }
                                                                                  else {
                                                                                  }
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@5ec9c594) 4416)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@30aff24) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4416:
                                                                                {}
                                                                                switch_1_4417:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_equals blastFlag 3) {
                                                                                  (op_assign blastFlag 4)
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@a05e12e) 4432)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@54d59490) 0)
                                                                                (op_assign tmp___6 __VERIFIER_nondet_int())
                                                                                if (op_not tmp___6) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                goto switch_1_break
                                                                                switch_1_4432:
                                                                                {}
                                                                                switch_1_4433:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_equals blastFlag 5) {
                                                                                  goto ERROR
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@44a01efb) 4448)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@10872a94) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4448:
                                                                                {}
                                                                                switch_1_4449:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_equals blastFlag 4) {
                                                                                  goto ERROR
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@35aeb53b) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4d27d60a) 4464)
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@9b45e93) 4480)
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@204e06bb) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4464:
                                                                                {}
                                                                                switch_1_4465:
                                                                                {}
                                                                                switch_1_4466:
                                                                                {}
                                                                                switch_1_4467:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@600968e4) 4480)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@136d7569) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4480:
                                                                                {}
                                                                                switch_1_4481:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign l (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3886e151))
                                                                                if (op_equals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@68ad4324) 1) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@43c8489d) 4496)
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3bf6bbb0) 4512)
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@347549f6) 0)
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@36c3883f) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4496:
                                                                                {}
                                                                                switch_1_4497:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@374eb2da) 4512)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@396bb4b8) 0)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@274f609a) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4512:
                                                                                {}
                                                                                switch_1_4513:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@d67863c) 4528)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4f7d3d28) 0)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2b579e0b) (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@77c0604b))
                                                                                if (op_equals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@46a74ee9) (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@6015bf68) 0)
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7725c2a7) (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3133630))
                                                                                }
                                                                                (op_assign tmp___7 __VERIFIER_nondet_int())
                                                                                if (op_not tmp___7) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign tmp___8 __VERIFIER_nondet_int())
                                                                                if (op_not tmp___8) {
                                                                                  (op_assign ret (op_minus 1))
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                goto switch_1_break
                                                                                switch_1_4528:
                                                                                {}
                                                                                switch_1_4529:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7f3ff0bd) 4352)
                                                                                (op_binaryAndAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@329ceecd) (op_minus 5L))
                                                                                if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@6bf522c3) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@714d3b3b) 3)
                                                                                  if (op_binaryAnd (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@717797b7) 2L) {
                                                                                    (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2448e5d2) 3)
                                                                                    (op_binaryOrAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@666938a2) 4L)
                                                                                    (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7ee553b7) 0)
                                                                                  }
                                                                                  else {
                                                                                  }
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3362a9f3) 4560)
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@5067ac38) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4560:
                                                                                {}
                                                                                switch_1_4561:
                                                                                (op_assign ret __VERIFIER_nondet_int())
                                                                                if (op_lessEqual ret 0) {
                                                                                  goto end
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7f6432be) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2bc8ae0e) 4512)
                                                                                }
                                                                                else {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@d43a7b5) 3)
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@60a8cc49) 0)
                                                                                goto switch_1_break
                                                                                switch_1_4352:
                                                                                (op_assign num1 __VERIFIER_nondet_int())
                                                                                if (op_greaterThan num1 0L) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3e07e320) 2)
                                                                                  (op_assign tmp___9 __VERIFIER_nondet_int())
                                                                                  (op_assign num1 (t_unspecified)(op_bracketedPrimary (t_unspecified)tmp___9))
                                                                                  if (op_lessEqual num1 0L) {
                                                                                    (op_assign ret (op_minus 1))
                                                                                    goto end
                                                                                  }
                                                                                  else {
                                                                                  }
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@50519230) 1)
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@403fe980) (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@6653af4a))
                                                                                goto switch_1_break
                                                                                switch_1_3:
                                                                                if (op_notequals (t_unspecified)(exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@67cc4e43) (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                                                                                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3bd09098) (t_unspecified)(op_bracketedPrimary (t_unspecified)0))
                                                                                }
                                                                                else {
                                                                                }
                                                                                if (op_not (op_bracketedPrimary (op_binaryAnd (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@41c1d8b) 4L))) {
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7f4ecbbd) 0)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7af52c41) 0)
                                                                                if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@459e27d7) {
                                                                                  (op_plusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@218a9aaa) 1)
                                                                                }
                                                                                else {
                                                                                }
                                                                                (op_assign ret 1)
                                                                                (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2890be05) (t_unspecified)(op_bracketedPrimary (op_amper ssl3_connect)))
                                                                                (op_plusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@7bd41872) 1)
                                                                                if (op_notequals (t_unspecified)cb (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                                                                                }
                                                                                else {
                                                                                }
                                                                                goto end
                                                                                switch_1_default:
                                                                                (op_assign ret (op_minus 1))
                                                                                goto end
                                                                              }
                                                                              else {
                                                                                switch_1_break:
                                                                                {}
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (op_not (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4fc02840)) {
            if (op_not skip) {
              if (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@3a6aa4d8) {
                (op_assign ret __VERIFIER_nondet_int())
                if (op_lessEqual ret 0) {
                  goto end
                }
                else {
                }
              }
              else {
              }
              if (op_notequals (t_unspecified)cb (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
                if (op_notequals (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@17275506) state) {
                  (op_assign new_state (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4cebc818))
                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@2a77bed) state)
                  (op_assign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@6d845305) new_state)
                }
                else {
                }
              }
              else {
              }
            }
            else {
            }
          }
          else {
          }
          (op_assign skip 0)
        }
        while_0_break:
        {}
      }
      end:
      (op_minusAssign (exp org.eclipse.cdt.internal.core.dom.parser.c.CASTFieldReference@4026b4d6) 1)
      if (op_notequals (t_unspecified)cb (t_unspecified)(op_bracketedPrimary (t_unspecified)0)) {
      }
      else {
      }
      return (op_bracketedPrimary ret)
      ERROR:
      __VERIFIER_error()
    }
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void *malloc(unsigned int sz);
  extern int __VERIFIER_nondet_int(void);
  typedef unsigned int size_t;
  typedef long __time_t;
  struct buf_mem_st
  {
    int length;
    char *data;
    int max;
  };
  typedef struct buf_mem_st BUF_MEM;
  typedef __time_t time_t;
  struct stack_st
  {
    int num;
    char **data;
    int sorted;
    int num_alloc;
    int (*comp)(const char*const *, const char*const *);
  };
  typedef struct stack_st STACK;
  struct bio_st;
  struct bio_st;
  struct crypto_ex_data_st
  {
    STACK *sk;
    int dummy;
  };
  typedef struct crypto_ex_data_st CRYPTO_EX_DATA;
  typedef struct bio_st BIO;
  typedef void bio_info_cb(struct bio_st*, int, const char*, int, long , long );
  struct bio_method_st
  {
    int type;
    const char *name;
    int (*bwrite)(BIO*, const char*, int);
    int (*bread)(BIO*, char*, int);
    int (*bputs)(BIO*, const char*);
    int (*bgets)(BIO*, char*, int);
    long (*ctrl)(BIO*, int, long , void*);
    int (*create)(BIO*);
    int (*destroy)(BIO*);
    long (*callback_ctrl)(BIO*, int, bio_info_cb*);
  };
  typedef struct bio_method_st BIO_METHOD;
  struct bio_st
  {
    BIO_METHOD *method;
    long (*callback)(struct bio_st*, int, const char*, int, long , long );
    char *cb_arg;
    int init;
    int shutdown;
    int flags;
    int retry_reason;
    int num;
    void *ptr;
    struct bio_st *next_bio;
    struct bio_st *prev_bio;
    int references;
    unsigned long num_read;
    unsigned long num_write;
    CRYPTO_EX_DATA ex_data;
  };
  struct bignum_st
  {
    unsigned long *d;
    int top;
    int dmax;
    int neg;
    int flags;
  };
  typedef struct bignum_st BIGNUM;
  struct bignum_ctx
  {
    int tos;
    BIGNUM bn[16];
    int flags;
    int depth;
    int pos[12];
    int too_many;
  };
  typedef struct bignum_ctx BN_CTX;
  struct bn_blinding_st
  {
    int init;
    BIGNUM *A;
    BIGNUM *Ai;
    BIGNUM *mod;
  };
  typedef struct bn_blinding_st BN_BLINDING;
  struct bn_mont_ctx_st
  {
    int ri;
    BIGNUM RR;
    BIGNUM N;
    BIGNUM Ni;
    unsigned long n0;
    int flags;
  };
  typedef struct bn_mont_ctx_st BN_MONT_CTX;
  struct X509_algor_st;
  struct X509_algor_st;
  struct X509_algor_st;
  struct asn1_object_st
  {
    const char *sn;
    const char *ln;
    int nid;
    int length;
    unsigned char *data;
    int flags;
  };
  typedef struct asn1_object_st ASN1_OBJECT;
  struct asn1_string_st
  {
    int length;
    int type;
    unsigned char *data;
    long flags;
  };
  typedef struct asn1_string_st ASN1_STRING;
  typedef struct asn1_string_st ASN1_INTEGER;
  typedef struct asn1_string_st ASN1_ENUMERATED;
  typedef struct asn1_string_st ASN1_BIT_STRING;
  typedef struct asn1_string_st ASN1_OCTET_STRING;
  typedef struct asn1_string_st ASN1_PRINTABLESTRING;
  typedef struct asn1_string_st ASN1_T61STRING;
  typedef struct asn1_string_st ASN1_IA5STRING;
  typedef struct asn1_string_st ASN1_GENERALSTRING;
  typedef struct asn1_string_st ASN1_UNIVERSALSTRING;
  typedef struct asn1_string_st ASN1_BMPSTRING;
  typedef struct asn1_string_st ASN1_UTCTIME;
  typedef struct asn1_string_st ASN1_TIME;
  typedef struct asn1_string_st ASN1_GENERALIZEDTIME;
  typedef struct asn1_string_st ASN1_VISIBLESTRING;
  typedef struct asn1_string_st ASN1_UTF8STRING;
  typedef int ASN1_BOOLEAN;
  union __anonunion_value_19
  {
    char *ptr;
    ASN1_BOOLEAN boolean;
    ASN1_STRING *asn1_string;
    ASN1_OBJECT *object;
    ASN1_INTEGER *integer;
    ASN1_ENUMERATED *enumerated;
    ASN1_BIT_STRING *bit_string;
    ASN1_OCTET_STRING *octet_string;
    ASN1_PRINTABLESTRING *printablestring;
    ASN1_T61STRING *t61string;
    ASN1_IA5STRING *ia5string;
    ASN1_GENERALSTRING *generalstring;
    ASN1_BMPSTRING *bmpstring;
    ASN1_UNIVERSALSTRING *universalstring;
    ASN1_UTCTIME *utctime;
    ASN1_GENERALIZEDTIME *generalizedtime;
    ASN1_VISIBLESTRING *visiblestring;
    ASN1_UTF8STRING *utf8string;
    ASN1_STRING *set;
    ASN1_STRING *sequence;
  };
  struct asn1_type_st
  {
    int type;
    union __anonunion_value_19 value;
  };
  typedef struct asn1_type_st ASN1_TYPE;
  struct MD5state_st
  {
    unsigned int A;
    unsigned int B;
    unsigned int C;
    unsigned int D;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
  };
  typedef struct MD5state_st MD5_CTX;
  struct SHAstate_st
  {
    unsigned int h0;
    unsigned int h1;
    unsigned int h2;
    unsigned int h3;
    unsigned int h4;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
  };
  typedef struct SHAstate_st SHA_CTX;
  struct MD2state_st
  {
    int num;
    unsigned char data[16];
    unsigned int cksm[16];
    unsigned int state[16];
  };
  typedef struct MD2state_st MD2_CTX;
  struct MD4state_st
  {
    unsigned int A;
    unsigned int B;
    unsigned int C;
    unsigned int D;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
  };
  typedef struct MD4state_st MD4_CTX;
  struct RIPEMD160state_st
  {
    unsigned int A;
    unsigned int B;
    unsigned int C;
    unsigned int D;
    unsigned int E;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
  };
  typedef struct RIPEMD160state_st RIPEMD160_CTX;
  typedef unsigned char des_cblock[8];
  union __anonunion_ks_20
  {
    des_cblock cblock;
    unsigned long deslong[2];
  };
  struct des_ks_struct
  {
    union __anonunion_ks_20 ks;
    int weak_key;
  };
  typedef struct des_ks_struct des_key_schedule[16];
  struct rc4_key_st
  {
    unsigned int x;
    unsigned int y;
    unsigned int data[256];
  };
  typedef struct rc4_key_st RC4_KEY;
  struct rc2_key_st
  {
    unsigned int data[64];
  };
  typedef struct rc2_key_st RC2_KEY;
  struct rc5_key_st
  {
    int rounds;
    unsigned long data[34];
  };
  typedef struct rc5_key_st RC5_32_KEY;
  struct bf_key_st
  {
    unsigned int P[18];
    unsigned int S[1024];
  };
  typedef struct bf_key_st BF_KEY;
  struct cast_key_st
  {
    unsigned long data[32];
    int short_key;
  };
  typedef struct cast_key_st CAST_KEY;
  struct idea_key_st
  {
    unsigned int data[9][6];
  };
  typedef struct idea_key_st IDEA_KEY_SCHEDULE;
  struct mdc2_ctx_st
  {
    int num;
    unsigned char data[8];
    des_cblock h;
    des_cblock hh;
    int pad_type;
  };
  typedef struct mdc2_ctx_st MDC2_CTX;
  struct rsa_st;
  struct rsa_st;
  typedef struct rsa_st RSA;
  struct rsa_meth_st
  {
    const char *name;
    int (*rsa_pub_enc)(int flen, unsigned char *from, unsigned char *to, RSA *rsa, int padding);
    int (*rsa_pub_dec)(int flen, unsigned char *from, unsigned char *to, RSA *rsa, int padding);
    int (*rsa_priv_enc)(int flen, unsigned char *from, unsigned char *to, RSA *rsa, int padding);
    int (*rsa_priv_dec)(int flen, unsigned char *from, unsigned char *to, RSA *rsa, int padding);
    int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);
    int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
    int (*init)(RSA *rsa);
    int (*finish)(RSA *rsa);
    int flags;
    char *app_data;
    int (*rsa_sign)(int type, unsigned char *m, unsigned int m_len, unsigned char *sigret, unsigned int *siglen, RSA *rsa);
    int (*rsa_verify)(int dtype, unsigned char *m, unsigned int m_len, unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
  };
  typedef struct rsa_meth_st RSA_METHOD;
  struct rsa_st
  {
    int pad;
    int version;
    RSA_METHOD *meth;
    BIGNUM *n;
    BIGNUM *e;
    BIGNUM *d;
    BIGNUM *p;
    BIGNUM *q;
    BIGNUM *dmp1;
    BIGNUM *dmq1;
    BIGNUM *iqmp;
    CRYPTO_EX_DATA ex_data;
    int references;
    int flags;
    BN_MONT_CTX *_method_mod_n;
    BN_MONT_CTX *_method_mod_p;
    BN_MONT_CTX *_method_mod_q;
    char *bignum_data;
    BN_BLINDING *blinding;
  };
  struct dh_st;
  struct dh_st;
  typedef struct dh_st DH;
  struct dh_method
  {
    const char *name;
    int (*generate_key)(DH *dh);
    int (*compute_key)(unsigned char *key, BIGNUM *pub_key, DH *dh);
    int (*bn_mod_exp)(DH *dh, BIGNUM *r, BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
    int (*init)(DH *dh);
    int (*finish)(DH *dh);
    int flags;
    char *app_data;
  };
  typedef struct dh_method DH_METHOD;
  struct dh_st
  {
    int pad;
    int version;
    BIGNUM *p;
    BIGNUM *g;
    int length;
    BIGNUM *pub_key;
    BIGNUM *priv_key;
    int flags;
    char *method_mont_p;
    BIGNUM *q;
    BIGNUM *j;
    unsigned char *seed;
    int seedlen;
    BIGNUM *counter;
    int references;
    CRYPTO_EX_DATA ex_data;
    DH_METHOD *meth;
  };
  struct dsa_st;
  struct dsa_st;
  typedef struct dsa_st DSA;
  struct DSA_SIG_st
  {
    BIGNUM *r;
    BIGNUM *s;
  };
  typedef struct DSA_SIG_st DSA_SIG;
  struct dsa_method
  {
    const char *name;
    DSA_SIG *(*dsa_do_sign)(const unsigned char *dgst, int dlen, DSA *dsa);
    int (*dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp);
    int (*dsa_do_verify)(const unsigned char *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);
    int (*dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1, BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
    int (*bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
    int (*init)(DSA *dsa);
    int (*finish)(DSA *dsa);
    int flags;
    char *app_data;
  };
  typedef struct dsa_method DSA_METHOD;
  struct dsa_st
  {
    int pad;
    int version;
    int write_params;
    BIGNUM *p;
    BIGNUM *q;
    BIGNUM *g;
    BIGNUM *pub_key;
    BIGNUM *priv_key;
    BIGNUM *kinv;
    BIGNUM *r;
    int flags;
    char *method_mont_p;
    int references;
    CRYPTO_EX_DATA ex_data;
    DSA_METHOD *meth;
  };
  union __anonunion_pkey_21
  {
    char *ptr;
    struct rsa_st *rsa;
    struct dsa_st *dsa;
    struct dh_st *dh;
  };
  struct evp_pkey_st
  {
    int type;
    int save_type;
    int references;
    union __anonunion_pkey_21 pkey;
    int save_parameters;
    STACK *attributes;
  };
  typedef struct evp_pkey_st EVP_PKEY;
  struct env_md_st
  {
    int type;
    int pkey_type;
    int md_size;
    void (*init)();
    void (*update)();
    void (*final)();
    int (*sign)();
    int (*verify)();
    int required_pkey_type[5];
    int block_size;
    int ctx_size;
  };
  typedef struct env_md_st EVP_MD;
  union __anonunion_md_22
  {
    unsigned char base[4];
    MD2_CTX md2;
    MD5_CTX md5;
    MD4_CTX md4;
    RIPEMD160_CTX ripemd160;
    SHA_CTX sha;
    MDC2_CTX mdc2;
  };
  struct env_md_ctx_st
  {
    const EVP_MD *digest;
    union __anonunion_md_22 md;
  };
  typedef struct env_md_ctx_st EVP_MD_CTX;
  struct evp_cipher_st;
  struct evp_cipher_st;
  typedef struct evp_cipher_st EVP_CIPHER;
  struct evp_cipher_ctx_st;
  struct evp_cipher_ctx_st;
  typedef struct evp_cipher_ctx_st EVP_CIPHER_CTX;
  struct evp_cipher_st
  {
    int nid;
    int block_size;
    int key_len;
    int iv_len;
    unsigned long flags;
    int (*init)(EVP_CIPHER_CTX *ctx, const unsigned char *key, const unsigned char *iv, int enc);
    int (*do_cipher)(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, unsigned int inl);
    int (*cleanup)(EVP_CIPHER_CTX*);
    int ctx_size;
    int (*set_asn1_parameters)(EVP_CIPHER_CTX*, ASN1_TYPE*);
    int (*get_asn1_parameters)(EVP_CIPHER_CTX*, ASN1_TYPE*);
    int (*ctrl)(EVP_CIPHER_CTX*, int type, int arg, void *ptr);
    void *app_data;
  };
  struct __anonstruct_rc4_24
  {
    unsigned char key[16];
    RC4_KEY ks;
  };
  struct __anonstruct_desx_cbc_25
  {
    des_key_schedule ks;
    des_cblock inw;
    des_cblock outw;
  };
  struct __anonstruct_des_ede_26
  {
    des_key_schedule ks1;
    des_key_schedule ks2;
    des_key_schedule ks3;
  };
  struct __anonstruct_rc2_27
  {
    int key_bits;
    RC2_KEY ks;
  };
  struct __anonstruct_rc5_28
  {
    int rounds;
    RC5_32_KEY ks;
  };
  union __anonunion_c_23
  {
    struct __anonstruct_rc4_24 rc4;
    des_key_schedule des_ks;
    struct __anonstruct_desx_cbc_25 desx_cbc;
    struct __anonstruct_des_ede_26 des_ede;
    IDEA_KEY_SCHEDULE idea_ks;
    struct __anonstruct_rc2_27 rc2;
    struct __anonstruct_rc5_28 rc5;
    BF_KEY bf_ks;
    CAST_KEY cast_ks;
  };
  struct evp_cipher_ctx_st
  {
    const EVP_CIPHER *cipher;
    int encrypt;
    int buf_len;
    unsigned char oiv[8];
    unsigned char iv[8];
    unsigned char buf[8];
    int num;
    void *app_data;
    int key_len;
    union __anonunion_c_23 c;
  };
  struct comp_method_st
  {
    int type;
    const char *name;
    int (*init)();
    void (*finish)();
    int (*compress)();
    int (*expand)();
    long (*ctrl)();
    long (*callback_ctrl)();
  };
  typedef struct comp_method_st COMP_METHOD;
  struct comp_ctx_st
  {
    COMP_METHOD *meth;
    unsigned long compress_in;
    unsigned long compress_out;
    unsigned long expand_in;
    unsigned long expand_out;
    CRYPTO_EX_DATA ex_data;
  };
  typedef struct comp_ctx_st COMP_CTX;
  struct X509_algor_st
  {
    ASN1_OBJECT *algorithm;
    ASN1_TYPE *parameter;
  };
  typedef struct X509_algor_st X509_ALGOR;
  struct X509_val_st
  {
    ASN1_TIME *notBefore;
    ASN1_TIME *notAfter;
  };
  typedef struct X509_val_st X509_VAL;
  struct X509_pubkey_st
  {
    X509_ALGOR *algor;
    ASN1_BIT_STRING *public_key;
    EVP_PKEY *pkey;
  };
  typedef struct X509_pubkey_st X509_PUBKEY;
  struct X509_name_st
  {
    STACK *entries;
    int modified;
    BUF_MEM *bytes;
    unsigned long hash;
  };
  typedef struct X509_name_st X509_NAME;
  struct x509_cinf_st
  {
    ASN1_INTEGER *version;
    ASN1_INTEGER *serialNumber;
    X509_ALGOR *signature;
    X509_NAME *issuer;
    X509_VAL *validity;
    X509_NAME *subject;
    X509_PUBKEY *key;
    ASN1_BIT_STRING *issuerUID;
    ASN1_BIT_STRING *subjectUID;
    STACK *extensions;
  };
  typedef struct x509_cinf_st X509_CINF;
  struct x509_cert_aux_st
  {
    STACK *trust;
    STACK *reject;
    ASN1_UTF8STRING *alias;
    ASN1_OCTET_STRING *keyid;
    STACK *other;
  };
  typedef struct x509_cert_aux_st X509_CERT_AUX;
  struct AUTHORITY_KEYID_st;
  struct AUTHORITY_KEYID_st;
  struct x509_st
  {
    X509_CINF *cert_info;
    X509_ALGOR *sig_alg;
    ASN1_BIT_STRING *signature;
    int valid;
    int references;
    char *name;
    CRYPTO_EX_DATA ex_data;
    long ex_pathlen;
    unsigned long ex_flags;
    unsigned long ex_kusage;
    unsigned long ex_xkusage;
    unsigned long ex_nscert;
    ASN1_OCTET_STRING *skid;
    struct AUTHORITY_KEYID_st *akid;
    unsigned char sha1_hash[20];
    X509_CERT_AUX *aux;
  };
  typedef struct x509_st X509;
  struct lhash_node_st
  {
    void *data;
    struct lhash_node_st *next;
    unsigned long hash;
  };
  typedef struct lhash_node_st LHASH_NODE;
  struct lhash_st
  {
    LHASH_NODE **b;
    int (*comp)();
    unsigned long (*hash)();
    unsigned int num_nodes;
    unsigned int num_alloc_nodes;
    unsigned int p;
    unsigned int pmax;
    unsigned long up_load;
    unsigned long down_load;
    unsigned long num_items;
    unsigned long num_expands;
    unsigned long num_expand_reallocs;
    unsigned long num_contracts;
    unsigned long num_contract_reallocs;
    unsigned long num_hash_calls;
    unsigned long num_comp_calls;
    unsigned long num_insert;
    unsigned long num_replace;
    unsigned long num_delete;
    unsigned long num_no_delete;
    unsigned long num_retrieve;
    unsigned long num_retrieve_miss;
    unsigned long num_hash_comps;
    int error;
  };
  struct x509_store_ctx_st;
  struct x509_store_ctx_st;
  typedef struct x509_store_ctx_st X509_STORE_CTX;
  struct x509_store_st
  {
    int cache;
    STACK *objs;
    STACK *get_cert_methods;
    int (*verify)(X509_STORE_CTX *ctx);
    int (*verify_cb)(int ok, X509_STORE_CTX *ctx);
    CRYPTO_EX_DATA ex_data;
    int references;
    int depth;
  };
  typedef struct x509_store_st X509_STORE;
  struct x509_store_ctx_st
  {
    X509_STORE *ctx;
    int current_method;
    X509 *cert;
    STACK *untrusted;
    int purpose;
    int trust;
    time_t check_time;
    unsigned long flags;
    void *other_ctx;
    int (*verify)(X509_STORE_CTX *ctx);
    int (*verify_cb)(int ok, X509_STORE_CTX *ctx);
    int (*get_issuer)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
    int (*check_issued)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
    int (*cleanup)(X509_STORE_CTX *ctx);
    int depth;
    int valid;
    int last_untrusted;
    STACK *chain;
    int error_depth;
    int error;
    X509 *current_cert;
    X509 *current_issuer;
    CRYPTO_EX_DATA ex_data;
  };
  typedef int pem_password_cb(char *buf, int size, int rwflag, void *userdata);
  struct ssl_st;
  struct ssl_st;
  struct ssl_cipher_st
  {
    int valid;
    const char *name;
    unsigned long id;
    unsigned long algorithms;
    unsigned long algo_strength;
    unsigned long algorithm2;
    int strength_bits;
    int alg_bits;
    unsigned long mask;
    unsigned long mask_strength;
  };
  typedef struct ssl_cipher_st SSL_CIPHER;
  typedef struct ssl_st SSL;
  struct ssl_ctx_st;
  struct ssl_ctx_st;
  typedef struct ssl_ctx_st SSL_CTX;
  struct ssl3_enc_method;
  struct ssl3_enc_method;
  struct ssl_method_st
  {
    int version;
    int (*ssl_new)(SSL *s);
    void (*ssl_clear)(SSL *s);
    void (*ssl_free)(SSL *s);
    int (*ssl_accept)(SSL *s);
    int (*ssl_connect)(SSL *s);
    int (*ssl_read)(SSL *s, void *buf, int len);
    int (*ssl_peek)(SSL *s, void *buf, int len);
    int (*ssl_write)(SSL *s, const void *buf, int len);
    int (*ssl_shutdown)(SSL *s);
    int (*ssl_renegotiate)(SSL *s);
    int (*ssl_renegotiate_check)(SSL *s);
    long (*ssl_ctrl)(SSL *s, int cmd, long  larg, char *parg);
    long (*ssl_ctx_ctrl)(SSL_CTX *ctx, int cmd, long  larg, char *parg);
    SSL_CIPHER *(*get_cipher_by_char)(const unsigned char *ptr);
    int (*put_cipher_by_char)(const SSL_CIPHER *cipher, unsigned char *ptr);
    int (*ssl_pending)(SSL *s);
    int (*num_ciphers)(void);
    SSL_CIPHER *(*get_cipher)(unsigned int ncipher);
    struct ssl_method_st *(*get_ssl_method)(int version);
    long (*get_timeout)(void);
    struct ssl3_enc_method *ssl3_enc;
    int (*ssl_version)();
    long (*ssl_callback_ctrl)(SSL *s, int cb_id, void(*fp)());
    long (*ssl_ctx_callback_ctrl)(SSL_CTX *s, int cb_id, void(*fp)());
  };
  typedef struct ssl_method_st SSL_METHOD;
  struct sess_cert_st;
  struct sess_cert_st;
  struct ssl_session_st
  {
    int ssl_version;
    unsigned int key_arg_length;
    unsigned char key_arg[8];
    int master_key_length;
    unsigned char master_key[48];
    unsigned int session_id_length;
    unsigned char session_id[32];
    unsigned int sid_ctx_length;
    unsigned char sid_ctx[32];
    int not_resumable;
    struct sess_cert_st *sess_cert;
    X509 *peer;
    long verify_result;
    int references;
    long timeout;
    long time;
    int compress_meth;
    SSL_CIPHER *cipher;
    unsigned long cipher_id;
    STACK *ciphers;
    CRYPTO_EX_DATA ex_data;
    struct ssl_session_st *prev;
    struct ssl_session_st *next;
  };
  typedef struct ssl_session_st SSL_SESSION;
  struct ssl_comp_st
  {
    int id;
    char *name;
    COMP_METHOD *method;
  };
  typedef struct ssl_comp_st SSL_COMP;
  struct __anonstruct_stats_37
  {
    int sess_connect;
    int sess_connect_renegotiate;
    int sess_connect_good;
    int sess_accept;
    int sess_accept_renegotiate;
    int sess_accept_good;
    int sess_miss;
    int sess_timeout;
    int sess_cache_full;
    int sess_hit;
    int sess_cb_hit;
  };
  struct cert_st;
  struct cert_st;
  struct ssl_ctx_st
  {
    SSL_METHOD *method;
    unsigned long options;
    unsigned long mode;
    STACK *cipher_list;
    STACK *cipher_list_by_id;
    struct x509_store_st *cert_store;
    struct lhash_st *sessions;
    unsigned long session_cache_size;
    struct ssl_session_st *session_cache_head;
    struct ssl_session_st *session_cache_tail;
    int session_cache_mode;
    long session_timeout;
    int (*new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess);
    void (*remove_session_cb)(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
    SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl, unsigned char *data, int len, int *copy);
    struct __anonstruct_stats_37 stats;
    int references;
    void (*info_callback)();
    int (*app_verify_callback)();
    char *app_verify_arg;
    struct cert_st *cert;
    int read_ahead;
    int verify_mode;
    int verify_depth;
    unsigned int sid_ctx_length;
    unsigned char sid_ctx[32];
    int (*default_verify_callback)(int ok, X509_STORE_CTX *ctx);
    int purpose;
    int trust;
    pem_password_cb *default_passwd_callback;
    void *default_passwd_callback_userdata;
    int (*client_cert_cb)();
    STACK *client_CA;
    int quiet_shutdown;
    CRYPTO_EX_DATA ex_data;
    const EVP_MD *rsa_md5;
    const EVP_MD *md5;
    const EVP_MD *sha1;
    STACK *extra_certs;
    STACK *comp_methods;
  };
  struct ssl2_state_st;
  struct ssl2_state_st;
  struct ssl3_state_st;
  struct ssl3_state_st;
  struct ssl_st
  {
    int version;
    int type;
    SSL_METHOD *method;
    BIO *rbio;
    BIO *wbio;
    BIO *bbio;
    int rwstate;
    int in_handshake;
    int (*handshake_func)();
    int server;
    int new_session;
    int quiet_shutdown;
    int shutdown;
    int state;
    int rstate;
    BUF_MEM *init_buf;
    int init_num;
    int init_off;
    unsigned char *packet;
    unsigned int packet_length;
    struct ssl2_state_st *s2;
    struct ssl3_state_st *s3;
    int read_ahead;
    int hit;
    int purpose;
    int trust;
    STACK *cipher_list;
    STACK *cipher_list_by_id;
    EVP_CIPHER_CTX *enc_read_ctx;
    const EVP_MD *read_hash;
    COMP_CTX *expand;
    EVP_CIPHER_CTX *enc_write_ctx;
    const EVP_MD *write_hash;
    COMP_CTX *compress;
    struct cert_st *cert;
    unsigned int sid_ctx_length;
    unsigned char sid_ctx[32];
    SSL_SESSION *session;
    int verify_mode;
    int verify_depth;
    int (*verify_callback)(int ok, X509_STORE_CTX *ctx);
    void (*info_callback)();
    int error;
    int error_code;
    SSL_CTX *ctx;
    int debug;
    long verify_result;
    CRYPTO_EX_DATA ex_data;
    STACK *client_CA;
    int references;
    unsigned long options;
    unsigned long mode;
    int first_packet;
    int client_version;
  };
  struct __anonstruct_tmp_38
  {
    unsigned int conn_id_length;
    unsigned int cert_type;
    unsigned int cert_length;
    unsigned int csl;
    unsigned int clear;
    unsigned int enc;
    unsigned char ccl[32];
    unsigned int cipher_spec_length;
    unsigned int session_id_length;
    unsigned int clen;
    unsigned int rlen;
  };
  struct ssl2_state_st
  {
    int three_byte_header;
    int clear_text;
    int escape;
    int ssl2_rollback;
    unsigned int wnum;
    int wpend_tot;
    const unsigned char *wpend_buf;
    int wpend_off;
    int wpend_len;
    int wpend_ret;
    int rbuf_left;
    int rbuf_offs;
    unsigned char *rbuf;
    unsigned char *wbuf;
    unsigned char *write_ptr;
    unsigned int padding;
    unsigned int rlength;
    int ract_data_length;
    unsigned int wlength;
    int wact_data_length;
    unsigned char *ract_data;
    unsigned char *wact_data;
    unsigned char *mac_data;
    unsigned char *pad_data_UNUSED;
    unsigned char *read_key;
    unsigned char *write_key;
    unsigned int challenge_length;
    unsigned char challenge[32];
    unsigned int conn_id_length;
    unsigned char conn_id[16];
    unsigned int key_material_length;
    unsigned char key_material[48];
    unsigned long read_sequence;
    unsigned long write_sequence;
    struct __anonstruct_tmp_38 tmp;
  };
  struct ssl3_record_st
  {
    int type;
    unsigned int length;
    unsigned int off;
    unsigned char *data;
    unsigned char *input;
    unsigned char *comp;
  };
  typedef struct ssl3_record_st SSL3_RECORD;
  struct ssl3_buffer_st
  {
    unsigned char *buf;
    int offset;
    int left;
  };
  typedef struct ssl3_buffer_st SSL3_BUFFER;
  struct __anonstruct_tmp_39
  {
    unsigned char cert_verify_md[72];
    unsigned char finish_md[72];
    int finish_md_len;
    unsigned char peer_finish_md[72];
    int peer_finish_md_len;
    unsigned long message_size;
    int message_type;
    SSL_CIPHER *new_cipher;
    DH *dh;
    int next_state;
    int reuse_message;
    int cert_req;
    int ctype_num;
    char ctype[7];
    STACK *ca_names;
    int use_rsa_tmp;
    int key_block_length;
    unsigned char *key_block;
    const EVP_CIPHER *new_sym_enc;
    const EVP_MD *new_hash;
    const SSL_COMP *new_compression;
    int cert_request;
  };
  struct ssl3_state_st
  {
    long flags;
    int delay_buf_pop_ret;
    unsigned char read_sequence[8];
    unsigned char read_mac_secret[36];
    unsigned char write_sequence[8];
    unsigned char write_mac_secret[36];
    unsigned char server_random[32];
    unsigned char client_random[32];
    SSL3_BUFFER rbuf;
    SSL3_BUFFER wbuf;
    SSL3_RECORD rrec;
    SSL3_RECORD wrec;
    unsigned char alert_fragment[2];
    unsigned int alert_fragment_len;
    unsigned char handshake_fragment[4];
    unsigned int handshake_fragment_len;
    unsigned int wnum;
    int wpend_tot;
    int wpend_type;
    int wpend_ret;
    const unsigned char *wpend_buf;
    EVP_MD_CTX finish_dgst1;
    EVP_MD_CTX finish_dgst2;
    int change_cipher_spec;
    int warn_alert;
    int fatal_alert;
    int alert_dispatch;
    unsigned char send_alert[2];
    int renegotiate;
    int total_renegotiations;
    int num_renegotiations;
    int in_read_app_data;
    struct __anonstruct_tmp_39 tmp;
  };
  struct cert_pkey_st
  {
    X509 *x509;
    EVP_PKEY *privatekey;
  };
  typedef struct cert_pkey_st CERT_PKEY;
  struct cert_st
  {
    CERT_PKEY *key;
    int valid;
    unsigned long mask;
    unsigned long export_mask;
    RSA *rsa_tmp;
    RSA *(*rsa_tmp_cb)(SSL *ssl, int is_export, int keysize);
    DH *dh_tmp;
    DH *(*dh_tmp_cb)(SSL *ssl, int is_export, int keysize);
    CERT_PKEY pkeys[5];
    int references;
  };
  struct sess_cert_st
  {
    STACK *cert_chain;
    int peer_cert_type;
    CERT_PKEY *peer_key;
    CERT_PKEY peer_pkeys[5];
    RSA *peer_rsa_tmp;
    DH *peer_dh_tmp;
    int references;
  };
  struct ssl3_enc_method
  {
    int (*enc)(SSL*, int);
    int (*mac)(SSL*, unsigned char*, int);
    int (*setup_key_block)(SSL*);
    int (*generate_master_secret)(SSL*, unsigned char*, unsigned char*, int);
    int (*change_cipher_state)(SSL*, int);
    int (*final_finish_mac)(SSL*, EVP_MD_CTX*, EVP_MD_CTX*, const char*, int, unsigned char*);
    int finish_mac_length;
    int (*cert_verify_mac)(SSL*, EVP_MD_CTX*, unsigned char*);
    const char *client_finished_label;
    int client_finished_label_len;
    const char *server_finished_label;
    int server_finished_label_len;
    int (*alert_value)(int);
  };
  extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n);
  SSL_METHOD *SSLv3_client_method(void);
  extern SSL_METHOD *sslv3_base_method(void);
  int ssl3_connect(SSL *s);
  static SSL_METHOD *ssl3_get_client_method(int ver);
  static SSL_METHOD *ssl3_get_client_method(int ver)
  {
    SSL_METHOD *tmp;
    {
      if(ver == 768){
        {
          tmp = SSLv3_client_method();
        }return (tmp);
      }
      else{
        return ((SSL_METHOD*)((void*)0));
      }
    }
  }
  static int init = 1;
  static SSL_METHOD SSLv3_client_data;
  SSL_METHOD *SSLv3_client_method(void)
  {
    char *tmp;
    SSL_METHOD *tmp___0;
    {
      if(init){
        {
          init = 0;
          tmp___0 = sslv3_base_method();
          tmp = (char*)tmp___0;
          memcpy((void*)((char*)(&SSLv3_client_data)), (const void*)tmp, sizeof (SSL_METHOD));
          SSLv3_client_data.ssl_connect = &ssl3_connect;
          SSLv3_client_data.get_ssl_method = &ssl3_get_client_method;
      }}
      else{
      }
      return (&SSLv3_client_data);
    }
  }
  int main(void)
  {
    SSL *s;
    {
      {
        s = malloc(sizeof (SSL));
        s->s3 = malloc(sizeof (struct ssl3_state_st));
        s->state = 12292;
        ssl3_connect(s);
      }
      return (0);
    }
  }
  int ssl3_connect(SSL *s)
  {
    BUF_MEM *buf;
    unsigned long tmp;
    unsigned long l;
    long num1;
    void (*cb)();
    int ret;
    int new_state;
    int state;
    int skip;
    int *tmp___0;
    int tmp___1;
    int tmp___2;
    int tmp___3;
    int tmp___4;
    int tmp___5;
    int tmp___6;
    int tmp___7;
    int tmp___8;
    long tmp___9;
    int blastFlag;
    {
      blastFlag = 0;
      s->state = 12292;
      s->hit = __VERIFIER_nondet_int();
      tmp = __VERIFIER_nondet_int();
      cb = (void(*)())((void*)0);
      ret = -1;
      skip = 0;
      tmp___0 = (int*)malloc(sizeof (int));
      *tmp___0 = 0;
      if((unsigned long )s->info_callback != (unsigned long )((void*)0)){
        cb = s->info_callback;
      }else{
        if((unsigned long )(s->ctx)->info_callback != (unsigned long )((void*)0)){
          cb = (s->ctx)->info_callback;
        }else{
        }
      }
      s->in_handshake += 1;
      if(tmp___1 & 12288){
        if(tmp___2 & 16384){
        }else{
        }
      }
      else{
      }
      {
        while(1){
          while_0_continue:
          ;
          state = s->state;
          if(s->state == 12292){
            goto switch_1_12292;
          }else{
            if(s->state == 16384){
              goto switch_1_16384;
            }else{
              if(s->state == 4096){
                goto switch_1_4096;
              }else{
                if(s->state == 20480){
                  goto switch_1_20480;
                }else{
                  if(s->state == 4099){
                    goto switch_1_4099;
                  }else{
                    if(s->state == 4368){
                      goto switch_1_4368;
                    }else{
                      if(s->state == 4369){
                        goto switch_1_4369;
                      }else{
                        if(s->state == 4384){
                          goto switch_1_4384;
                        }else{
                          if(s->state == 4385){
                            goto switch_1_4385;
                          }else{
                            if(s->state == 4400){
                              goto switch_1_4400;
                            }else{
                              if(s->state == 4401){
                                goto switch_1_4401;
                              }else{
                                if(s->state == 4416){
                                  goto switch_1_4416;
                                }else{
                                  if(s->state == 4417){
                                    goto switch_1_4417;
                                  }else{
                                    if(s->state == 4432){
                                      goto switch_1_4432;
                                    }else{
                                      if(s->state == 4433){
                                        goto switch_1_4433;
                                      }else{
                                        if(s->state == 4448){
                                          goto switch_1_4448;
                                        }else{
                                          if(s->state == 4449){
                                            goto switch_1_4449;
                                          }else{
                                            if(s->state == 4464){
                                              goto switch_1_4464;
                                            }else{
                                              if(s->state == 4465){
                                                goto switch_1_4465;
                                              }else{
                                                if(s->state == 4466){
                                                  goto switch_1_4466;
                                                }else{
                                                  if(s->state == 4467){
                                                    goto switch_1_4467;
                                                  }else{
                                                    if(s->state == 4480){
                                                      goto switch_1_4480;
                                                    }else{
                                                      if(s->state == 4481){
                                                        goto switch_1_4481;
                                                      }else{
                                                        if(s->state == 4496){
                                                          goto switch_1_4496;
                                                        }else{
                                                          if(s->state == 4497){
                                                            goto switch_1_4497;
                                                          }else{
                                                            if(s->state == 4512){
                                                              goto switch_1_4512;
                                                            }else{
                                                              if(s->state == 4513){
                                                                goto switch_1_4513;
                                                              }else{
                                                                if(s->state == 4528){
                                                                  goto switch_1_4528;
                                                                }else{
                                                                  if(s->state == 4529){
                                                                    goto switch_1_4529;
                                                                  }else{
                                                                    if(s->state == 4560){
                                                                      goto switch_1_4560;
                                                                    }else{
                                                                      if(s->state == 4561){
                                                                        goto switch_1_4561;
                                                                      }else{
                                                                        if(s->state == 4352){
                                                                          goto switch_1_4352;
                                                                        }else{
                                                                          if(s->state == 3){
                                                                            goto switch_1_3;
                                                                          }else{
                                                                            {
                                                                              goto switch_1_default;
                                                                              if(0){
                                                                                switch_1_12292:
                                                                                s->new_session = 1;
                                                                                s->state = 4096;
                                                                                (s->ctx)->stats.sess_connect_renegotiate += 1;
                                                                                switch_1_16384:
                                                                                ;
                                                                                switch_1_4096:
                                                                                ;
                                                                                switch_1_20480:
                                                                                ;
                                                                                switch_1_4099:
                                                                                s->server = 0;
                                                                                if((unsigned long )cb != (unsigned long )((void*)0)){
                                                                                }else{
                                                                                }
                                                                                if((s->version & 65280) != 768){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->type = 4096;
                                                                                if((unsigned long )s->init_buf == (unsigned long )((void*)0)){
                                                                                  tmp___3 = __VERIFIER_nondet_int();
                                                                                  if(!tmp___3){
                                                                                    ret = -1;
                                                                                    goto end;
                                                                                  }else{
                                                                                  }
                                                                                  s->init_buf = buf;
                                                                                }
                                                                                else{
                                                                                }
                                                                                tmp___4 = __VERIFIER_nondet_int();
                                                                                if(!tmp___4){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                tmp___5 = __VERIFIER_nondet_int();
                                                                                if(!tmp___5){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4368;
                                                                                (s->ctx)->stats.sess_connect += 1;
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4368:
                                                                                ;
                                                                                switch_1_4369:
                                                                                s->shutdown = 0;
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(blastFlag == 0){
                                                                                  blastFlag = 1;
                                                                                }else{
                                                                                }
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4384;
                                                                                s->init_num = 0;
                                                                                if((unsigned long )s->bbio != (unsigned long )s->wbio){
                                                                                }else{
                                                                                }
                                                                                goto switch_1_break;
                                                                                switch_1_4384:
                                                                                ;
                                                                                switch_1_4385:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(blastFlag == 1){
                                                                                  blastFlag = 2;
                                                                                }else{
                                                                                }
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                if(s->hit){
                                                                                  s->state = 4560;
                                                                                }else{
                                                                                  s->state = 4400;
                                                                                }
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4400:
                                                                                ;
                                                                                switch_1_4401:
                                                                                ;
                                                                                if(((s->s3)->tmp.new_cipher)->algorithms & 256UL){
                                                                                  skip = 1;
                                                                                }else{
                                                                                  ret = __VERIFIER_nondet_int();
                                                                                  if(blastFlag == 2){
                                                                                    blastFlag = 3;
                                                                                  }else{
                                                                                  }
                                                                                  if(ret <= 0){
                                                                                    goto end;
                                                                                  }else{
                                                                                  }
                                                                                }
                                                                                s->state = 4416;
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4416:
                                                                                ;
                                                                                switch_1_4417:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(blastFlag == 3){
                                                                                  blastFlag = 4;
                                                                                }else{
                                                                                }
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4432;
                                                                                s->init_num = 0;
                                                                                tmp___6 = __VERIFIER_nondet_int();
                                                                                if(!tmp___6){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                goto switch_1_break;
                                                                                switch_1_4432:
                                                                                ;
                                                                                switch_1_4433:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(blastFlag == 5){
                                                                                  goto ERROR;
                                                                                }else{
                                                                                }
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4448;
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4448:
                                                                                ;
                                                                                switch_1_4449:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(blastFlag == 4){
                                                                                  goto ERROR;
                                                                                }else{
                                                                                }
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                if((s->s3)->tmp.cert_req){
                                                                                  s->state = 4464;
                                                                                }else{
                                                                                  s->state = 4480;
                                                                                }
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4464:
                                                                                ;
                                                                                switch_1_4465:
                                                                                ;
                                                                                switch_1_4466:
                                                                                ;
                                                                                switch_1_4467:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4480;
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4480:
                                                                                ;
                                                                                switch_1_4481:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                l = ((s->s3)->tmp.new_cipher)->algorithms;
                                                                                if((s->s3)->tmp.cert_req == 1){
                                                                                  s->state = 4496;
                                                                                }else{
                                                                                  s->state = 4512;
                                                                                  (s->s3)->change_cipher_spec = 0;
                                                                                }
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4496:
                                                                                ;
                                                                                switch_1_4497:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4512;
                                                                                s->init_num = 0;
                                                                                (s->s3)->change_cipher_spec = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4512:
                                                                                ;
                                                                                switch_1_4513:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4528;
                                                                                s->init_num = 0;
                                                                                (s->session)->cipher = (s->s3)->tmp.new_cipher;
                                                                                if((unsigned long )(s->s3)->tmp.new_compression == (unsigned long )((void*)0)){
                                                                                  (s->session)->compress_meth = 0;
                                                                                }else{
                                                                                  (s->session)->compress_meth = ((s->s3)->tmp.new_compression)->id;
                                                                                }
                                                                                tmp___7 = __VERIFIER_nondet_int();
                                                                                if(!tmp___7){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                tmp___8 = __VERIFIER_nondet_int();
                                                                                if(!tmp___8){
                                                                                  ret = -1;
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                goto switch_1_break;
                                                                                switch_1_4528:
                                                                                ;
                                                                                switch_1_4529:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                s->state = 4352;
                                                                                (s->s3)->flags &= -5L;
                                                                                if(s->hit){
                                                                                  (s->s3)->tmp.next_state = 3;
                                                                                  if((s->s3)->flags & 2L){
                                                                                    s->state = 3;
                                                                                    (s->s3)->flags |= 4L;
                                                                                    (s->s3)->delay_buf_pop_ret = 0;
                                                                                  }else{
                                                                                  }
                                                                                }
                                                                                else{
                                                                                  (s->s3)->tmp.next_state = 4560;
                                                                                }
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4560:
                                                                                ;
                                                                                switch_1_4561:
                                                                                ret = __VERIFIER_nondet_int();
                                                                                if(ret <= 0){
                                                                                  goto end;
                                                                                }else{
                                                                                }
                                                                                if(s->hit){
                                                                                  s->state = 4512;
                                                                                }else{
                                                                                  s->state = 3;
                                                                                }
                                                                                s->init_num = 0;
                                                                                goto switch_1_break;
                                                                                switch_1_4352:
                                                                                num1 = __VERIFIER_nondet_int();
                                                                                if(num1 > 0L){
                                                                                  s->rwstate = 2;
                                                                                  tmp___9 = __VERIFIER_nondet_int();
                                                                                  num1 = (long )((int)tmp___9);
                                                                                  if(num1 <= 0L){
                                                                                    ret = -1;
                                                                                    goto end;
                                                                                  }else{
                                                                                  }
                                                                                  s->rwstate = 1;
                                                                                }
                                                                                else{
                                                                                }
                                                                                s->state = (s->s3)->tmp.next_state;
                                                                                goto switch_1_break;
                                                                                switch_1_3:
                                                                                if((unsigned long )s->init_buf != (unsigned long )((void*)0)){
                                                                                  s->init_buf = (BUF_MEM*)((void*)0);
                                                                                }else{
                                                                                }
                                                                                if(!((s->s3)->flags & 4L)){
                                                                                }else{
                                                                                }
                                                                                s->init_num = 0;
                                                                                s->new_session = 0;
                                                                                if(s->hit){
                                                                                  (s->ctx)->stats.sess_hit += 1;
                                                                                }else{
                                                                                }
                                                                                ret = 1;
                                                                                s->handshake_func = (int(*)())(&ssl3_connect);
                                                                                (s->ctx)->stats.sess_connect_good += 1;
                                                                                if((unsigned long )cb != (unsigned long )((void*)0)){
                                                                                }else{
                                                                                }
                                                                                goto end;
                                                                                switch_1_default:
                                                                                ret = -1;
                                                                                goto end;
                                                                              }
                                                                              else{
                                                                                switch_1_break:
                                                                                ;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if(!(s->s3)->tmp.reuse_message){
            if(!skip){
              if(s->debug){
                ret = __VERIFIER_nondet_int();
                if(ret <= 0){
                  goto end;
                }else{
                }
              }
              else{
              }
              if((unsigned long )cb != (unsigned long )((void*)0)){
                if(s->state != state){
                  new_state = s->state;
                  s->state = state;
                  s->state = new_state;
                }else{
                }
              }
              else{
              }
            }
            else{
            }
          }
          else{
          }
          skip = 0;
        }
        while_0_break:
        ;
      }
      end:
      s->in_handshake -= 1;
      if((unsigned long )cb != (unsigned long )((void*)0)){
      }else{
      }
      return (ret);
      ERROR:
      __VERIFIER_error();
    }
  }
