// loops/string_false-unreach-call_true-termination.i
t_void __VERIFIER_error
t_void __VERIFIER_assume
{
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_char __VERIFIER_nondet_char
{
  t_char string_Astring_B
  t_int ijnc_Anc_Bfound = 0
  for ((op_assign i 0)
  ;(op_lessThan i 5);(op_postFixIncr i))(op_assign string_A[i] __VERIFIER_nondet_char((exp null)))
  if (op_not (op_bracketedPrimary (op_equals string_A[(op_minus 5 1)] '\0'))) return 0
  else {}
  for ((op_assign i 0)
  ;(op_lessThan i 5);(op_postFixIncr i))(op_assign string_B[i] __VERIFIER_nondet_char((exp null)))
  if (op_not (op_bracketedPrimary (op_equals string_B[(op_minus 5 1)] '\0'))) return 0
  else {}
  (op_assign nc_A 0)
  while (op_notequals string_A[nc_A] '\0')
  (op_postFixIncr nc_A)
  (op_assign nc_B 0)
  while (op_notequals string_B[nc_B] '\0')
  (op_postFixIncr nc_B)
  if (op_not (op_bracketedPrimary (op_greaterEqual nc_B nc_A))) return 0
  else {}
  (op_assign i (op_assign j 0))
  while (op_logicalAnd (op_bracketedPrimary (op_lessThan i nc_A)) (op_bracketedPrimary (op_lessThan j nc_B)))
  {
    if (op_equals string_A[i] string_B[j]) {
      (op_postFixIncr i)
      (op_postFixIncr j)
    }
    else {
      (op_assign i (op_plus (op_minus i j) 1))
      (op_assign j 0)
    }
  }
  (op_assign found (op_shiftLeft (op_bracketedPrimary (op_greaterThan j (op_minus nc_B 1))) i))
  __VERIFIER_assert((op_logicalOr (op_equals found 0) (op_equals found 1)))
  return 0
}
