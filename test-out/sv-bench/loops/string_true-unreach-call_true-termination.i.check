// # loops/string_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_char __VERIFIER_nondet_char()
  t_int main(){
    t_char string_Astring_B
    t_int ijnc_Anc_Bfound = 0
    for ((op_assign i 0)
    ;(op_lessThan i 5);(op_postFixIncr i))(op_assign string_A[i] __VERIFIER_nondet_char())
    if (op_not (op_bracketedPrimary (op_equals string_A[(op_minus 5 1)] '\0'))) return 0
    else {}
    for ((op_assign i 0)
    ;(op_lessThan i 5);(op_postFixIncr i))(op_assign string_B[i] __VERIFIER_nondet_char())
    if (op_not (op_bracketedPrimary (op_equals string_B[(op_minus 5 1)] '\0'))) return 0
    else {}
    (op_assign nc_A 0)
    while (op_notequals string_A[nc_A] '\0')
    (op_postFixIncr nc_A)
    (op_assign nc_B 0)
    while (op_notequals string_B[nc_B] '\0')
    (op_postFixIncr nc_B)
    if (op_not (op_bracketedPrimary (op_greaterEqual nc_B nc_A))) return 0
    else {}
    (op_assign i (op_assign j 0))
    while (op_logicalAnd (op_bracketedPrimary (op_lessThan i nc_A)) (op_bracketedPrimary (op_lessThan j nc_B)))
    {
      if (op_equals string_A[i] string_B[j]) {
        (op_postFixIncr i)
        (op_postFixIncr j)
      }
      else {
        (op_assign i (op_plus (op_minus i j) 1))
        (op_assign j 0)
      }
    }
    (op_assign found (op_bracketedPrimary (op_greaterThan j (op_minus nc_B 1))))
    __VERIFIER_assert((op_logicalOr (op_equals found 0) (op_equals found 1)))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  extern char __VERIFIER_nondet_char();
  int main()
  {
    char string_A[5], string_B[5];
    int i, j, nc_A, nc_B, found = 0;
    for(i = 0;i < 5;i++)
    string_A[i] = __VERIFIER_nondet_char();
    if(!(string_A[5 - 1] == '\0'))
    return 0;
    for(i = 0;i < 5;i++)
    string_B[i] = __VERIFIER_nondet_char();
    if(!(string_B[5 - 1] == '\0'))
    return 0;
    nc_A = 0;
    while(string_A[nc_A] != '\0')
    nc_A++;
    nc_B = 0;
    while(string_B[nc_B] != '\0')
    nc_B++;
    if(!(nc_B >= nc_A))
    return 0;
    i = j = 0;
    while((i < nc_A) && (j < nc_B)){
      if(string_A[i] == string_B[j]){
        i++;
        j++;
      }else{
        i = i - j + 1;
        j = 0;
      }
    }
    found = (j > nc_B - 1);
    __VERIFIER_assert(found == 0 || found == 1);
    return 0;
  }
