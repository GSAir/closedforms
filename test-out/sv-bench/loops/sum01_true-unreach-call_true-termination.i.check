// # loops/sum01_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assume(t_int cond)
  t_void __VERIFIER_assert(t_int cond)
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_int()
  t_int main(){
    t_int in = __VERIFIER_nondet_int()sn = 0
    if (op_not (op_bracketedPrimary (op_logicalAnd (op_lessThan n 1000) (op_greaterEqual n (op_minus 1000))))) return 0
    else {}
    for ((op_assign i 1)
    ;(op_lessEqual i n);(op_postFixIncr i)){
      (op_assign sn (op_plus sn (op_bracketedPrimary 2)))
    }
    __VERIFIER_assert((op_logicalOr (op_equals sn (op_multiply n (op_bracketedPrimary 2))) (op_equals sn 0)))
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void __VERIFIER_assume(int cond);
  extern void __VERIFIER_assert(int cond);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  extern int __VERIFIER_nondet_int();
  int main()
  {
    int i, n = __VERIFIER_nondet_int(), sn = 0;
    if(!(n < 1000 && n >= -1000))
    return 0;
    for(i = 1;i <= n;i++){
      sn = sn + (2);
    }
    __VERIFIER_assert(sn == n * (2) || sn == 0);
  }
