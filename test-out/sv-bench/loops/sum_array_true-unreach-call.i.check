// # loops/sum_array_true-unreach-call.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assume(t_int )
  t_int __VERIFIER_nondet_int(t_void )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int __VERIFIER_nondet_uint()
  t_int main(){
    t_int M = __VERIFIER_nondet_uint()
    t_int ABC
    t_int i
    for ((op_assign i 0)
    ;(op_lessThan i M);(op_postFixIncr i)){
      (op_assign A[i] __VERIFIER_nondet_int())
      if (op_not (op_bracketedPrimary (op_lessEqual A[i] 1000000))) return 0
      else {}
    }
    for ((op_assign i 0)
    ;(op_lessThan i M);(op_postFixIncr i)){
      (op_assign B[i] __VERIFIER_nondet_int())
      if (op_not (op_bracketedPrimary (op_lessEqual B[i] 1000000))) return 0
      else {}
    }
    for ((op_assign i 0)
    ;(op_lessThan i M);(op_postFixIncr i))(op_assign C[i] (op_plus A[i] B[i]))
    for ((op_assign i 0)
    ;(op_lessThan i M);(op_postFixIncr i))__VERIFIER_assert((op_equals C[i] (op_plus A[i] B[i])))
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void __VERIFIER_assume(int);
  extern int __VERIFIER_nondet_int(void);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  extern unsigned int __VERIFIER_nondet_uint();
  int main()
  {
    unsigned int M = __VERIFIER_nondet_uint();
    int A[M], B[M], C[M];
    unsigned int i;
    for(i = 0;i < M;i++){
      A[i] = __VERIFIER_nondet_int();
      if(!(A[i] <= 1000000))
      return 0;
    }
    for(i = 0;i < M;i++){
      B[i] = __VERIFIER_nondet_int();
      if(!(B[i] <= 1000000))
      return 0;
    }
    for(i = 0;i < M;i++)
    C[i] = A[i] + B[i];
    for(i = 0;i < M;i++)
    __VERIFIER_assert(C[i] == A[i] + B[i]);
  }
