// # loops/veris.c_NetBSD-libc__loop_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int Char
  Char tmp
  t_int glob2(Char pathbuf,Char pathlim){
    Char p
    for ((op_assign p pathbuf)
    ;(op_lessEqual p pathlim);(op_postFixIncr p)){
      __VERIFIER_assert((op_lessEqual p tmp))
      (op_assign (op_star p) 1)
    }
    return 0
  }
  t_int main(){
    Char pathbuf
    Char bound = (op_minus (op_plus pathbuf (op_divide (op_sizeof (op_bracketedPrimary pathbuf)) (op_sizeof (op_bracketedPrimary (op_star pathbuf))))) 1)
    (op_assign tmp (op_minus (op_plus pathbuf (op_divide (op_sizeof (op_bracketedPrimary pathbuf)) (op_sizeof (op_bracketedPrimary (op_star pathbuf))))) 1))
    glob2((pathbuf,bound))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  typedef int Char;
  Char *tmp;
  int glob2(Char *pathbuf, Char *pathlim)
  {
    Char *p;
    for(p = pathbuf;p <= pathlim;p++){
      __VERIFIER_assert(p <= tmp);
      *p = 1;
    }
    return 0;
  }
  int main()
  {
    Char pathbuf[1 + 1];
    Char *bound = pathbuf + sizeof (pathbuf) / sizeof (*pathbuf) - 1;
    tmp = pathbuf + sizeof (pathbuf) / sizeof (*pathbuf) - 1;
    glob2(pathbuf, bound);
    return 0;
  }
