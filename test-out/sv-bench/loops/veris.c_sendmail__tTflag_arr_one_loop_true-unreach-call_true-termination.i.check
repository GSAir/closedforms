// # loops/veris.c_sendmail__tTflag_arr_one_loop_true-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_char __VERIFIER_nondet_char()
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int main(t_void ){
    t_char in
    t_char s
    t_char c
    t_int ij
    t_int idx_in
    for ((op_assign i 0)
    ;(op_lessThan i 10);(op_postFixIncr i)){
      (op_assign in[i] __VERIFIER_nondet_char())
    }
    (op_assign in[10] 0)
    (op_assign idx_in 0)
    (op_assign s in)
    (op_assign i 0)
    (op_assign c in[idx_in])
    while (op_logicalAnd (op_bracketedPrimary (op_lessEqual '0' c)) (op_bracketedPrimary (op_lessEqual c '9')))
    {
      (op_assign j (op_minus c '0'))
      (op_assign i (op_plus (op_multiply i 10U) j))
      (op_postFixIncr idx_in)
      (op_assign c in[idx_in])
    }
    __VERIFIER_assert((op_greaterEqual i 0))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern char __VERIFIER_nondet_char();
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  int main(void)
  {
    char in[11];
    char *s;
    unsigned char c;
    unsigned int i, j;
    int idx_in;
    for(i = 0;i < 10;i++){
      in[i] = __VERIFIER_nondet_char();
    }
    in[10] = 0;
    idx_in = 0;
    s = in;
    i = 0;
    c = in[idx_in];
    while(('0' <= c) && (c <= '9')){
      j = c - '0';
      i = i * 10U + j;
      idx_in++;
      c = in[idx_in];
    }
    __VERIFIER_assert(i >= 0);
    return 0;
  }
