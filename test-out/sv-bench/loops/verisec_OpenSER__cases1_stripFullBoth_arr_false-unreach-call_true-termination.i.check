// # loops/verisec_OpenSER__cases1_stripFullBoth_arr_false-unreach-call_true-termination.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_int size_t
  t_int bool
  t_char strchr(t_char s,t_int c)
  t_char strrchr(t_char s,t_int c)
  t_char strstr(t_char haystack,t_char needle)
  t_char strncpy(t_char dest,t_char src,size_t n)
  t_char strncpy_ptr(t_char dest,t_char src,size_t n)
  t_char strcpy(t_char dest,t_char src)
  t_unspecified strlen(t_char s)
  t_int strncmp(t_char s1,t_char s2,size_t n)
  t_int strcmp(t_char s1,t_char s2)
  t_char strcat(t_char dest,t_char src)
  t_void memcpy(t_void dest,t_void src,size_t n)
  t_int isascii(t_int c)
  t_int isspace(t_int c)
  t_int getc()
  t_char strrand(t_char s)
  t_int istrrand(t_char s)
  t_int istrchr(t_char s,t_int c)
  t_int istrrchr(t_char s,t_int c)
  t_int istrncmp(t_char s1,t_int start,t_char s2,size_t n)
  t_int istrstr(t_char haystack,t_char needle)
  t_char r_strncpy(t_char dest,t_char src,size_t n)
  t_char r_strcpy(t_char dest,t_char src)
  t_char r_strcat(t_char dest,t_char src)
  t_char r_strncat(t_char dest,t_char src,size_t n)
  t_void r_memcpy(t_void dest,t_void src,size_t n)
  t_int u_int
  t_char u_int8_t
  ieee80211_scan_entry
  t_int NSS_STATUS
  t_char fstring
  sockaddr_un
  t_int parse_expression_list(t_char str){
    t_int start = 0i = (op_minus 1)j = (op_minus 1)
    t_char str2
    if (op_not str) return (op_minus 1)
    else {}
    do {
      (op_postFixIncr i)
      switch str[i]
      {
        case 0:
        while (op_logicalOr (op_bracketedPrimary (op_equals str[start] ' ')) (op_bracketedPrimary (op_equals str[start] '\t')))
        (op_postFixIncr start)
        if (op_equals str[start] '"') (op_postFixIncr start)
        else {}
        (op_assign j (op_minus i 1))
        while (op_logicalAnd (op_bracketedPrimary (op_lessThan 0 j)) (op_bracketedPrimary (op_logicalOr (op_bracketedPrimary (op_equals str[j] ' ')) (op_bracketedPrimary (op_equals str[j] '\t')))))
        (op_postFixDecr j)
        if (op_logicalAnd (op_bracketedPrimary (op_lessThan 0 j)) (op_bracketedPrimary (op_equals str[j] '"'))) (op_postFixDecr j)
        else {}
        if (op_lessEqual start j) {
          r_strncpy((str2,(op_plus str start),(op_plus (op_minus j start) 1)))
          __VERIFIER_assert((op_lessThan (op_plus (op_minus j start) 1) 2))
          (op_assign str2[(op_plus (op_minus j start) 1)] 0)
        }
        else {
          return (op_minus 1)
        }
        (op_assign start (op_plus i 1))
      }
    }
    while (op_notequals str[i] 0)
    return 0
  }
  t_int main(){
    t_char A
    (op_assign A[(op_plus (op_plus 2 2) 4)] 0)
    parse_expression_list(A)
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  typedef unsigned int size_t;
  typedef int bool;
  char *strchr(const char *s, int c);
  char *strrchr(const char *s, int c);
  char *strstr(const char *haystack, const char *needle);
  char *strncpy(char *dest, const char *src, size_t n);
  char *strncpy_ptr(char *dest, const char *src, size_t n);
  char *strcpy(char *dest, const char *src);
  unsigned strlen(const char *s);
  int strncmp(const char *s1, const char *s2, size_t n);
  int strcmp(const char *s1, const char *s2);
  char *strcat(char *dest, const char *src);
  void *memcpy(void *dest, const void *src, size_t n);
  int isascii(int c);
  int isspace(int c);
  int getc();
  char *strrand(char *s);
  int istrrand(char *s);
  int istrchr(const char *s, int c);
  int istrrchr(const char *s, int c);
  int istrncmp(const char *s1, int start, const char *s2, size_t n);
  int istrstr(const char *haystack, const char *needle);
  char *r_strncpy(char *dest, const char *src, size_t n);
  char *r_strcpy(char *dest, const char *src);
  char *r_strcat(char *dest, const char *src);
  char *r_strncat(char *dest, const char *src, size_t n);
  void *r_memcpy(void *dest, const void *src, size_t n);
  typedef unsigned int u_int;
  typedef unsigned char u_int8_t;
  struct ieee80211_scan_entry
  {
    u_int8_t *se_rsn_ie;
  };
  typedef int NSS_STATUS;
  typedef char fstring[2];
  struct sockaddr_un
  {
    char sun_path[2 + 1];
  };
  static int parse_expression_list(char *str)
  {
    int start = 0, i = -1, j = -1;
    char str2[2];
    if(!str)
    return -1;
    do{
      i++;
      switch (str[i]){
        case 0:
        while((str[start] == ' ') || (str[start] == '\t'))
        start++;
        if(str[start] == '"')
        start++;
        j = i - 1;
        while((0 < j) && ((str[j] == ' ') || (str[j] == '\t')))
        j--;
        if((0 < j) && (str[j] == '"'))
        j--;
        if(start <= j){
          r_strncpy(str2, str + start, j - start + 1);
          __VERIFIER_assert(j - start + 1 < 2);
          str2[j - start + 1] = 0;
        }else{
          return -1;
        }
        start = i + 1;
      }
    }
    while(str[i] != 0);
    return 0;
  }
  int main()
  {
    char A[2 + 2 + 4 + 1];
    A[2 + 2 + 4] = 0;
    parse_expression_list(A);
    return 0;
  }
