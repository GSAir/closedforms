// loops/verisec_OpenSER__cases1_stripFullBoth_arr_false-unreach-call_true-termination.i
t_void __VERIFIER_error
t_void __VERIFIER_assert(/* TODO: param list ... */) {
  if (op_not (op_bracketedPrimary cond)) {
    ERROR:
    __VERIFIER_error((exp null))
  }
  else {}
  return (exp null)
}
t_int size_t
t_int bool
t_char strchr
t_char strrchr
t_char strstr
t_char strncpy
t_char strncpy_ptr
t_char strcpy
t_unspecified strlen
t_int strncmp
t_int strcmp
t_char strcat
t_void memcpy
t_int isascii
t_int isspace
t_int getc
t_char strrand
t_int istrrand
t_int istrchr
t_int istrrchr
t_int istrncmp
t_int istrstr
t_char r_strncpy
t_char r_strcpy
t_char r_strcat
t_char r_strncat
t_void r_memcpy
t_int u_int
t_char u_int8_t
ieee80211_scan_entry
t_int NSS_STATUS
t_char fstring
sockaddr_un
t_int parse_expression_list(/* TODO: param list ... */) {
  t_int start = 0i = (op_minus 1)j = (op_minus 1)
  t_char str2
  if (op_not str) return (op_minus 1)
  else {}
  do {
    (op_postFixIncr i)
    switch str[i]
    {
      case 0:
      while (op_logicalOr (op_bracketedPrimary (op_equals str[start] ' ')) (op_bracketedPrimary (op_equals str[start] '\t')))
      (op_postFixIncr start)
      if (op_equals str[start] '"') (op_postFixIncr start)
      else {}
      (op_assign j (op_minus i 1))
      while (op_logicalAnd (op_bracketedPrimary (op_lessThan 0 j)) (op_bracketedPrimary (op_logicalOr (op_bracketedPrimary (op_equals str[j] ' ')) (op_bracketedPrimary (op_equals str[j] '\t')))))
      (op_postFixDecr j)
      if (op_logicalAnd (op_bracketedPrimary (op_lessThan 0 j)) (op_bracketedPrimary (op_equals str[j] '"'))) (op_postFixDecr j)
      else {}
      if (op_lessEqual start j) {
        r_strncpy((str2,(op_plus str start),(op_plus (op_minus j start) 1)))
        __VERIFIER_assert((op_lessThan (op_plus (op_minus j start) 1) 2))
        (op_assign str2[(op_plus (op_minus j start) 1)] 0)
      }
      else {
        return (op_minus 1)
      }
      (op_assign start (op_plus i 1))
    }
  }
  while (op_notequals str[i] 0)
  return 0
}
t_int main(/* TODO: param list ... */) {
  t_char A
  (op_assign A[(op_plus (op_plus 2 2) 4)] 0)
  parse_expression_list(A)
  return 0
}
