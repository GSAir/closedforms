// # loops/vogal_false-unreach-call.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_char __VERIFIER_nondet_char()
  t_int main(t_void ){
    t_char string_entradavetor_vogais = {'a','A','e','E','i','I','o','O','u','U','\0'}
    {}
    t_int ijconttam_stringn_caracter
    for ((op_assign i 0)
    ;(op_lessThan i 10);(op_postFixIncr i))(op_assign string_entrada[i] __VERIFIER_nondet_char())
    (op_assign string_entrada[(op_minus 10 1)] '\0')
    (op_assign n_caracter 0)
    while (op_notequals string_entrada[n_caracter] '\0')
    (op_postFixIncr n_caracter)
    (op_assign cont 0)
    for ((op_assign i 0)
    ;(op_lessThan i n_caracter);(op_postFixIncr i))for ((op_assign j 0)
    ;(op_lessThan j 8);(op_postFixIncr j))if (op_equals string_entrada[i] vetor_vogais[j]) (op_postFixIncr cont)
    else {}
    (op_assign i 0)
    t_int cont_aux = 0
    while (op_notequals string_entrada[i] '\0')
    {
      for ((op_assign j 0)
      ;(op_lessThan j 10);(op_postFixIncr j)){
        if (op_equals string_entrada[i] vetor_vogais[j]) (op_postFixIncr cont_aux)
        else {}
      }
      (op_postFixIncr i)
    }
    __VERIFIER_assert((op_equals cont_aux cont))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  extern char __VERIFIER_nondet_char();
  int main(void)
  {
    char string_entrada[10], vetor_vogais[] = {'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', '\0'};
    ;
    unsigned int i, j, cont, tam_string, n_caracter;
    for(i = 0;i < 10;i++)
    string_entrada[i] = __VERIFIER_nondet_char();
    string_entrada[10 - 1] = '\0';
    n_caracter = 0;
    while(string_entrada[n_caracter] != '\0')
    n_caracter++;
    cont = 0;
    for(i = 0;i < n_caracter;i++)
    for(j = 0;j < 8;j++)
    if(string_entrada[i] == vetor_vogais[j])
    cont++;
    i = 0;
    int cont_aux = 0;
    while(string_entrada[i] != '\0'){
      for(j = 0;j < 10;j++){
        if(string_entrada[i] == vetor_vogais[j])
        cont_aux++;
      }
      i++;
    }
    __VERIFIER_assert(cont_aux == cont);
    return 0;
  }
