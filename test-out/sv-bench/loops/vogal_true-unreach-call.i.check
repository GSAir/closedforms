// # loops/vogal_true-unreach-call.i
// # custom traverser
  t_void __VERIFIER_error()
  t_void __VERIFIER_assume(t_int )
  t_void __VERIFIER_assert(t_int cond){
    if (op_not (op_bracketedPrimary cond)) {
      ERROR:
      __VERIFIER_error()
    }
    else {}
    return
  }
  t_char __VERIFIER_nondet_char()
  t_int main(t_void ){
    t_char input_stringvogal_array = {'a','A','e','E','i','I','o','O','u','U','\0'}
    {}
    t_int ijconttam_stringn_caracter
    for ((op_assign i 0)
    ;(op_lessThan i 5);(op_postFixIncr i))(op_assign input_string[i] __VERIFIER_nondet_char())
    if (op_not (op_bracketedPrimary (op_equals input_string[(op_minus 5 1)] '\0'))) return 0
    else {}
    (op_assign n_caracter 0)
    while (op_notequals input_string[n_caracter] '\0')
    (op_postFixIncr n_caracter)
    (op_assign cont 0)
    for ((op_assign i 0)
    ;(op_lessThan i n_caracter);(op_postFixIncr i))for ((op_assign j 0)
    ;(op_lessThan j (op_divide 5 2));(op_postFixIncr j))if (op_equals input_string[i] vogal_array[j]) (op_postFixIncr cont)
    else {}
    (op_assign i 0)
    t_int cont_aux = 0
    while (op_notequals input_string[i] '\0')
    {
      for ((op_assign j 0)
      ;(op_lessThan j (op_divide 5 2));(op_postFixIncr j)){
        if (op_equals input_string[i] vogal_array[j]) (op_postFixIncr cont_aux)
        else {}
      }
      (op_postFixIncr i)
    }
    __VERIFIER_assert((op_equals cont_aux cont))
    return 0
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond)
  {
    if(!(cond)){
      ERROR:
      __VERIFIER_error();
    }
    return;
  }
  char __VERIFIER_nondet_char();
  int main(void)
  {
    char input_string[5], vogal_array[] = {'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', '\0'};
    ;
    unsigned int i, j, cont, tam_string, n_caracter;
    for(i = 0;i < 5;i++)
    input_string[i] = __VERIFIER_nondet_char();
    if(!(input_string[5 - 1] == '\0'))
    return 0;
    n_caracter = 0;
    while(input_string[n_caracter] != '\0')
    n_caracter++;
    cont = 0;
    for(i = 0;i < n_caracter;i++)
    for(j = 0;j < 5 / 2;j++)
    if(input_string[i] == vogal_array[j])
    cont++;
    i = 0;
    int cont_aux = 0;
    while(input_string[i] != '\0'){
      for(j = 0;j < 5 / 2;j++){
        if(input_string[i] == vogal_array[j])
        cont_aux++;
      }
      i++;
    }
    __VERIFIER_assert(cont_aux == cont);
    return 0;
  }
