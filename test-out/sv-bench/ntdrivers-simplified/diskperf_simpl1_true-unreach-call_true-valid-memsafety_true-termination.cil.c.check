// # ntdrivers-simplified/diskperf_simpl1_true-unreach-call_true-valid-memsafety_true-termination.cil.c
// # custom traverser
  t_void __VERIFIER_error()
  t_char __VERIFIER_nondet_char(t_void )
  t_int __VERIFIER_nondet_int(t_void )
  t_unspecified __VERIFIER_nondet_long(t_void )
  t_void __VERIFIER_nondet_pointer(t_void )
  t_int DiskPerfDispatchPnp(t_int DeviceObject,t_int Irp)
  t_int DiskPerfIrpCompletion(t_int DeviceObject,t_int Irp,t_int Context)
  t_int DiskPerfStartDevice(t_int DeviceObject,t_int Irp)
  t_int DiskPerfRemoveDevice(t_int DeviceObject,t_int Irp)
  t_int DiskPerfSendToNextDriver(t_int DeviceObject,t_int Irp)
  t_int DiskPerfDispatchPower(t_int DeviceObject,t_int Irp)
  t_int DiskPerfForwardIrpSynchronous(t_int DeviceObject,t_int Irp)
  t_int DiskPerfCreate(t_int DeviceObject,t_int Irp)
  t_int DiskPerfIoCompletion(t_int DeviceObject,t_int Irp,t_int Context)
  t_int DiskPerfDeviceControl(t_int DeviceObject,t_int Irp)
  t_int DiskPerfShutdownFlush(t_int DeviceObject,t_int Irp)
  t_int DiskPerfRegisterDevice(t_int DeviceObject)
  t_int IoBuildDeviceIoControlRequest(t_int IoControlCode,t_int DeviceObject,t_int InputBuffer,t_int InputBufferLength,t_int OutputBuffer,t_int OutputBufferLength,t_int InternalDeviceIoControl,t_int Event,t_int IoStatusBlock)
  t_int IofCallDriver(t_int DeviceObject,t_int Irp)
  t_int KeSetEvent(t_int Event,t_int Increment,t_int Wait)
  t_int KeWaitForSingleObject(t_int Object,t_int WaitReason,t_int WaitMode,t_int Alertable,t_int Timeout)
  t_int PoCallDriver(t_int DeviceObject,t_int Irp)
  t_void IofCompleteRequest(t_int Irp,t_int PriorityBoost)
  t_int __VERIFIER_nondet_int()
  t_int s
  t_int UNLOADED
  t_int NP
  t_int DC
  t_int SKIP1
  t_int SKIP2
  t_int MPR1
  t_int MPR3
  t_int IPC
  t_int pended
  t_int compFptr
  t_int compRegistered
  t_int lowerDriverReturn
  t_int setEventCalled
  t_int customIrp
  t_int myStatus
  t_int routine
  t_int pirp
  t_int Executive
  t_int KernelMode
  t_void errorFn(t_void ){
    {
      ERROR:
      __VERIFIER_error()
      return
    }
  }
  t_void _BLAST_init(t_void ){
    {
      (op_assign UNLOADED 0)
      (op_assign NP 1)
      (op_assign DC 2)
      (op_assign SKIP1 3)
      (op_assign SKIP2 4)
      (op_assign MPR1 5)
      (op_assign MPR3 6)
      (op_assign IPC 7)
      (op_assign s UNLOADED)
      (op_assign pended 0)
      (op_assign compFptr 0)
      (op_assign compRegistered 0)
      (op_assign lowerDriverReturn 0)
      (op_assign setEventCalled 0)
      (op_assign customIrp 0)
      return
    }
  }
  t_void DiskPerfSyncFilterWithTarget(t_int FilterDevice,t_int TargetDevice){
    t_int FilterDevice__Flags
    t_int TargetDevice__Characteristics
    t_int FilterDevice__Characteristics
    t_int propFlags
    {
      return
    }
  }
  t_int DiskPerfDispatchPnp(t_int DeviceObject,t_int Irp){
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int irpSp__MinorFunction = __VERIFIER_nondet_int()
    t_int irpSp
    t_int status
    t_int tmp
    {
      (op_assign irpSp Irp__Tail__Overlay__CurrentStackLocation)
      if (op_equals irpSp__MinorFunction 0) {
        goto switch_0_0
      }
      else {
        if (op_equals irpSp__MinorFunction 2) {
          goto switch_0_2
        }
        else {
          goto switch_0_default
          if 0 {
            switch_0_0:
            {
              (op_assign status DiskPerfStartDevice((DeviceObject,Irp)))
            }
            goto switch_0_break
            switch_0_2:
            {
              (op_assign status DiskPerfRemoveDevice((DeviceObject,Irp)))
            }
            goto switch_0_break
            switch_0_default:
            {
              (op_assign tmp DiskPerfSendToNextDriver((DeviceObject,Irp)))
            }
            return (op_bracketedPrimary tmp)
          }
          else {
            switch_0_break:
            {}
          }
        }
      }
      return (op_bracketedPrimary status)
    }
  }
  t_int DiskPerfIrpCompletion(t_int DeviceObject,t_int Irp,t_int Context){
    t_int Event
    {
      {
        (op_assign Event Context)
        KeSetEvent((Event,0,0))
      }
      return (op_bracketedPrimary (op_minus 1073741802))
    }
  }
  t_int DiskPerfStartDevice(t_int DeviceObject,t_int Irp){
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int Irp__IoStatus__Status
    t_int deviceExtension
    t_int status
    {
      {
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_assign status DiskPerfForwardIrpSynchronous((DeviceObject,Irp)))
        DiskPerfSyncFilterWithTarget((DeviceObject,deviceExtension__TargetDeviceObject))
        DiskPerfRegisterDevice(DeviceObject)
        (op_assign Irp__IoStatus__Status status)
        (op_assign myStatus status)
        IofCompleteRequest((Irp,0))
      }
      return (op_bracketedPrimary status)
    }
  }
  t_int DiskPerfRemoveDevice(t_int DeviceObject,t_int Irp){
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__WmilibContext = __VERIFIER_nondet_int()
    t_int Irp__IoStatus__Status
    t_int status
    t_int deviceExtension
    t_int wmilibContext
    {
      {
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_assign wmilibContext deviceExtension__WmilibContext)
        (op_assign status DiskPerfForwardIrpSynchronous((DeviceObject,Irp)))
        (op_assign Irp__IoStatus__Status status)
        (op_assign myStatus status)
        IofCompleteRequest((Irp,0))
      }
      return (op_bracketedPrimary status)
    }
  }
  t_int DiskPerfSendToNextDriver(t_int DeviceObject,t_int Irp){
    t_int Irp__CurrentLocation = __VERIFIER_nondet_int()
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int deviceExtension
    t_int tmp
    {
      if (op_equals s NP) {
        (op_assign s SKIP1)
      }
      else {
        {
          errorFn()
        }
      }
      {
        (op_postFixIncr Irp__CurrentLocation)
        (op_postFixIncr Irp__Tail__Overlay__CurrentStackLocation)
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_assign tmp IofCallDriver((deviceExtension__TargetDeviceObject,Irp)))
      }
      return (op_bracketedPrimary tmp)
    }
  }
  t_int DiskPerfDispatchPower(t_int DeviceObject,t_int Irp){
    t_int Irp__CurrentLocation = __VERIFIER_nondet_int()
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int deviceExtension
    t_int tmp
    {
      if (op_equals s NP) {
        (op_assign s SKIP1)
      }
      else {
        {
          errorFn()
        }
      }
      {
        (op_postFixIncr Irp__CurrentLocation)
        (op_postFixIncr Irp__Tail__Overlay__CurrentStackLocation)
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_assign tmp PoCallDriver((deviceExtension__TargetDeviceObject,Irp)))
      }
      return (op_bracketedPrimary tmp)
    }
  }
  t_int DiskPerfForwardIrpSynchronous(t_int DeviceObject,t_int Irp){
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int deviceExtension
    t_int event = __VERIFIER_nondet_int()
    t_int status
    t_int nextIrpSp__Control
    t_int irpSp
    t_int nextIrpSp
    t_int irpSp__Context
    t_int irpSp__Control
    t_int irpSp___0
    t_unspecified __cil_tmp15
    {
      (op_assign deviceExtension DeviceObject__DeviceExtension)
      (op_assign irpSp Irp__Tail__Overlay__CurrentStackLocation)
      (op_assign nextIrpSp (op_minus Irp__Tail__Overlay__CurrentStackLocation 1))
      (op_assign nextIrpSp__Control 0)
      if (op_notequals s NP) {
        {
          errorFn()
        }
      }
      else {
        if (op_notequals compRegistered 0) {
          {
            errorFn()
          }
        }
        else {
          (op_assign compRegistered 1)
          (op_assign routine 0)
        }
      }
      {
        (op_assign irpSp___0 (op_minus Irp__Tail__Overlay__CurrentStackLocation 1))
        (op_assign irpSp__Context event)
        (op_assign irpSp__Control 224)
        (op_assign status IofCallDriver((deviceExtension__TargetDeviceObject,Irp)))
      }
      {
        (op_assign __cil_tmp15 (t_unspecified)status)
        if (op_equals __cil_tmp15 259L) {
          {
            KeWaitForSingleObject((event,Executive,KernelMode,0,0))
            (op_assign status myStatus)
          }
        }
        else {}
      }
      return (op_bracketedPrimary status)
    }
  }
  t_int DiskPerfCreate(t_int DeviceObject,t_int Irp){
    {
      {
        (op_assign myStatus 0)
        IofCompleteRequest((Irp,0))
      }
      return (op_bracketedPrimary 0)
    }
  }
  t_int DiskPerfIoCompletion(t_int DeviceObject,t_int Irp,t_int Context){
    t_int irpStack__MajorFunction = __VERIFIER_nondet_int()
    t_int partitionCounters__BytesRead__QuadPart = __VERIFIER_nondet_int()
    t_int Irp__IoStatus__Information = __VERIFIER_nondet_int()
    t_int partitionCounters__ReadCount = __VERIFIER_nondet_int()
    t_int partitionCounters__ReadTime__QuadPart = __VERIFIER_nondet_int()
    t_int difference__QuadPart = __VERIFIER_nondet_int()
    t_int partitionCounters__BytesWritten__QuadPart = __VERIFIER_nondet_int()
    t_int partitionCounters__WriteCount = __VERIFIER_nondet_int()
    t_int partitionCounters__WriteTime__QuadPart = __VERIFIER_nondet_int()
    t_int Irp__Flags = __VERIFIER_nondet_int()
    t_int partitionCounters__SplitCount = __VERIFIER_nondet_int()
    t_int Irp__PendingReturned = __VERIFIER_nondet_int()
    t_int Irp__Tail__Overlay__CurrentStackLocation__Control
    t_int partitionCounters = __VERIFIER_nondet_int()
    t_int queueLen = __VERIFIER_nondet_int()
    {
      if (op_equals partitionCounters 0) {
        return (op_bracketedPrimary 0)
      }
      else {}
      if (op_lessThan queueLen 0) {
      }
      else {}
      if (op_equals queueLen 0) {
      }
      else {}
      if (op_equals irpStack__MajorFunction 3) {
        (op_plusAssign partitionCounters__BytesRead__QuadPart Irp__IoStatus__Information)
        (op_postFixIncr partitionCounters__ReadCount)
        (op_plusAssign partitionCounters__ReadTime__QuadPart difference__QuadPart)
      }
      else {
        (op_plusAssign partitionCounters__BytesWritten__QuadPart Irp__IoStatus__Information)
        (op_postFixIncr partitionCounters__WriteCount)
        (op_plusAssign partitionCounters__WriteTime__QuadPart difference__QuadPart)
      }
      if (op_notequals Irp__Flags 8) {
        (op_postFixIncr partitionCounters__SplitCount)
      }
      else {
      }
      if Irp__PendingReturned {
        if (op_equals pended 0) {
          (op_assign pended 1)
        }
        else {
          {
            errorFn()
          }
        }
      }
      else {}
      return (op_bracketedPrimary 0)
    }
  }
  t_int DiskPerfDeviceControl(t_int DeviceObject,t_int Irp){
    t_int Irp__CurrentLocation = __VERIFIER_nondet_int()
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int currentIrpStack__Parameters__DeviceIoControl__IoControlCode = __VERIFIER_nondet_int()
    t_int currentIrpStack__Parameters__DeviceIoControl__OutputBufferLength = __VERIFIER_nondet_int()
    t_int sizeof__DISK_PERFORMANCE = __VERIFIER_nondet_int()
    t_int Irp__IoStatus__Information
    t_int deviceExtension__DiskCounters = __VERIFIER_nondet_int()
    t_int Irp__AssociatedIrp__SystemBuffer = __VERIFIER_nondet_int()
    t_int deviceExtension__Processors = __VERIFIER_nondet_int()
    t_int totalCounters__QueueDepth
    t_int deviceExtension__QueueDepth = __VERIFIER_nondet_int()
    t_int Irp__IoStatus__Status
    t_int deviceExtension
    t_int currentIrpStack
    t_int status
    t_int i
    t_int totalCounters
    t_int diskCounters
    t_int tmp
    t_int __cil_tmp24
    t_int __cil_tmp25
    t_int __cil_tmp26
    {
      (op_assign deviceExtension DeviceObject__DeviceExtension)
      (op_assign currentIrpStack Irp__Tail__Overlay__CurrentStackLocation)
      {
        (op_assign __cil_tmp24 32)
        (op_assign __cil_tmp25 458752)
        (op_assign __cil_tmp26 458784)
        if (op_equals currentIrpStack__Parameters__DeviceIoControl__IoControlCode __cil_tmp26) {
          if (op_lessThan currentIrpStack__Parameters__DeviceIoControl__OutputBufferLength sizeof__DISK_PERFORMANCE) {
            (op_assign status (op_minus 1073741789))
            (op_assign Irp__IoStatus__Information 0)
          }
          else {
            (op_assign diskCounters deviceExtension__DiskCounters)
            if (op_equals diskCounters 0) {
              {
                (op_assign Irp__IoStatus__Status (op_minus 1073741823))
                (op_assign myStatus (op_minus 1073741823))
                IofCompleteRequest((Irp,0))
              }
              return (op_bracketedPrimary (op_minus 1073741823))
            }
            else {}
            (op_assign totalCounters Irp__AssociatedIrp__SystemBuffer)
            (op_assign i 0)
            {
              while 1
              {
                while_0_continue:
                {}
                if (op_greaterEqual i deviceExtension__Processors) {
                  goto while_1_break
                }
                else {}
                (op_postFixIncr i)
              }
              while_0_break:
              {}
            }
            while_1_break:
            (op_assign totalCounters__QueueDepth deviceExtension__QueueDepth)
            (op_assign status 0)
            (op_assign Irp__IoStatus__Information sizeof__DISK_PERFORMANCE)
          }
          {
            (op_assign Irp__IoStatus__Status status)
            (op_assign myStatus status)
            IofCompleteRequest((Irp,0))
          }
          return (op_bracketedPrimary status)
        }
        else {
          {
            (op_postFixIncr Irp__CurrentLocation)
            (op_postFixIncr Irp__Tail__Overlay__CurrentStackLocation)
            (op_assign tmp IofCallDriver((deviceExtension__TargetDeviceObject,Irp)))
          }
          return (op_bracketedPrimary tmp)
        }
      }
    }
  }
  t_int DiskPerfShutdownFlush(t_int DeviceObject,t_int Irp){
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int Irp__CurrentLocation = __VERIFIER_nondet_int()
    t_int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int deviceExtension
    t_int tmp
    {
      {
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_postFixIncr Irp__CurrentLocation)
        (op_postFixIncr Irp__Tail__Overlay__CurrentStackLocation)
        (op_assign tmp IofCallDriver((deviceExtension__TargetDeviceObject,Irp)))
      }
      return (op_bracketedPrimary tmp)
    }
  }
  t_void DiskPerfUnload(t_int DriverObject){
    {
      return
    }
  }
  t_int DiskPerfRegisterDevice(t_int DeviceObject){
    t_int DeviceObject__DeviceExtension = __VERIFIER_nondet_int()
    t_int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int()
    t_int sizeof__number = __VERIFIER_nondet_int()
    t_int ioStatus__Status = __VERIFIER_nondet_int()
    t_int sizeof__VOLUME_NUMBER = __VERIFIER_nondet_int()
    t_int volumeNumber__VolumeManagerName__0 = __VERIFIER_nondet_int()
    t_int status
    t_int ioStatus = __VERIFIER_nondet_int()
    t_int event = __VERIFIER_nondet_int()
    t_int deviceExtension
    t_int irp
    t_int number = __VERIFIER_nondet_int()
    t_int registrationFlag
    t_int sizeof__MOUNTDEV_NAME = __VERIFIER_nondet_int()
    t_int output__NameLength = __VERIFIER_nondet_int()
    t_int outputSize
    t_int output = __VERIFIER_nondet_int()
    t_int volumeNumber = __VERIFIER_nondet_int()
    t_int __cil_tmp20
    t_int __cil_tmp21
    t_int __cil_tmp22
    t_unspecified __cil_tmp23
    t_int __cil_tmp24
    t_int __cil_tmp25
    t_int __cil_tmp26
    t_unspecified __cil_tmp27
    t_unspecified __cil_tmp28
    t_int __cil_tmp29
    t_int __cil_tmp30
    t_int __cil_tmp31
    t_unspecified __cil_tmp32
    t_int __cil_tmp33
    t_int __cil_tmp34
    t_int __cil_tmp35
    t_int __cil_tmp36
    t_unspecified __cil_tmp37
    t_int __cil_tmp38
    t_int __cil_tmp39
    {
      {
        (op_assign registrationFlag 0)
        (op_assign deviceExtension DeviceObject__DeviceExtension)
        (op_assign __cil_tmp20 4224)
        (op_assign __cil_tmp21 2949120)
        (op_assign __cil_tmp22 2953344)
        (op_assign irp IoBuildDeviceIoControlRequest((__cil_tmp22,deviceExtension__TargetDeviceObject,0,0,number,sizeof__number,0,event,ioStatus)))
      }
      if (op_not irp) {
        return (op_bracketedPrimary (op_minus 1073741670))
      }
      else {}
      {
        (op_assign status IofCallDriver((deviceExtension__TargetDeviceObject,irp)))
      }
      {
        (op_assign __cil_tmp23 (t_unspecified)status)
        if (op_equals __cil_tmp23 259L) {
          {
            KeWaitForSingleObject((event,Executive,KernelMode,0,0))
            (op_assign status ioStatus__Status)
          }
        }
        else {}
      }
      if (op_lessThan status 0) {
        (op_assign outputSize sizeof__MOUNTDEV_NAME)
        if (op_not output) {
          return (op_bracketedPrimary (op_minus 1073741670))
        }
        else {}
        {
          (op_assign __cil_tmp24 8)
          (op_assign __cil_tmp25 5046272)
          (op_assign __cil_tmp26 5046280)
          (op_assign irp IoBuildDeviceIoControlRequest((__cil_tmp26,deviceExtension__TargetDeviceObject,0,0,output,outputSize,0,event,ioStatus)))
        }
        if (op_not irp) {
          return (op_bracketedPrimary (op_minus 1073741670))
        }
        else {}
        {
          (op_assign status IofCallDriver((deviceExtension__TargetDeviceObject,irp)))
        }
        {
          (op_assign __cil_tmp27 (t_unspecified)status)
          if (op_equals __cil_tmp27 259L) {
            {
              KeWaitForSingleObject((event,Executive,KernelMode,0,0))
              (op_assign status ioStatus__Status)
            }
          }
          else {}
        }
        {
          (op_assign __cil_tmp28 (t_unspecified)status)
          if (op_equals __cil_tmp28 (op_minus 2147483643)) {
            (op_assign outputSize (op_plus sizeof__MOUNTDEV_NAME output__NameLength))
            if (op_not output) {
              return (op_bracketedPrimary (op_minus 1073741670))
            }
            else {}
            {
              (op_assign __cil_tmp29 8)
              (op_assign __cil_tmp30 5046272)
              (op_assign __cil_tmp31 5046280)
              (op_assign irp IoBuildDeviceIoControlRequest((__cil_tmp31,deviceExtension__TargetDeviceObject,0,0,output,outputSize,0,event,ioStatus)))
            }
            if (op_not irp) {
              return (op_bracketedPrimary (op_minus 1073741670))
            }
            else {}
            {
              (op_assign status IofCallDriver((deviceExtension__TargetDeviceObject,irp)))
            }
            {
              (op_assign __cil_tmp32 (t_unspecified)status)
              if (op_equals __cil_tmp32 259L) {
                {
                  KeWaitForSingleObject((event,Executive,KernelMode,0,0))
                  (op_assign status ioStatus__Status)
                }
              }
              else {}
            }
          }
          else {}
        }
        {
          if (op_lessThan status 0) {
            return (op_bracketedPrimary status)
          }
          else {}
        }
        {
          (op_assign __cil_tmp34 28)
          (op_assign __cil_tmp35 5636096)
          (op_assign __cil_tmp36 5636124)
          (op_assign irp IoBuildDeviceIoControlRequest((__cil_tmp36,deviceExtension__TargetDeviceObject,0,0,volumeNumber,sizeof__VOLUME_NUMBER,0,event,ioStatus)))
        }
        if (op_not irp) {
          return (op_bracketedPrimary (op_minus 1073741670))
        }
        else {}
        {
          (op_assign status IofCallDriver((deviceExtension__TargetDeviceObject,irp)))
        }
        {
          (op_assign __cil_tmp37 (t_unspecified)status)
          if (op_equals __cil_tmp37 259L) {
            {
              KeWaitForSingleObject((event,Executive,KernelMode,0,0))
              (op_assign status ioStatus__Status)
            }
          }
          else {}
        }
        {
          if (op_lessThan status 0) {
            goto _L
          }
          else {
            if (op_equals volumeNumber__VolumeManagerName__0 0) {
              _L:
              if (op_greaterEqual status 0) {
              }
              else {}
            }
            else {}
          }
        }
      }
      else {}
      {
        if (op_lessThan status 0) {
        }
        else {}
      }
      return (op_bracketedPrimary status)
    }
  }
  t_void stub_driver_init(t_void ){
    {
      (op_assign s NP)
      (op_assign customIrp 0)
      (op_assign setEventCalled customIrp)
      (op_assign lowerDriverReturn setEventCalled)
      (op_assign compRegistered lowerDriverReturn)
      (op_assign compFptr compRegistered)
      (op_assign pended compFptr)
      return
    }
  }
  t_int main(t_void ){
    t_int d = __VERIFIER_nondet_int()
    t_int status = __VERIFIER_nondet_int()
    t_int we_should_unload = __VERIFIER_nondet_int()
    t_int irp = __VERIFIER_nondet_int()
    t_int pirp__IoStatus__Status
    t_int irp_choice = __VERIFIER_nondet_int()
    t_int devobj = __VERIFIER_nondet_int()
    t_int __cil_tmp9
    (op_assign s 0)
    (op_assign UNLOADED 0)
    (op_assign NP 0)
    (op_assign DC 0)
    (op_assign SKIP1 0)
    (op_assign SKIP2 0)
    (op_assign MPR1 0)
    (op_assign MPR3 0)
    (op_assign IPC 0)
    (op_assign pended 0)
    (op_assign compFptr 0)
    (op_assign compRegistered 0)
    (op_assign lowerDriverReturn 0)
    (op_assign setEventCalled 0)
    (op_assign customIrp 0)
    (op_assign myStatus 0)
    (op_assign routine 0)
    (op_assign pirp 0)
    (op_assign Executive 0)
    (op_assign KernelMode 0)
    {
      {
        (op_assign pirp irp)
        _BLAST_init()
      }
      if (op_greaterEqual status 0) {
        (op_assign s NP)
        (op_assign customIrp 0)
        (op_assign setEventCalled customIrp)
        (op_assign lowerDriverReturn setEventCalled)
        (op_assign compRegistered lowerDriverReturn)
        (op_assign compFptr compRegistered)
        (op_assign pended compFptr)
        (op_assign pirp__IoStatus__Status 0)
        (op_assign myStatus 0)
        if (op_equals irp_choice 0) {
          (op_assign pirp__IoStatus__Status (op_minus 1073741637))
          (op_assign myStatus (op_minus 1073741637))
        }
        else {}
        {
          stub_driver_init()
        }
        {
          if (op_lessThan status 0) {
            return (op_bracketedPrimary (op_minus 1))
          }
          else {}
        }
        t_int tmp_ndt_1
        (op_assign tmp_ndt_1 __VERIFIER_nondet_int())
        if (op_equals tmp_ndt_1 0) {
          goto switch_2_0
        }
        else {
          t_int tmp_ndt_2
          (op_assign tmp_ndt_2 __VERIFIER_nondet_int())
          if (op_equals tmp_ndt_2 2) {
            goto switch_2_2
          }
          else {
            t_int tmp_ndt_3
            (op_assign tmp_ndt_3 __VERIFIER_nondet_int())
            if (op_equals tmp_ndt_3 3) {
              goto switch_2_3
            }
            else {
              t_int tmp_ndt_4
              (op_assign tmp_ndt_4 __VERIFIER_nondet_int())
              if (op_equals tmp_ndt_4 4) {
                goto switch_2_4
              }
              else {
                t_int tmp_ndt_5
                (op_assign tmp_ndt_5 __VERIFIER_nondet_int())
                if (op_equals tmp_ndt_5 12) {
                  goto switch_2_12
                }
                else {
                  goto switch_2_default
                  if 0 {
                    switch_2_0:
                    {
                      (op_assign status DiskPerfCreate((devobj,pirp)))
                    }
                    goto switch_2_break
                    switch_2_2:
                    {
                      (op_assign status DiskPerfDeviceControl((devobj,pirp)))
                    }
                    goto switch_2_break
                    switch_2_3:
                    {
                      (op_assign status DiskPerfDispatchPnp((devobj,pirp)))
                    }
                    goto switch_2_break
                    switch_2_4:
                    {
                      (op_assign status DiskPerfDispatchPower((devobj,pirp)))
                    }
                    goto switch_2_break
                    switch_2_12:
                    {
                      (op_assign status DiskPerfShutdownFlush((devobj,pirp)))
                    }
                    goto switch_2_break
                    switch_2_default:
                    {}
                    return (op_bracketedPrimary (op_minus 1))
                  }
                  else {
                    switch_2_break:
                    {}
                  }
                }
              }
            }
          }
        }
        if we_should_unload {
          {
            DiskPerfUnload(d)
          }
        }
        else {}
      }
      else {}
      if (op_equals pended 1) {
        if (op_equals s NP) {
          (op_assign s NP)
        }
        else {
          goto _L___2
        }
      }
      else {
        _L___2:
        if (op_equals pended 1) {
          if (op_equals s MPR3) {
            (op_assign s MPR3)
          }
          else {
            goto _L___1
          }
        }
        else {
          _L___1:
          if (op_notequals s UNLOADED) {
            if (op_notequals status (op_minus 1)) {
              if (op_notequals s SKIP2) {
                if (op_notequals s IPC) {
                  if (op_notequals s DC) {
                    {
                      errorFn()
                    }
                  }
                  else {
                    goto _L___0
                  }
                }
                else {
                  goto _L___0
                }
              }
              else {
                _L___0:
                if (op_equals pended 1) {
                  if (op_notequals status 259) {
                    {
                      errorFn()
                    }
                  }
                  else {}
                }
                else {
                  if (op_equals s DC) {
                    if (op_equals status 259) {
                      {
                        errorFn()
                      }
                    }
                    else {}
                  }
                  else {
                    if (op_notequals status lowerDriverReturn) {
                      {
                        errorFn()
                      }
                    }
                    else {}
                  }
                }
              }
            }
            else {}
          }
          else {}
        }
      }
      return (op_bracketedPrimary status)
    }
  }
  t_int IoBuildDeviceIoControlRequest(t_int IoControlCode,t_int DeviceObject,t_int InputBuffer,t_int InputBufferLength,t_int OutputBuffer,t_int OutputBufferLength,t_int InternalDeviceIoControl,t_int Event,t_int IoStatusBlock){
    t_int malloc_ret = __VERIFIER_nondet_int()
    {
      (op_assign customIrp 1)
      t_int tmp_ndt_7
      (op_assign tmp_ndt_7 __VERIFIER_nondet_int())
      if (op_equals tmp_ndt_7 0) {
        goto switch_3_0
      }
      else {
        goto switch_3_default
        if 0 {
          switch_3_0:
          {}
          return (op_bracketedPrimary malloc_ret)
          switch_3_default:
          {}
          return (op_bracketedPrimary 0)
        }
        else {
        }
      }
    }
  }
  t_void stubMoreProcessingRequired(t_void ){
    {
      if (op_equals s NP) {
        (op_assign s MPR1)
      }
      else {
        {
          errorFn()
        }
      }
      return
    }
  }
  t_int IofCallDriver(t_int DeviceObject,t_int Irp){
    t_int returnVal2
    t_int compRetStatus
    t_int lcontext = __VERIFIER_nondet_int()
    t_unspecified __cil_tmp7
    {
      if compRegistered {
        if (op_equals routine 0) {
          {
            (op_assign compRetStatus DiskPerfIrpCompletion((DeviceObject,Irp,lcontext)))
          }
        }
        else {
          {
            (op_assign compRetStatus DiskPerfIoCompletion((DeviceObject,Irp,lcontext)))
          }
        }
        {
          (op_assign __cil_tmp7 (t_unspecified)compRetStatus)
          if (op_equals __cil_tmp7 (op_minus 1073741802)) {
            {
              stubMoreProcessingRequired()
            }
          }
          else {}
        }
      }
      else {}
      t_int tmp_ndt_8
      (op_assign tmp_ndt_8 __VERIFIER_nondet_int())
      if (op_equals tmp_ndt_8 0) {
        goto switch_4_0
      }
      else {
        t_int tmp_ndt_9
        (op_assign tmp_ndt_9 __VERIFIER_nondet_int())
        if (op_equals tmp_ndt_9 1) {
          goto switch_4_1
        }
        else {
          goto switch_4_default
          if 0 {
            switch_4_0:
            (op_assign returnVal2 0)
            goto switch_4_break
            switch_4_1:
            (op_assign returnVal2 (op_minus 1073741823))
            goto switch_4_break
            switch_4_default:
            (op_assign returnVal2 259)
            goto switch_4_break
          }
          else {
            switch_4_break:
            {}
          }
        }
      }
      if (op_equals s NP) {
        (op_assign s IPC)
        (op_assign lowerDriverReturn returnVal2)
      }
      else {
        if (op_equals s MPR1) {
          if (op_equals returnVal2 259) {
            (op_assign s MPR3)
            (op_assign lowerDriverReturn returnVal2)
          }
          else {
            (op_assign s NP)
            (op_assign lowerDriverReturn returnVal2)
          }
        }
        else {
          if (op_equals s SKIP1) {
            (op_assign s SKIP2)
            (op_assign lowerDriverReturn returnVal2)
          }
          else {
            {
              errorFn()
            }
          }
        }
      }
      return (op_bracketedPrimary returnVal2)
    }
  }
  t_void IofCompleteRequest(t_int Irp,t_int PriorityBoost){
    {
      if (op_equals s NP) {
        (op_assign s DC)
      }
      else {
        {
          errorFn()
        }
      }
      return
    }
  }
  t_int KeSetEvent(t_int Event,t_int Increment,t_int Wait){
    t_int l = __VERIFIER_nondet_int()
    {
      (op_assign setEventCalled 1)
      return (op_bracketedPrimary l)
    }
  }
  t_int KeWaitForSingleObject(t_int Object,t_int WaitReason,t_int WaitMode,t_int Alertable,t_int Timeout){
    {
      if (op_equals s MPR3) {
        if (op_equals setEventCalled 1) {
          (op_assign s NP)
          (op_assign setEventCalled 0)
        }
        else {
          goto _L
        }
      }
      else {
        _L:
        if (op_equals customIrp 1) {
          (op_assign s NP)
          (op_assign customIrp 0)
        }
        else {
          if (op_equals s MPR3) {
            {
              errorFn()
            }
          }
          else {}
        }
      }
      t_int tmp_ndt_10
      (op_assign tmp_ndt_10 __VERIFIER_nondet_int())
      if (op_equals tmp_ndt_10 0) {
        goto switch_5_0
      }
      else {
        goto switch_5_default
        if 0 {
          switch_5_0:
          {}
          return (op_bracketedPrimary 0)
          switch_5_default:
          {}
          return (op_bracketedPrimary (op_minus 1073741823))
        }
        else {
        }
      }
    }
  }
  t_int PoCallDriver(t_int DeviceObject,t_int Irp){
    t_int compRetStatus
    t_int returnVal
    t_int lcontext = __VERIFIER_nondet_int()
    t_unspecified __cil_tmp7
    t_unspecified __cil_tmp8
    {
      if compRegistered {
        if (op_equals routine 0) {
          {
            (op_assign compRetStatus DiskPerfIrpCompletion((DeviceObject,Irp,lcontext)))
          }
        }
        else {
          if (op_equals routine 1) {
            {
              (op_assign compRetStatus DiskPerfIoCompletion((DeviceObject,Irp,lcontext)))
            }
          }
          else {}
        }
        {
          (op_assign __cil_tmp7 (t_unspecified)compRetStatus)
          if (op_equals __cil_tmp7 (op_minus 1073741802)) {
            {
              stubMoreProcessingRequired()
            }
          }
          else {}
        }
      }
      else {}
      t_int tmp_ndt_11
      (op_assign tmp_ndt_11 __VERIFIER_nondet_int())
      if (op_equals tmp_ndt_11 0) {
        goto switch_6_0
      }
      else {
        t_int tmp_ndt_12
        (op_assign tmp_ndt_12 __VERIFIER_nondet_int())
        if (op_equals tmp_ndt_12 1) {
          goto switch_6_1
        }
        else {
          goto switch_6_default
          if 0 {
            switch_6_0:
            (op_assign returnVal 0)
            goto switch_6_break
            switch_6_1:
            (op_assign returnVal (op_minus 1073741823))
            goto switch_6_break
            switch_6_default:
            (op_assign returnVal 259)
            goto switch_6_break
          }
          else {
            switch_6_break:
            {}
          }
        }
      }
      if (op_equals s NP) {
        (op_assign s IPC)
        (op_assign lowerDriverReturn returnVal)
      }
      else {
        if (op_equals s MPR1) {
          {
            (op_assign __cil_tmp8 (t_unspecified)returnVal)
            if (op_equals __cil_tmp8 259L) {
              (op_assign s MPR3)
              (op_assign lowerDriverReturn returnVal)
            }
            else {
              (op_assign s NP)
              (op_assign lowerDriverReturn returnVal)
            }
          }
        }
        else {
          if (op_equals s SKIP1) {
            (op_assign s SKIP2)
            (op_assign lowerDriverReturn returnVal)
          }
          else {
            {
              errorFn()
            }
          }
        }
      }
      return (op_bracketedPrimary returnVal)
    }
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern char __VERIFIER_nondet_char(void);
  extern int __VERIFIER_nondet_int(void);
  extern long __VERIFIER_nondet_long(void);
  extern void *__VERIFIER_nondet_pointer(void);
  int DiskPerfDispatchPnp(int DeviceObject, int Irp);
  int DiskPerfIrpCompletion(int DeviceObject, int Irp, int Context);
  int DiskPerfStartDevice(int DeviceObject, int Irp);
  int DiskPerfRemoveDevice(int DeviceObject, int Irp);
  int DiskPerfSendToNextDriver(int DeviceObject, int Irp);
  int DiskPerfDispatchPower(int DeviceObject, int Irp);
  int DiskPerfForwardIrpSynchronous(int DeviceObject, int Irp);
  int DiskPerfCreate(int DeviceObject, int Irp);
  int DiskPerfIoCompletion(int DeviceObject, int Irp, int Context);
  int DiskPerfDeviceControl(int DeviceObject, int Irp);
  int DiskPerfShutdownFlush(int DeviceObject, int Irp);
  int DiskPerfRegisterDevice(int DeviceObject);
  int IoBuildDeviceIoControlRequest(int IoControlCode, int DeviceObject, int InputBuffer, int InputBufferLength, int OutputBuffer, int OutputBufferLength, int InternalDeviceIoControl, int Event, int IoStatusBlock);
  int IofCallDriver(int DeviceObject, int Irp);
  int KeSetEvent(int Event, int Increment, int Wait);
  int KeWaitForSingleObject(int Object, int WaitReason, int WaitMode, int Alertable, int Timeout);
  int PoCallDriver(int DeviceObject, int Irp);
  void IofCompleteRequest(int Irp, int PriorityBoost);
  int __VERIFIER_nondet_int();
  int s;
  int UNLOADED;
  int NP;
  int DC;
  int SKIP1;
  int SKIP2;
  int MPR1;
  int MPR3;
  int IPC;
  int pended;
  int compFptr;
  int compRegistered;
  int lowerDriverReturn;
  int setEventCalled;
  int customIrp;
  int myStatus;
  int routine;
  int pirp;
  int Executive;
  int KernelMode;
  void errorFn(void)
  {
    {
      ERROR:
      __VERIFIER_error();
      return;
    }
  }
  void _BLAST_init(void)
  {
    {
      UNLOADED = 0;
      NP = 1;
      DC = 2;
      SKIP1 = 3;
      SKIP2 = 4;
      MPR1 = 5;
      MPR3 = 6;
      IPC = 7;
      s = UNLOADED;
      pended = 0;
      compFptr = 0;
      compRegistered = 0;
      lowerDriverReturn = 0;
      setEventCalled = 0;
      customIrp = 0;
      return;
    }
  }
  void DiskPerfSyncFilterWithTarget(int FilterDevice, int TargetDevice)
  {
    int FilterDevice__Flags;
    int TargetDevice__Characteristics;
    int FilterDevice__Characteristics;
    int propFlags;
    {
      return;
    }
  }
  int DiskPerfDispatchPnp(int DeviceObject, int Irp)
  {
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int irpSp__MinorFunction = __VERIFIER_nondet_int();
    int irpSp;
    int status;
    int tmp;
    {
      irpSp = Irp__Tail__Overlay__CurrentStackLocation;
      if(irpSp__MinorFunction == 0){
        goto switch_0_0;
      }else{
        if(irpSp__MinorFunction == 2){
          goto switch_0_2;
        }else{
          goto switch_0_default;
          if(0){
            switch_0_0:
            {
              status = DiskPerfStartDevice(DeviceObject, Irp);
            }goto switch_0_break;
            switch_0_2:
            {
              status = DiskPerfRemoveDevice(DeviceObject, Irp);
            }
            goto switch_0_break;
            switch_0_default:
            {
              tmp = DiskPerfSendToNextDriver(DeviceObject, Irp);
            }
            return (tmp);
          }
          else{
            switch_0_break:
            ;
          }
        }
      }
      return (status);
    }
  }
  int DiskPerfIrpCompletion(int DeviceObject, int Irp, int Context)
  {
    int Event;
    {
      {
        Event = Context;
        KeSetEvent(Event, 0, 0);
      }
      return (-1073741802);
    }
  }
  int DiskPerfStartDevice(int DeviceObject, int Irp)
  {
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int Irp__IoStatus__Status;
    int deviceExtension;
    int status;
    {
      {
        deviceExtension = DeviceObject__DeviceExtension;
        status = DiskPerfForwardIrpSynchronous(DeviceObject, Irp);
        DiskPerfSyncFilterWithTarget(DeviceObject, deviceExtension__TargetDeviceObject);
        DiskPerfRegisterDevice(DeviceObject);
        Irp__IoStatus__Status = status;
        myStatus = status;
        IofCompleteRequest(Irp, 0);
      }
      return (status);
    }
  }
  int DiskPerfRemoveDevice(int DeviceObject, int Irp)
  {
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__WmilibContext = __VERIFIER_nondet_int();
    int Irp__IoStatus__Status;
    int status;
    int deviceExtension;
    int wmilibContext;
    {
      {
        deviceExtension = DeviceObject__DeviceExtension;
        wmilibContext = deviceExtension__WmilibContext;
        status = DiskPerfForwardIrpSynchronous(DeviceObject, Irp);
        Irp__IoStatus__Status = status;
        myStatus = status;
        IofCompleteRequest(Irp, 0);
      }
      return (status);
    }
  }
  int DiskPerfSendToNextDriver(int DeviceObject, int Irp)
  {
    int Irp__CurrentLocation = __VERIFIER_nondet_int();
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int deviceExtension;
    int tmp;
    {
      if(s == NP){
        s = SKIP1;
      }else{
        {
          errorFn();
      }}
      {
        Irp__CurrentLocation++;
        Irp__Tail__Overlay__CurrentStackLocation++;
        deviceExtension = DeviceObject__DeviceExtension;
        tmp = IofCallDriver(deviceExtension__TargetDeviceObject, Irp);
      }
      return (tmp);
    }
  }
  int DiskPerfDispatchPower(int DeviceObject, int Irp)
  {
    int Irp__CurrentLocation = __VERIFIER_nondet_int();
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int deviceExtension;
    int tmp;
    {
      if(s == NP){
        s = SKIP1;
      }else{
        {
          errorFn();
      }}
      {
        Irp__CurrentLocation++;
        Irp__Tail__Overlay__CurrentStackLocation++;
        deviceExtension = DeviceObject__DeviceExtension;
        tmp = PoCallDriver(deviceExtension__TargetDeviceObject, Irp);
      }
      return (tmp);
    }
  }
  int DiskPerfForwardIrpSynchronous(int DeviceObject, int Irp)
  {
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int deviceExtension;
    int event = __VERIFIER_nondet_int();
    int status;
    int nextIrpSp__Control;
    int irpSp;
    int nextIrpSp;
    int irpSp__Context;
    int irpSp__Control;
    int irpSp___0;
    long __cil_tmp15;
    {
      deviceExtension = DeviceObject__DeviceExtension;
      irpSp = Irp__Tail__Overlay__CurrentStackLocation;
      nextIrpSp = Irp__Tail__Overlay__CurrentStackLocation - 1;
      nextIrpSp__Control = 0;
      if(s != NP){
        {
          errorFn();
      }}
      else{
        if(compRegistered != 0){
          {
            errorFn();
        }}
        else{
          compRegistered = 1;
          routine = 0;
        }
      }
      {
        irpSp___0 = Irp__Tail__Overlay__CurrentStackLocation - 1;
        irpSp__Context = event;
        irpSp__Control = 224;
        status = IofCallDriver(deviceExtension__TargetDeviceObject, Irp);
      }
      {
        __cil_tmp15 = (long )status;
        if(__cil_tmp15 == 259L){
          {
            KeWaitForSingleObject(event, Executive, KernelMode, 0, 0);
            status = myStatus;
        }}
      }
      return (status);
    }
  }
  int DiskPerfCreate(int DeviceObject, int Irp)
  {
    {
      {
        myStatus = 0;
        IofCompleteRequest(Irp, 0);
      }
      return (0);
    }
  }
  int DiskPerfIoCompletion(int DeviceObject, int Irp, int Context)
  {
    int irpStack__MajorFunction = __VERIFIER_nondet_int();
    int partitionCounters__BytesRead__QuadPart = __VERIFIER_nondet_int();
    int Irp__IoStatus__Information = __VERIFIER_nondet_int();
    int partitionCounters__ReadCount = __VERIFIER_nondet_int();
    int partitionCounters__ReadTime__QuadPart = __VERIFIER_nondet_int();
    int difference__QuadPart = __VERIFIER_nondet_int();
    int partitionCounters__BytesWritten__QuadPart = __VERIFIER_nondet_int();
    int partitionCounters__WriteCount = __VERIFIER_nondet_int();
    int partitionCounters__WriteTime__QuadPart = __VERIFIER_nondet_int();
    int Irp__Flags = __VERIFIER_nondet_int();
    int partitionCounters__SplitCount = __VERIFIER_nondet_int();
    int Irp__PendingReturned = __VERIFIER_nondet_int();
    int Irp__Tail__Overlay__CurrentStackLocation__Control;
    int partitionCounters = __VERIFIER_nondet_int();
    int queueLen = __VERIFIER_nondet_int();
    {
      if(partitionCounters == 0){
        return (0);
      }
      if(queueLen < 0){
      }
      if(queueLen == 0){
      }
      if(irpStack__MajorFunction == 3){
        partitionCounters__BytesRead__QuadPart += Irp__IoStatus__Information;
        partitionCounters__ReadCount++;
        partitionCounters__ReadTime__QuadPart += difference__QuadPart;
      }else{
        partitionCounters__BytesWritten__QuadPart += Irp__IoStatus__Information;
        partitionCounters__WriteCount++;
        partitionCounters__WriteTime__QuadPart += difference__QuadPart;
      }
      if(Irp__Flags != 8){
        partitionCounters__SplitCount++;
      }else{
      }
      if(Irp__PendingReturned){
        if(pended == 0){
          pended = 1;
        }else{
          {
            errorFn();
        }}
      }
      return (0);
    }
  }
  int DiskPerfDeviceControl(int DeviceObject, int Irp)
  {
    int Irp__CurrentLocation = __VERIFIER_nondet_int();
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int currentIrpStack__Parameters__DeviceIoControl__IoControlCode = __VERIFIER_nondet_int();
    int currentIrpStack__Parameters__DeviceIoControl__OutputBufferLength = __VERIFIER_nondet_int();
    int sizeof__DISK_PERFORMANCE = __VERIFIER_nondet_int();
    int Irp__IoStatus__Information;
    int deviceExtension__DiskCounters = __VERIFIER_nondet_int();
    int Irp__AssociatedIrp__SystemBuffer = __VERIFIER_nondet_int();
    int deviceExtension__Processors = __VERIFIER_nondet_int();
    int totalCounters__QueueDepth;
    int deviceExtension__QueueDepth = __VERIFIER_nondet_int();
    int Irp__IoStatus__Status;
    int deviceExtension;
    int currentIrpStack;
    int status;
    int i;
    int totalCounters;
    int diskCounters;
    int tmp;
    int __cil_tmp24;
    int __cil_tmp25;
    int __cil_tmp26;
    {
      deviceExtension = DeviceObject__DeviceExtension;
      currentIrpStack = Irp__Tail__Overlay__CurrentStackLocation;
      {
        __cil_tmp24 = 32;
        __cil_tmp25 = 458752;
        __cil_tmp26 = 458784;
        if(currentIrpStack__Parameters__DeviceIoControl__IoControlCode == __cil_tmp26){
          if(currentIrpStack__Parameters__DeviceIoControl__OutputBufferLength < sizeof__DISK_PERFORMANCE){
            status = -1073741789;
            Irp__IoStatus__Information = 0;
          }else{
            diskCounters = deviceExtension__DiskCounters;
            if(diskCounters == 0){
              {
                Irp__IoStatus__Status = -1073741823;
                myStatus = -1073741823;
                IofCompleteRequest(Irp, 0);
              }return (-1073741823);
            }
            totalCounters = Irp__AssociatedIrp__SystemBuffer;
            i = 0;
            {
              while(1){
                while_0_continue:
                ;
                if(i >= deviceExtension__Processors){
                  goto while_1_break;
                }
                i++;
              }
              while_0_break:
              ;
            }
            while_1_break:
            totalCounters__QueueDepth = deviceExtension__QueueDepth;
            status = 0;
            Irp__IoStatus__Information = sizeof__DISK_PERFORMANCE;
          }
          {
            Irp__IoStatus__Status = status;
            myStatus = status;
            IofCompleteRequest(Irp, 0);
          }
          return (status);
        }
        else{
          {
            Irp__CurrentLocation++;
            Irp__Tail__Overlay__CurrentStackLocation++;
            tmp = IofCallDriver(deviceExtension__TargetDeviceObject, Irp);
          }return (tmp);
        }
      }
    }
  }
  int DiskPerfShutdownFlush(int DeviceObject, int Irp)
  {
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int Irp__CurrentLocation = __VERIFIER_nondet_int();
    int Irp__Tail__Overlay__CurrentStackLocation = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int deviceExtension;
    int tmp;
    {
      {
        deviceExtension = DeviceObject__DeviceExtension;
        Irp__CurrentLocation++;
        Irp__Tail__Overlay__CurrentStackLocation++;
        tmp = IofCallDriver(deviceExtension__TargetDeviceObject, Irp);
      }
      return (tmp);
    }
  }
  void DiskPerfUnload(int DriverObject)
  {
    {
      return;
    }
  }
  int DiskPerfRegisterDevice(int DeviceObject)
  {
    int DeviceObject__DeviceExtension = __VERIFIER_nondet_int();
    int deviceExtension__TargetDeviceObject = __VERIFIER_nondet_int();
    int sizeof__number = __VERIFIER_nondet_int();
    int ioStatus__Status = __VERIFIER_nondet_int();
    int sizeof__VOLUME_NUMBER = __VERIFIER_nondet_int();
    int volumeNumber__VolumeManagerName__0 = __VERIFIER_nondet_int();
    int status;
    int ioStatus = __VERIFIER_nondet_int();
    int event = __VERIFIER_nondet_int();
    int deviceExtension;
    int irp;
    int number = __VERIFIER_nondet_int();
    int registrationFlag;
    int sizeof__MOUNTDEV_NAME = __VERIFIER_nondet_int();
    int output__NameLength = __VERIFIER_nondet_int();
    int outputSize;
    int output = __VERIFIER_nondet_int();
    int volumeNumber = __VERIFIER_nondet_int();
    int __cil_tmp20;
    int __cil_tmp21;
    int __cil_tmp22;
    long __cil_tmp23;
    int __cil_tmp24;
    int __cil_tmp25;
    int __cil_tmp26;
    long __cil_tmp27;
    unsigned long __cil_tmp28;
    int __cil_tmp29;
    int __cil_tmp30;
    int __cil_tmp31;
    long __cil_tmp32;
    int __cil_tmp33;
    int __cil_tmp34;
    int __cil_tmp35;
    int __cil_tmp36;
    long __cil_tmp37;
    int __cil_tmp38;
    int __cil_tmp39;
    {
      {
        registrationFlag = 0;
        deviceExtension = DeviceObject__DeviceExtension;
        __cil_tmp20 = 4224;
        __cil_tmp21 = 2949120;
        __cil_tmp22 = 2953344;
        irp = IoBuildDeviceIoControlRequest(__cil_tmp22, deviceExtension__TargetDeviceObject, 0, 0, number, sizeof__number, 0, event, ioStatus);
      }
      if(!irp){
        return (-1073741670);
      }
      {
        status = IofCallDriver(deviceExtension__TargetDeviceObject, irp);
      }
      {
        __cil_tmp23 = (long )status;
        if(__cil_tmp23 == 259L){
          {
            KeWaitForSingleObject(event, Executive, KernelMode, 0, 0);
            status = ioStatus__Status;
        }}
      }
      if(status < 0){
        outputSize = sizeof__MOUNTDEV_NAME;
        if(!output){
          return (-1073741670);
        }
        {
          __cil_tmp24 = 8;
          __cil_tmp25 = 5046272;
          __cil_tmp26 = 5046280;
          irp = IoBuildDeviceIoControlRequest(__cil_tmp26, deviceExtension__TargetDeviceObject, 0, 0, output, outputSize, 0, event, ioStatus);
        }
        if(!irp){
          return (-1073741670);
        }
        {
          status = IofCallDriver(deviceExtension__TargetDeviceObject, irp);
        }
        {
          __cil_tmp27 = (long )status;
          if(__cil_tmp27 == 259L){
            {
              KeWaitForSingleObject(event, Executive, KernelMode, 0, 0);
              status = ioStatus__Status;
          }}
        }
        {
          __cil_tmp28 = (unsigned long )status;
          if(__cil_tmp28 == -2147483643){
            outputSize = sizeof__MOUNTDEV_NAME + output__NameLength;
            if(!output){
              return (-1073741670);
            }
            {
              __cil_tmp29 = 8;
              __cil_tmp30 = 5046272;
              __cil_tmp31 = 5046280;
              irp = IoBuildDeviceIoControlRequest(__cil_tmp31, deviceExtension__TargetDeviceObject, 0, 0, output, outputSize, 0, event, ioStatus);
            }
            if(!irp){
              return (-1073741670);
            }
            {
              status = IofCallDriver(deviceExtension__TargetDeviceObject, irp);
            }
            {
              __cil_tmp32 = (long )status;
              if(__cil_tmp32 == 259L){
                {
                  KeWaitForSingleObject(event, Executive, KernelMode, 0, 0);
                  status = ioStatus__Status;
              }}
            }
          }
        }
        {
          if(status < 0){
            return (status);
          }
        }
        {
          __cil_tmp34 = 28;
          __cil_tmp35 = 5636096;
          __cil_tmp36 = 5636124;
          irp = IoBuildDeviceIoControlRequest(__cil_tmp36, deviceExtension__TargetDeviceObject, 0, 0, volumeNumber, sizeof__VOLUME_NUMBER, 0, event, ioStatus);
        }
        if(!irp){
          return (-1073741670);
        }
        {
          status = IofCallDriver(deviceExtension__TargetDeviceObject, irp);
        }
        {
          __cil_tmp37 = (long )status;
          if(__cil_tmp37 == 259L){
            {
              KeWaitForSingleObject(event, Executive, KernelMode, 0, 0);
              status = ioStatus__Status;
          }}
        }
        {
          if(status < 0){
            goto _L;
          }else{
            if(volumeNumber__VolumeManagerName__0 == 0){
              _L:
              if(status >= 0){
              }
            }
          }
        }
      }
      {
        if(status < 0){
        }
      }
      return (status);
    }
  }
  void stub_driver_init(void)
  {
    {
      s = NP;
      customIrp = 0;
      setEventCalled = customIrp;
      lowerDriverReturn = setEventCalled;
      compRegistered = lowerDriverReturn;
      compFptr = compRegistered;
      pended = compFptr;
      return;
    }
  }
  int main(void)
  {
    int d = __VERIFIER_nondet_int();
    int status = __VERIFIER_nondet_int();
    int we_should_unload = __VERIFIER_nondet_int();
    int irp = __VERIFIER_nondet_int();
    int pirp__IoStatus__Status;
    int irp_choice = __VERIFIER_nondet_int();
    int devobj = __VERIFIER_nondet_int();
    int __cil_tmp9;
    s = 0;
    UNLOADED = 0;
    NP = 0;
    DC = 0;
    SKIP1 = 0;
    SKIP2 = 0;
    MPR1 = 0;
    MPR3 = 0;
    IPC = 0;
    pended = 0;
    compFptr = 0;
    compRegistered = 0;
    lowerDriverReturn = 0;
    setEventCalled = 0;
    customIrp = 0;
    myStatus = 0;
    routine = 0;
    pirp = 0;
    Executive = 0;
    KernelMode = 0;
    {
      {
        pirp = irp;
        _BLAST_init();
      }
      if(status >= 0){
        s = NP;
        customIrp = 0;
        setEventCalled = customIrp;
        lowerDriverReturn = setEventCalled;
        compRegistered = lowerDriverReturn;
        compFptr = compRegistered;
        pended = compFptr;
        pirp__IoStatus__Status = 0;
        myStatus = 0;
        if(irp_choice == 0){
          pirp__IoStatus__Status = -1073741637;
          myStatus = -1073741637;
        }
        {
          stub_driver_init();
        }
        {
          if(status < 0){
            return (-1);
          }
        }
        int tmp_ndt_1;
        tmp_ndt_1 = __VERIFIER_nondet_int();
        if(tmp_ndt_1 == 0){
          goto switch_2_0;
        }else{
          int tmp_ndt_2;
          tmp_ndt_2 = __VERIFIER_nondet_int();
          if(tmp_ndt_2 == 2){
            goto switch_2_2;
          }else{
            int tmp_ndt_3;
            tmp_ndt_3 = __VERIFIER_nondet_int();
            if(tmp_ndt_3 == 3){
              goto switch_2_3;
            }else{
              int tmp_ndt_4;
              tmp_ndt_4 = __VERIFIER_nondet_int();
              if(tmp_ndt_4 == 4){
                goto switch_2_4;
              }else{
                int tmp_ndt_5;
                tmp_ndt_5 = __VERIFIER_nondet_int();
                if(tmp_ndt_5 == 12){
                  goto switch_2_12;
                }else{
                  goto switch_2_default;
                  if(0){
                    switch_2_0:
                    {
                      status = DiskPerfCreate(devobj, pirp);
                    }goto switch_2_break;
                    switch_2_2:
                    {
                      status = DiskPerfDeviceControl(devobj, pirp);
                    }
                    goto switch_2_break;
                    switch_2_3:
                    {
                      status = DiskPerfDispatchPnp(devobj, pirp);
                    }
                    goto switch_2_break;
                    switch_2_4:
                    {
                      status = DiskPerfDispatchPower(devobj, pirp);
                    }
                    goto switch_2_break;
                    switch_2_12:
                    {
                      status = DiskPerfShutdownFlush(devobj, pirp);
                    }
                    goto switch_2_break;
                    switch_2_default:
                    ;
                    return (-1);
                  }
                  else{
                    switch_2_break:
                    ;
                  }
                }
              }
            }
          }
        }
        if(we_should_unload){
          {
            DiskPerfUnload(d);
        }}
      }
      if(pended == 1){
        if(s == NP){
          s = NP;
        }else{
          goto _L___2;
        }
      }
      else{
        _L___2:
        if(pended == 1){
          if(s == MPR3){
            s = MPR3;
          }else{
            goto _L___1;
          }
        }
        else{
          _L___1:
          if(s != UNLOADED){
            if(status != -1){
              if(s != SKIP2){
                if(s != IPC){
                  if(s != DC){
                    {
                      errorFn();
                  }}
                  else{
                    goto _L___0;
                  }
                }
                else{
                  goto _L___0;
                }
              }
              else{
                _L___0:
                if(pended == 1){
                  if(status != 259){
                    {
                      errorFn();
                  }}
                }
                else{
                  if(s == DC){
                    if(status == 259){
                      {
                        errorFn();
                    }}
                  }
                  else{
                    if(status != lowerDriverReturn){
                      {
                        errorFn();
                    }}
                  }
                }
              }
            }
          }
        }
      }
      return (status);
    }
  }
  int IoBuildDeviceIoControlRequest(int IoControlCode, int DeviceObject, int InputBuffer, int InputBufferLength, int OutputBuffer, int OutputBufferLength, int InternalDeviceIoControl, int Event, int IoStatusBlock)
  {
    int malloc_ret = __VERIFIER_nondet_int();
    {
      customIrp = 1;
      int tmp_ndt_7;
      tmp_ndt_7 = __VERIFIER_nondet_int();
      if(tmp_ndt_7 == 0){
        goto switch_3_0;
      }else{
        goto switch_3_default;
        if(0){
          switch_3_0:
          ;
          return (malloc_ret);
          switch_3_default:
          ;
          return (0);
        }else{
        }
      }
    }
  }
  void stubMoreProcessingRequired(void)
  {
    {
      if(s == NP){
        s = MPR1;
      }else{
        {
          errorFn();
      }}
      return;
    }
  }
  int IofCallDriver(int DeviceObject, int Irp)
  {
    int returnVal2;
    int compRetStatus;
    int lcontext = __VERIFIER_nondet_int();
    unsigned long __cil_tmp7;
    {
      if(compRegistered){
        if(routine == 0){
          {
            compRetStatus = DiskPerfIrpCompletion(DeviceObject, Irp, lcontext);
        }}
        else{
          {
            compRetStatus = DiskPerfIoCompletion(DeviceObject, Irp, lcontext);
        }}
        {
          __cil_tmp7 = (unsigned long )compRetStatus;
          if(__cil_tmp7 == -1073741802){
            {
              stubMoreProcessingRequired();
          }}
        }
      }
      int tmp_ndt_8;
      tmp_ndt_8 = __VERIFIER_nondet_int();
      if(tmp_ndt_8 == 0){
        goto switch_4_0;
      }else{
        int tmp_ndt_9;
        tmp_ndt_9 = __VERIFIER_nondet_int();
        if(tmp_ndt_9 == 1){
          goto switch_4_1;
        }else{
          goto switch_4_default;
          if(0){
            switch_4_0:
            returnVal2 = 0;
            goto switch_4_break;
            switch_4_1:
            returnVal2 = -1073741823;
            goto switch_4_break;
            switch_4_default:
            returnVal2 = 259;
            goto switch_4_break;
          }else{
            switch_4_break:
            ;
          }
        }
      }
      if(s == NP){
        s = IPC;
        lowerDriverReturn = returnVal2;
      }else{
        if(s == MPR1){
          if(returnVal2 == 259){
            s = MPR3;
            lowerDriverReturn = returnVal2;
          }else{
            s = NP;
            lowerDriverReturn = returnVal2;
          }
        }
        else{
          if(s == SKIP1){
            s = SKIP2;
            lowerDriverReturn = returnVal2;
          }else{
            {
              errorFn();
          }}
        }
      }
      return (returnVal2);
    }
  }
  void IofCompleteRequest(int Irp, int PriorityBoost)
  {
    {
      if(s == NP){
        s = DC;
      }else{
        {
          errorFn();
      }}
      return;
    }
  }
  int KeSetEvent(int Event, int Increment, int Wait)
  {
    int l = __VERIFIER_nondet_int();
    {
      setEventCalled = 1;
      return (l);
    }
  }
  int KeWaitForSingleObject(int Object, int WaitReason, int WaitMode, int Alertable, int Timeout)
  {
    {
      if(s == MPR3){
        if(setEventCalled == 1){
          s = NP;
          setEventCalled = 0;
        }else{
          goto _L;
        }
      }
      else{
        _L:
        if(customIrp == 1){
          s = NP;
          customIrp = 0;
        }else{
          if(s == MPR3){
            {
              errorFn();
          }}
        }
      }
      int tmp_ndt_10;
      tmp_ndt_10 = __VERIFIER_nondet_int();
      if(tmp_ndt_10 == 0){
        goto switch_5_0;
      }else{
        goto switch_5_default;
        if(0){
          switch_5_0:
          ;
          return (0);
          switch_5_default:
          ;
          return (-1073741823);
        }else{
        }
      }
    }
  }
  int PoCallDriver(int DeviceObject, int Irp)
  {
    int compRetStatus;
    int returnVal;
    int lcontext = __VERIFIER_nondet_int();
    unsigned long __cil_tmp7;
    long __cil_tmp8;
    {
      if(compRegistered){
        if(routine == 0){
          {
            compRetStatus = DiskPerfIrpCompletion(DeviceObject, Irp, lcontext);
        }}
        else{
          if(routine == 1){
            {
              compRetStatus = DiskPerfIoCompletion(DeviceObject, Irp, lcontext);
          }}
        }
        {
          __cil_tmp7 = (unsigned long )compRetStatus;
          if(__cil_tmp7 == -1073741802){
            {
              stubMoreProcessingRequired();
          }}
        }
      }
      int tmp_ndt_11;
      tmp_ndt_11 = __VERIFIER_nondet_int();
      if(tmp_ndt_11 == 0){
        goto switch_6_0;
      }else{
        int tmp_ndt_12;
        tmp_ndt_12 = __VERIFIER_nondet_int();
        if(tmp_ndt_12 == 1){
          goto switch_6_1;
        }else{
          goto switch_6_default;
          if(0){
            switch_6_0:
            returnVal = 0;
            goto switch_6_break;
            switch_6_1:
            returnVal = -1073741823;
            goto switch_6_break;
            switch_6_default:
            returnVal = 259;
            goto switch_6_break;
          }else{
            switch_6_break:
            ;
          }
        }
      }
      if(s == NP){
        s = IPC;
        lowerDriverReturn = returnVal;
      }else{
        if(s == MPR1){
          {
            __cil_tmp8 = (long )returnVal;
            if(__cil_tmp8 == 259L){
              s = MPR3;
              lowerDriverReturn = returnVal;
            }else{
              s = NP;
              lowerDriverReturn = returnVal;
            }
          }
        }
        else{
          if(s == SKIP1){
            s = SKIP2;
            lowerDriverReturn = returnVal;
          }else{
            {
              errorFn();
          }}
        }
      }
      return (returnVal);
    }
  }
