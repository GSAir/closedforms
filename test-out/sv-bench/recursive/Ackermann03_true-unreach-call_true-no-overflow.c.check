// # recursive/Ackermann03_true-unreach-call_true-no-overflow.c
// # custom traverser
  t_void __VERIFIER_error()
  t_int __VERIFIER_nondet_int(t_void )
  t_int ackermann(t_int m,t_int n){
    if (op_equals m 0) {
      return (op_plus n 1)
    }
    else {}
    if (op_equals n 0) {
      return ackermann(((op_minus m 1),1))
    }
    else {}
    return ackermann(((op_minus m 1),ackermann((m,(op_minus n 1)))))
  }
  t_int main(){
    t_int m = __VERIFIER_nondet_int()
    if (op_logicalOr (op_lessThan m 0) (op_greaterThan m 3)) {
      return 0
    }
    else {}
    t_int n = __VERIFIER_nondet_int()
    if (op_logicalOr (op_lessThan n 0) (op_greaterThan n 23)) {
      return 0
    }
    else {}
    t_int result = ackermann((m,n))
    if (op_logicalOr (op_logicalOr (op_notequals m 2) (op_notequals n 2)) (op_equals result 7)) {
      return 0
    }
    else {
      ERROR:
      __VERIFIER_error()
    }
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern int __VERIFIER_nondet_int(void);
  int ackermann(int m, int n)
  {
    if(m == 0){
      return n + 1;
    }
    if(n == 0){
      return ackermann(m - 1, 1);
    }
    return ackermann(m - 1, ackermann(m, n - 1));
  }
  int main()
  {
    int m = __VERIFIER_nondet_int();
    if(m < 0 || m > 3){
      return 0;
    }
    int n = __VERIFIER_nondet_int();
    if(n < 0 || n > 23){
      return 0;
    }
    int result = ackermann(m, n);
    if(m != 2 || n != 2 || result == 7){
      return 0;
    }else{
      ERROR:
      __VERIFIER_error();
    }
  }
