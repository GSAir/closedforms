// # recursive/EvenOdd03_false-unreach-call_true-no-overflow_true-termination.c
// # custom traverser
  t_void __VERIFIER_error()
  t_int __VERIFIER_nondet_int(t_void )
  t_int isOdd(t_int n)
  t_int isEven(t_int n)
  t_int isOdd(t_int n){
    if (op_equals n 0) {
      return 0
    }
    else if (op_equals n 1) {
      return 1
    }
    else {
      return isEven((op_minus n 1))
    }
  }
  t_int isEven(t_int n){
    if (op_equals n 0) {
      return 1
    }
    else if (op_equals n 1) {
      return 0
    }
    else {
      return isOdd((op_minus n 1))
    }
  }
  t_int main(){
    t_int n = __VERIFIER_nondet_int()
    if (op_lessThan n 0) {
      return 0
    }
    else {}
    t_int result = isEven(n)
    t_int mod = (op_modulo n 2)
    if (op_logicalOr (op_lessThan result 0) (op_equals result mod)) {
      return 0
    }
    else {
      ERROR:
      __VERIFIER_error()
    }
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern int __VERIFIER_nondet_int(void);
  int isOdd(int n);
  int isEven(int n);
  int isOdd(int n)
  {
    if(n == 0){
      return 0;
    }else
    if(n == 1){
      return 1;
    }else{
      return isEven(n - 1);
    }
  }
  int isEven(int n)
  {
    if(n == 0){
      return 1;
    }else
    if(n == 1){
      return 0;
    }else{
      return isOdd(n - 1);
    }
  }
  int main()
  {
    int n = __VERIFIER_nondet_int();
    if(n < 0){
      return 0;
    }
    int result = isEven(n);
    int mod = n % 2;
    if(result < 0 || result == mod){
      return 0;
    }else{
      ERROR:
      __VERIFIER_error();
    }
  }
