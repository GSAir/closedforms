// # recursive/Primes_true-unreach-call_true-no-overflow_false-termination.c
// # custom traverser
  t_void __VERIFIER_error()
  t_int __VERIFIER_nondet_int(t_void )
  t_int mult(t_int n,t_int m){
    if (op_lessThan m 0) {
      return mult((n,(op_minus m)))
    }
    else {}
    if (op_equals m 0) {
      return 0
    }
    else {}
    if (op_equals m 1) {
      return 1
    }
    else {}
    return (op_plus n mult((n,(op_minus m 1))))
  }
  t_int multiple_of(t_int n,t_int m){
    if (op_lessThan m 0) {
      return multiple_of((n,(op_minus m)))
    }
    else {}
    if (op_lessThan n 0) {
      return multiple_of(((op_minus n),m))
    }
    else {}
    if (op_equals m 0) {
      return 0
    }
    else {}
    if (op_equals n 0) {
      return 1
    }
    else {}
    return multiple_of(((op_minus n m),m))
  }
  t_int is_prime_(t_int n,t_int m)
  t_int is_prime(t_int n)
  t_int is_prime(t_int n){
    return is_prime_((n,(op_minus n 1)))
  }
  t_int is_prime_(t_int n,t_int m){
    if (op_lessEqual n 1) {
      return 0
    }
    else {}
    if (op_equals n 2) {
      return 1
    }
    else {}
    if (op_greaterThan n 2) {
      if (op_lessEqual m 1) {
        return 1
      }
      else {
        if (op_equals multiple_of((n,m)) 0) {
          return 0
        }
        else {}
        return is_prime_((n,(op_minus m 1)))
      }
    }
    else {}
  }
  t_int main(){
    t_int n = __VERIFIER_nondet_int()
    if (op_logicalOr (op_lessThan n 1) (op_greaterThan n 46340)) {
      return 0
    }
    else {}
    t_int result = is_prime(n)
    t_int f1 = __VERIFIER_nondet_int()
    if (op_logicalOr (op_lessThan f1 1) (op_greaterThan f1 46340)) {
      return 0
    }
    else {}
    t_int f2 = __VERIFIER_nondet_int()
    if (op_logicalOr (op_lessThan f2 1) (op_greaterThan f2 46340)) {
      return 0
    }
    else {}
    if (op_logicalAnd (op_logicalAnd (op_logicalAnd (op_equals result 1) (op_equals mult((f1,f2)) n)) (op_greaterThan f1 1)) (op_greaterThan f2 1)) {
      ERROR:
      __VERIFIER_error()
    }
    else {
      return 0
    }
  }
// # default pretty printer
  extern void __VERIFIER_error();
  extern int __VERIFIER_nondet_int(void);
  int mult(int n, int m)
  {
    if(m < 0){
      return mult(n, -m);
    }
    if(m == 0){
      return 0;
    }
    if(m == 1){
      return 1;
    }
    return n + mult(n, m - 1);
  }
  int multiple_of(int n, int m)
  {
    if(m < 0){
      return multiple_of(n, -m);
    }
    if(n < 0){
      return multiple_of(-n, m);
    }
    if(m == 0){
      return 0;
    }
    if(n == 0){
      return 1;
    }
    return multiple_of(n - m, m);
  }
  int is_prime_(int n, int m);
  int is_prime(int n);
  int is_prime(int n)
  {
    return is_prime_(n, n - 1);
  }
  int is_prime_(int n, int m)
  {
    if(n <= 1){
      return 0;
    }
    if(n == 2){
      return 1;
    }
    if(n > 2){
      if(m <= 1){
        return 1;
      }else{
        if(multiple_of(n, m) == 0){
          return 0;
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  int main()
  {
    int n = __VERIFIER_nondet_int();
    if(n < 1 || n > 46340){
      return 0;
    }
    int result = is_prime(n);
    int f1 = __VERIFIER_nondet_int();
    if(f1 < 1 || f1 > 46340){
      return 0;
    }
    int f2 = __VERIFIER_nondet_int();
    if(f2 < 1 || f2 > 46340){
      return 0;
    }
    if(result == 1 && mult(f1, f2) == n && f1 > 1 && f2 > 1){
      ERROR:
      __VERIFIER_error();
    }else{
      return 0;
    }
  }
