# prog: {
    Assign(x,Const(900))
    Assign(y,Const(0))
    While(Less(Const(0),Ref(x)),{
      Assign(y,Plus(Ref(y),Const(1)))
      Assign(x,Plus(Ref(x),Const(-1)))
    })
    Assign(r,Ref(x))
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 900)
  val x2 = Map("&x" -> x1)
  val x3 = Map("val" -> 0)
  val x4 = Map("&x" -> x1, "&y" -> x3)
  val x7 = ("top",x6)
  begin loop f(n)=x5(x6), iteration vector x7 {
    initial assumption: f(0)=x4, f(x6)=x4, f(x6+1)=x4
    ## iteration 0, f(0)=x4, f(x6)=x4
      val x8 = Map("val" -> 1)
      val x9 = Map("&x" -> x1, "&y" -> x8)
      val x10 = Map("val" -> 899)
      val x11 = Map("&x" -> x10, "&y" -> x8)
      val x12 = x6 < 0
      val x13 = fixindex { x6 => 1 }
      val x14 = x13 < x6
      trip count: fixindex { x6 => 1 }
      approx f(0)=x4, f(x6)=x4, f(x6+1)=x11) = {
        lub_x5(x4,x4,x11)
        lub_x5_&x(x1,x1,x10)
        lub_x5_&x_val(900,900,899)
        numerical diff d=f(x6+1)-f(x6) = 899 - 900 = {
        } = -1
        poly: List(-1)
        confirmed iterative loop, d = -1
        val x15 = x6 * -1
        val x16 = x15 + 900
        val x17 = x6 + 1
        val x18 = x15 + -1
        val x19 = x15 + 899
        Set(("val",(x16,x19)))
        val x20 = Map("val" -> x16)
        val x21 = Map("val" -> x19)
        lub_x5_&y(x3,x3,x8)
        lub_x5_&y_val(0,0,1)
        numerical diff d=f(x6+1)-f(x6) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x6,x17)))
        val x22 = Map("val" -> x6)
        val x23 = Map("val" -> x17)
        Set(("&x",(x20,x21)), ("&y",(x22,x23)))
        val x24 = Map("&x" -> x20, "&y" -> x22)
        val x25 = Map("&x" -> x21, "&y" -> x23)
      } -> f(x6)=x24, f(x6+1)=x25
    ## iteration 1, f(0)=x4, f(x6)=x24
      val x26 = x6 < 900
      val x27 = Map("&x" -> x20, "&y" -> x23)
      val x28 = 900 < x6
      trip count: 900
      approx f(0)=x4, f(x6)=x24, f(x6+1)=x25) = {
        lub_x5(x4,x24,x25)
        lub_x5_&x(x1,x20,x21)
        lub_x5_&x_val(900,x16,x19)
        numerical diff d=f(x6+1)-f(x6) = x6 * -1 + 899 - x6 * -1 + 900 = {
          val x29 = x6 + -900
          val x30 = x6 + -1
        } = -1
        poly: List(-1)
        confirmed iterative loop, d = -1
        Set(("val",(x16,x19)))
        lub_x5_&y(x3,x22,x23)
        lub_x5_&y_val(0,x6,x17)
        numerical diff d=f(x6+1)-f(x6) = x6 + 1 - x6 = {
          val x31 = x15 + 1
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x6,x17)))
        Set(("&x",(x20,x21)), ("&y",(x22,x23)))
      } -> f(x6)=x24, f(x6+1)=x25
      create function def f(n) = x5(x6) {
        val x32 = 0 < x6
        val x33 = if (x32) x16 else 900
        val x34 = Map("val" -> x33)
        val x35 = if (x32) x6 else 0
        val x36 = Map("val" -> x35)
        val x37 = Map("&x" -> x34, "&y" -> x36)
        val x38 = x5_&x_val(x30)
        val x5_&x_val = { x6 => x33 }
        val x5_&x = { x6 => x34 }
        val x39 = x5_&y_val(x30)
        val x5_&y_val = { x6 => x35 }
        val x5_&y = { x6 => x36 }
        val x5 = { x6 => x37 }
      }
      val x40 = Map("&x" -> x3, "&y" -> x1)
    } end loop x5, trip count 900, state x40
    val x41 = Map("&x" -> x3, "&y" -> x1, "&r" -> x3)
# result:
  res: ()
  store: x41
  transformed: x41
  ## sched:
    val x3 = Map("val" -> 0)
    val x1 = Map("val" -> 900)
    val x41 = Map("&x" -> x3, "&y" -> x1, "&r" -> x3)
  ## term:
    Map("&x" -> Map("val" -> 0), "&y" -> Map("val" -> 900), "&r" -> Map("val" -> 0))
# done
