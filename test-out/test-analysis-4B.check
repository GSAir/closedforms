prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map("top" -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,top))
val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
val x10 = ("top",x9)
starting spec loop with x7
val x11 = ("B",x10)
val x12 = x0 + (x9 -> Map())
val x13 = Map("top" -> x12)
val x14 = Map("&x" -> x5, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x15 = Map("val" -> x11)
val x16 = Map("&x" -> x5, "&y" -> x15, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x17 = Map("head" -> 0)
val x18 = x0 + (x9 -> x17)
val x19 = Map("top" -> x18)
val x20 = Map("&x" -> x5, "&y" -> x15, "B" -> x19, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x21 = Map("head" -> 0, "tail" -> (A,top))
val x22 = x0 + (x9 -> x21)
val x23 = Map("top" -> x22)
val x24 = Map("&x" -> x5, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x25 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x26 = Map("val" -> 1)
val x27 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x26, "A" -> x3)
val x28 = x9 < 0
val x29 = fixindex { x9 => 1 }
val x30 = x29 < x9
trip count:
fixindex { x9 => 1 }

lub(x7, x27) = ?
lub_x8(x7,x7,x27)
lub_x8_&x(x5,x5,x15)
lub_x8_&x_val((A,top),(A,top),x11)
val x31 = "A" * -1
val x32 = "top" * -1
val x33 = (x31,x32)
val x34 = x31 + "B"
val x35 = x10 + x32
val x36 = (x34,x35)
(A,top)

(A,top)

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
val x37 = x9 + -1
val x38 = ("top",x37)
val x39 = ("B",x38)
val x40 = 0 < x9
val x41 = if (x40) x39 else (A,top)
val x42 = if (x40) x11 else (A,top)
Set(("val",(x41,x42)))
val x43 = Map("val" -> x41)
val x44 = Map("val" -> x42)
lub_x8_&y("undefined","undefined",x15)
lub_x8_&y_val("undefined","undefined",x11)
checky checky
"undefined"

"undefined"

("B",("top",x9))

recursive fun x8_&y_val (init "undefined")
val x45 = x8_&y_val(x37)
val x46 = if (x40) x45 else "undefined"
Set(("val",(x46,x11)))
val x47 = Map("val" -> x46)
lub_x8_B("undefined","undefined",x23)
lub_x8_B_top("undefined","undefined",x22)
"undefined"

"undefined"

Map() + (x9 -> Map("head" -> 0, "tail" -> (A,top)))

hit update at loop index -- assume collect
val x48 = x9 + 1
val x49 = collect(x48) { x8_B_top_x9 => x21 }
Set(("top",(x49,x49)))
val x50 = Map("top" -> x49)
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x1,x26)
lub_x8_&i_val(0,0,1)
checky checky
0

0

1

integer diff
0

1

1

confirmed iterative loop, d = 1
Set(("val",(x9,x48)))
val x51 = Map("val" -> x9)
val x52 = Map("val" -> x48)
lub_x8_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("&y",(x47,x15)), ("&x",(x43,x44)), ("B",(x50,x50)), ("A",(x3,x3)), ("&i",(x51,x52)))
val x53 = Map("&x" -> x43, "&y" -> x47, "B" -> x50, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x54 = Map("&x" -> x44, "&y" -> x15, "B" -> x50, "&z" -> x5, "&i" -> x52, "A" -> x3)
lub(x7, x27) = x53
starting spec loop with x53
val x55 = x9 < 100
val x56 = x49 + (x9 -> Map())
val x57 = Map("top" -> x56)
val x58 = Map("&x" -> x43, "&y" -> x47, "B" -> x57, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x59 = Map("&x" -> x43, "&y" -> x15, "B" -> x57, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x60 = Map("head" -> x9)
val x61 = x49 + (x9 -> x60)
val x62 = Map("top" -> x61)
val x63 = Map("&x" -> x43, "&y" -> x15, "B" -> x62, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x64 = Map("head" -> x9, "tail" -> x41)
val x65 = x49 + (x9 -> x64)
val x66 = Map("top" -> x65)
val x67 = Map("&x" -> x43, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x68 = Map("&x" -> x15, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x69 = Map("&x" -> x15, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x52, "A" -> x3)
val x70 = 100 < x9
trip count:
100

lub(x7, x69) = ?
lub_x8(x7,x53,x69)
lub_x8_&x(x5,x43,x15)
lub_x8_&x_val((A,top),x41,x11)
val x71 = "B" * -1
val x72 = x9 * -1
val x73 = x72 + 1
val x74 = (x32,x73)
val x75 = (x71,x74)
val x76 = if (x40) x75 else x33
val x77 = x11 + x76
(A,top)

if (0 < x9) ("B",("top",x9 + -1)) else (A,top)

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x41,x42)))
lub_x8_&y("undefined",x47,x15)
lub_x8_&y_val("undefined",x46,x11)
val x78 = x45 * -1
val x79 = if (x40) x78 else "undefined"
val x80 = x11 + x79
"undefined"

if (0 < x9) x8_&y_val(x9 + -1) else "undefined"

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
val x81 = if (x40) x39 else "undefined"
val x82 = if (x40) x11 else "undefined"
Set(("val",(x81,x82)))
val x83 = Map("val" -> x81)
val x84 = Map("val" -> x82)
lub_x8_B("undefined",x50,x66)
lub_x8_B_top("undefined",x49,x65)
"undefined"

collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) }

collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))

hit update at loop index -- assume collect
val x85 = 0 < x8_B_top_x9
val x86 = x8_B_top_x9 + -1
val x87 = ("top",x86)
val x88 = ("B",x87)
val x89 = if (x85) x88 else (A,top)
val x90 = Map("head" -> x8_B_top_x9, "tail" -> x89)
val x91 = collect(x48) { x8_B_top_x9 => x90 }
Set(("top",(x91,x91)))
val x92 = Map("top" -> x91)
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x51,x52)
lub_x8_&i_val(0,x9,x48)
checky checky
0

x9

x9 + 1

integer diff
x9

x9 + 1

1

confirmed iterative loop, d = 1
Set(("val",(x9,x48)))
lub_x8_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("B",(x92,x92)), ("&y",(x83,x84)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&i",(x51,x52)))
val x93 = Map("&x" -> x43, "&y" -> x83, "B" -> x92, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x94 = Map("&x" -> x44, "&y" -> x84, "B" -> x92, "&z" -> x5, "&i" -> x52, "A" -> x3)
lub(x7, x69) = x93
starting spec loop with x93
val x95 = x91 + (x9 -> Map())
val x96 = Map("top" -> x95)
val x97 = Map("&x" -> x43, "&y" -> x83, "B" -> x96, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x98 = Map("&x" -> x43, "&y" -> x15, "B" -> x96, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x99 = x91 + (x9 -> x60)
val x100 = Map("top" -> x99)
val x101 = Map("&x" -> x43, "&y" -> x15, "B" -> x100, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x102 = x91 + (x9 -> x64)
val x103 = Map("top" -> x102)
val x104 = Map("&x" -> x43, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x105 = Map("&x" -> x15, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x51, "A" -> x3)
val x106 = Map("&x" -> x15, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x52, "A" -> x3)
trip count:
100

lub(x7, x106) = ?
lub_x8(x7,x93,x106)
lub_x8_&x(x5,x43,x15)
lub_x8_&x_val((A,top),x41,x11)
(A,top)

if (0 < x9) ("B",("top",x9 + -1)) else (A,top)

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x41,x42)))
lub_x8_&y("undefined",x83,x15)
lub_x8_&y_val("undefined",x81,x11)
val x107 = if (x40) x75 else "undefined"
val x108 = x11 + x107
"undefined"

if (0 < x9) ("B",("top",x9 + -1)) else "undefined"

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x81,x82)))
lub_x8_B("undefined",x92,x103)
lub_x8_B_top("undefined",x91,x102)
"undefined"

collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }

collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))

hit update at loop index -- assume collect
Set(("top",(x91,x91)))
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x51,x52)
lub_x8_&i_val(0,x9,x48)
checky checky
0

x9

x9 + 1

integer diff
x9

x9 + 1

1

confirmed iterative loop, d = 1
Set(("val",(x9,x48)))
lub_x8_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("B",(x92,x92)), ("&y",(x83,x84)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&i",(x51,x52)))
lub(x7, x106) = x93
val x109 = x8_&x_val(x37)
val x8_&x_val = { x9 => x42 }
val x8_&y_val = { x9 => x82 }
val x8_B_top = { x9 => x91 }
val x8_&i_val = { x9 => x48 }
val x8 = { x9 => x94 }
fixindex: 100
val x110 = Map("val" -> (B,(top,99)))
val x111 = collect(100) { x8_B_top_x9 => x90 }
val x112 = Map("top" -> x111)
val x113 = Map("val" -> 100)
val x114 = Map("&x" -> x110, "&y" -> x110, "B" -> x112, "&z" -> x5, "&i" -> x113, "A" -> x3)
*** after loop x114 ***
res: ()
store: x114
transformed: x114
sched:
val x113 = Map("val" -> 100)
val x86 = x8_B_top_x9 + -1
val x87 = ("top",x86)
val x88 = ("B",x87)
val x85 = 0 < x8_B_top_x9
val x89 = if (x85) x88 else (A,top)
val x90 = Map("head" -> x8_B_top_x9, "tail" -> x89)
val x111 = collect(100) { x8_B_top_x9 => x90 }
val x112 = Map("top" -> x111)
val x110 = Map("val" -> (B,(top,99)))
val x5 = Map("val" -> (A,top))
val x3 = Map("top" -> Map())
val x114 = Map("&x" -> x110, "&y" -> x110, "B" -> x112, "&z" -> x5, "&i" -> x113, "A" -> x3)
term:
Map("&i" -> Map("val" -> 100), "B" -> Map("top" -> collect(100) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> (B,(top,99))), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,(top,99))))

----
prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  Assign(y,New(B))
  While(Less(Ref(i),Const(100)),{
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map("top" -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,top))
val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
val x8 = Map("&x" -> x5, "B" -> x3, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x9 = Map("val" -> (B,top))
val x10 = Map("&x" -> x5, "&y" -> x9, "B" -> x3, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x13 = ("top",x12)
starting spec loop with x10
val x14 = Map("head" -> 0)
val x15 = Map("top" -> x14)
val x16 = Map("&x" -> x5, "&y" -> x9, "B" -> x15, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x17 = Map("head" -> 0, "tail" -> (A,top))
val x18 = Map("top" -> x17)
val x19 = Map("&x" -> x5, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x20 = Map("&x" -> x9, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x21 = Map("val" -> 1)
val x22 = Map("&x" -> x9, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x21, "A" -> x3)
val x23 = x12 < 0
val x24 = fixindex { x12 => 1 }
val x25 = x24 < x12
trip count:
fixindex { x12 => 1 }

lub(x10, x22) = ?
lub_x11(x10,x10,x22)
lub_x11_&x(x5,x5,x9)
lub_x11_&x_val((A,top),(A,top),(B,top))
val x26 = "A" * -1
val x27 = "top" * -1
val x28 = (x26,x27)
val x29 = x26 + "B"
val x30 = (x29,0)
(A,top)

(A,top)

(B,top)

hit pair -- assume only 0 case differs (loop peeling)
val x31 = x12 + -1
val x32 = 0 < x12
val x33 = if (x32) (B,top) else (A,top)
Set(("val",(x33,x33)))
val x34 = Map("val" -> x33)
lub_x11_&y(x9,x9,x9)
lub_x11_B(x3,x3,x18)
lub_x11_B_top(Map(),Map(),x17)
lub_x11_B_top_head("undefined","undefined",0)
checky checky
"undefined"

"undefined"

0

recursive fun x11_B_top_head (init "undefined")
val x35 = x11_B_top_head(x31)
val x36 = if (x32) x35 else "undefined"
lub_x11_B_top_tail("undefined","undefined",(A,top))
checky checky
"undefined"

"undefined"

(A,top)

recursive fun x11_B_top_tail (init "undefined")
val x37 = x11_B_top_tail(x31)
val x38 = if (x32) x37 else "undefined"
Set(("head",(x36,0)), ("tail",(x38,(A,top))))
val x39 = Map("head" -> x36, "tail" -> x38)
Set(("top",(x39,x17)))
val x40 = Map("top" -> x39)
lub_x11_&z(x5,x5,x5)
lub_x11_&i(x1,x1,x21)
lub_x11_&i_val(0,0,1)
checky checky
0

0

1

integer diff
0

1

1

confirmed iterative loop, d = 1
val x41 = x12 + 1
Set(("val",(x12,x41)))
val x42 = Map("val" -> x12)
val x43 = Map("val" -> x41)
lub_x11_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("B",(x40,x18)), ("&y",(x9,x9)), ("A",(x3,x3)), ("&i",(x42,x43)), ("&x",(x34,x34)))
val x44 = Map("&x" -> x34, "&y" -> x9, "B" -> x40, "&z" -> x5, "&i" -> x42, "A" -> x3)
val x45 = Map("&x" -> x34, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x43, "A" -> x3)
lub(x10, x22) = x44
starting spec loop with x44
val x46 = x12 < 100
val x47 = Map("head" -> x12, "tail" -> x38)
val x48 = Map("top" -> x47)
val x49 = Map("&x" -> x34, "&y" -> x9, "B" -> x48, "&z" -> x5, "&i" -> x42, "A" -> x3)
val x50 = Map("head" -> x12, "tail" -> x33)
val x51 = Map("top" -> x50)
val x52 = Map("&x" -> x34, "&y" -> x9, "B" -> x51, "&z" -> x5, "&i" -> x42, "A" -> x3)
val x53 = Map("&x" -> x9, "&y" -> x9, "B" -> x51, "&z" -> x5, "&i" -> x42, "A" -> x3)
val x54 = Map("&x" -> x9, "&y" -> x9, "B" -> x51, "&z" -> x5, "&i" -> x43, "A" -> x3)
val x55 = 100 < x12
trip count:
100

lub(x10, x54) = ?
lub_x11(x10,x44,x54)
lub_x11_&x(x5,x34,x9)
lub_x11_&x_val((A,top),x33,(B,top))
val x56 = "B" * -1
val x57 = (x56,x27)
val x58 = if (x32) x57 else x28
val x59 = if (x32) (0,0) else x30
(A,top)

if (0 < x12) (B,top) else (A,top)

(B,top)

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x33,x33)))
lub_x11_&y(x9,x9,x9)
lub_x11_B(x3,x40,x51)
lub_x11_B_top(Map(),x39,x50)
lub_x11_B_top_head("undefined",x36,x12)
checky checky
"undefined"

if (0 < x12) x11_B_top_head(x12 + -1) else "undefined"

x12

val x60 = x35 * -1
val x61 = if (x32) x60 else "undefined"
val x62 = x12 + x61
integer diff
if (0 < x12) x11_B_top_head(x12 + -1) else "undefined"

x12

x12 + if (0 < x12) x11_B_top_head(x12 + -1) * -1 else "undefined"

poly: List()
giving up for term:
x12 + if (0 < x12) x11_B_top_head(x12 + -1) * -1 else "undefined"

recursive fun x11_B_top_head (init "undefined")
lub_x11_B_top_tail("undefined",x38,x33)
checky checky
"undefined"

if (0 < x12) x11_B_top_tail(x12 + -1) else "undefined"

if (0 < x12) (B,top) else (A,top)

val x63 = x37 * -1
val x64 = if (x32) x63 else "undefined"
val x65 = x63 + (B,top)
val x66 = if (x32) x65 else "undefined"
val x67 = x63 + (A,top)
val x68 = if (x32) x67 else "undefined"
integer diff
if (0 < x12) x11_B_top_tail(x12 + -1) else "undefined"

if (0 < x12) (B,top) else (A,top)

if (0 < x12) x11_B_top_tail(x12 + -1) * -1 + (B,top) else "undefined"

poly: List()
giving up for term:
if (0 < x12) x11_B_top_tail(x12 + -1) * -1 + (B,top) else "undefined"

recursive fun x11_B_top_tail (init "undefined")
Set(("head",(x36,x12)), ("tail",(x38,x33)))
Set(("top",(x39,x50)))
lub_x11_&z(x5,x5,x5)
lub_x11_&i(x1,x42,x43)
lub_x11_&i_val(0,x12,x41)
checky checky
0

x12

x12 + 1

val x69 = x12 * -1
val x70 = x69 + 1
integer diff
x12

x12 + 1

1

confirmed iterative loop, d = 1
Set(("val",(x12,x41)))
lub_x11_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("&y",(x9,x9)), ("B",(x40,x51)), ("A",(x3,x3)), ("&i",(x42,x43)), ("&x",(x34,x34)))
val x71 = Map("&x" -> x34, "&y" -> x9, "B" -> x51, "&z" -> x5, "&i" -> x43, "A" -> x3)
lub(x10, x54) = x44
val x72 = x11_&x_val(x31)
val x11_&x_val = { x12 => x33 }
val x11_B_top_head = { x12 => x12 }
val x11_B_top_tail = { x12 => x33 }
val x11_&i_val = { x12 => x41 }
val x11 = { x12 => x71 }
fixindex: 100
val x73 = Map("head" -> 99, "tail" -> (B,top))
val x74 = Map("top" -> x73)
val x75 = Map("val" -> 100)
val x76 = Map("&x" -> x9, "&y" -> x9, "B" -> x74, "&z" -> x5, "&i" -> x75, "A" -> x3)
*** after loop x76 ***
res: ()
store: x76
transformed: x76
sched:
val x75 = Map("val" -> 100)
val x73 = Map("head" -> 99, "tail" -> (B,top))
val x74 = Map("top" -> x73)
val x9 = Map("val" -> (B,top))
val x5 = Map("val" -> (A,top))
val x3 = Map("top" -> Map())
val x76 = Map("&x" -> x9, "&y" -> x9, "B" -> x74, "&z" -> x5, "&i" -> x75, "A" -> x3)
term:
Map("&i" -> Map("val" -> 100), "B" -> Map("top" -> Map("head" -> 99, "tail" -> (B,top))), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> (B,top)), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,top)))

----
prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Put(Ref(x),Const(head),Ref(i))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map("top" -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,top))
val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
val x10 = ("top",x9)
starting spec loop with x7
val x11 = Map("head" -> 0)
val x12 = Map("top" -> x11)
val x13 = Map("&i" -> x1, "A" -> x12, "&z" -> x5, "&x" -> x5)
val x14 = Map("val" -> 1)
val x15 = Map("&i" -> x14, "A" -> x12, "&z" -> x5, "&x" -> x5)
val x16 = x9 < 0
val x17 = fixindex { x9 => 1 }
val x18 = x17 < x9
trip count:
fixindex { x9 => 1 }

lub(x7, x15) = ?
lub_x8(x7,x7,x15)
lub_x8_&i(x1,x1,x14)
lub_x8_&i_val(0,0,1)
checky checky
0

0

1

integer diff
0

1

1

confirmed iterative loop, d = 1
val x19 = x9 + 1
Set(("val",(x9,x19)))
val x20 = Map("val" -> x9)
val x21 = Map("val" -> x19)
lub_x8_A(x3,x3,x12)
lub_x8_A_top(Map(),Map(),x11)
lub_x8_A_top_head("undefined","undefined",0)
checky checky
"undefined"

"undefined"

0

recursive fun x8_A_top_head (init "undefined")
val x22 = x9 + -1
val x23 = x8_A_top_head(x22)
val x24 = 0 < x9
val x25 = if (x24) x23 else "undefined"
Set(("head",(x25,0)))
val x26 = Map("head" -> x25)
Set(("top",(x26,x11)))
val x27 = Map("top" -> x26)
lub_x8_&z(x5,x5,x5)
lub_x8_&x(x5,x5,x5)
Set(("&i",(x20,x21)), ("A",(x27,x12)), ("&z",(x5,x5)), ("&x",(x5,x5)))
val x28 = Map("&i" -> x20, "A" -> x27, "&z" -> x5, "&x" -> x5)
val x29 = Map("&i" -> x21, "A" -> x12, "&z" -> x5, "&x" -> x5)
lub(x7, x15) = x28
starting spec loop with x28
val x30 = x9 < 100
val x31 = Map("head" -> x9)
val x32 = Map("top" -> x31)
val x33 = Map("&i" -> x20, "A" -> x32, "&z" -> x5, "&x" -> x5)
val x34 = Map("&i" -> x21, "A" -> x32, "&z" -> x5, "&x" -> x5)
val x35 = 100 < x9
trip count:
100

lub(x7, x34) = ?
lub_x8(x7,x28,x34)
lub_x8_&i(x1,x20,x21)
lub_x8_&i_val(0,x9,x19)
checky checky
0

x9

x9 + 1

val x36 = x9 * -1
val x37 = x36 + 1
integer diff
x9

x9 + 1

1

confirmed iterative loop, d = 1
Set(("val",(x9,x19)))
lub_x8_A(x3,x27,x32)
lub_x8_A_top(Map(),x26,x31)
lub_x8_A_top_head("undefined",x25,x9)
checky checky
"undefined"

if (0 < x9) x8_A_top_head(x9 + -1) else "undefined"

x9

val x38 = x23 * -1
val x39 = if (x24) x38 else "undefined"
val x40 = x9 + x39
integer diff
if (0 < x9) x8_A_top_head(x9 + -1) else "undefined"

x9

x9 + if (0 < x9) x8_A_top_head(x9 + -1) * -1 else "undefined"

poly: List()
giving up for term:
x9 + if (0 < x9) x8_A_top_head(x9 + -1) * -1 else "undefined"

recursive fun x8_A_top_head (init "undefined")
Set(("head",(x25,x9)))
Set(("top",(x26,x31)))
lub_x8_&z(x5,x5,x5)
lub_x8_&x(x5,x5,x5)
Set(("&i",(x20,x21)), ("A",(x27,x32)), ("&z",(x5,x5)), ("&x",(x5,x5)))
lub(x7, x34) = x28
val x8_&i_val = { x9 => x19 }
val x8_A_top_head = { x9 => x9 }
val x8 = { x9 => x34 }
fixindex: 100
val x41 = Map("val" -> 100)
val x42 = Map("head" -> 99)
val x43 = Map("top" -> x42)
val x44 = Map("&i" -> x41, "A" -> x43, "&z" -> x5, "&x" -> x5)
*** after loop x44 ***
res: ()
store: x44
transformed: x44
sched:
val x42 = Map("head" -> 99)
val x43 = Map("top" -> x42)
val x41 = Map("val" -> 100)
val x5 = Map("val" -> (A,top))
val x44 = Map("&i" -> x41, "A" -> x43, "&z" -> x5, "&x" -> x5)
term:
Map("&i" -> Map("val" -> 100), "A" -> Map("top" -> Map("head" -> 99)), "&z" -> Map("val" -> (A,top)), "&x" -> Map("val" -> (A,top)))

----
