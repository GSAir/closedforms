prog: {
  Assign(x,Const(0))
  Assign(y,Const(10))
  Assign(a,New(A))
  While(Less(Ref(x),Const(100)),{
    Put(Ref(a),Ref(x),Times(Ref(x),Const(2)))
    Assign(x,Plus(Ref(x),Const(1)))
    Assign(y,Plus(Ref(y),Const(1)))
  })
  Assign(r,Ref(a))
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&x" -> x1)
val x3 = Map("val" -> 10)
val x4 = Map("&x" -> x1, "&y" -> x3)
val x5 = Map("top" -> Map())
val x6 = Map("&x" -> x1, "&y" -> x3, "A" -> x5)
val x7 = Map("val" -> (A,top))
val x8 = Map("&x" -> x1, "&y" -> x3, "A" -> x5, "&a" -> x7)
val x11 = ("top",x10)
starting spec loop with x8
val x12 = Map(0 -> 0)
val x13 = Map("top" -> x12)
val x14 = Map("&x" -> x1, "&y" -> x3, "A" -> x13, "&a" -> x7)
val x15 = Map("val" -> 1)
val x16 = Map("&x" -> x15, "&y" -> x3, "A" -> x13, "&a" -> x7)
val x17 = Map("val" -> 11)
val x18 = Map("&x" -> x15, "&y" -> x17, "A" -> x13, "&a" -> x7)
lub(x8, x18) = ?
lub_x9(x8,x8,x18)
lub_x9_&x(x1,x1,x15)
lub_x9_&x_val(0,0,1)
0

1

1

confirmed iterative loop, d = 1
val x19 = x10 + -1
Set(("val",(x19,x10)))
val x20 = Map("val" -> x19)
val x21 = Map("val" -> x10)
lub_x9_&y(x3,x3,x17)
lub_x9_&y_val(10,10,11)
10

11

1

confirmed iterative loop, d = 1
val x22 = x10 + 9
val x23 = x10 + 10
Set(("val",(x22,x23)))
val x24 = Map("val" -> x22)
val x25 = Map("val" -> x23)
lub_x9_A(x5,x5,x13)
lub_x9_A_top(Map(),Map(),x12)
lub_x9_A_top_0("undefined","undefined",0)
recursive fun x9_A_top_0
val x26 = x9_A_top_0(x19)
val x27 = 0 < x10
val x28 = if (x27) x26 else "undefined"
val x29 = x9_A_top_0(x10)
val x30 = if (x27) x29 else "undefined"
Set((0,(x28,x30)))
val x31 = Map(0 -> x28)
val x32 = Map(0 -> x30)
Set(("top",(x31,x32)))
val x33 = Map("top" -> x31)
val x34 = Map("top" -> x32)
lub_x9_&a(x7,x7,x7)
Set(("&x",(x20,x21)), ("&y",(x24,x25)), ("A",(x33,x34)), ("&a",(x7,x7)))
val x35 = Map("&x" -> x20, "&y" -> x24, "A" -> x33, "&a" -> x7)
val x36 = Map("&x" -> x21, "&y" -> x25, "A" -> x34, "&a" -> x7)
lub(x8, x18) = x35
starting spec loop with x35
val x37 = x10 < 101
val x38 = x10 * 2
val x39 = x38 + -2
val x40 = x31 + (x19 -> x39)
val x41 = Map("top" -> x40)
val x42 = Map("&x" -> x20, "&y" -> x24, "A" -> x41, "&a" -> x7)
val x43 = Map("&x" -> x21, "&y" -> x24, "A" -> x41, "&a" -> x7)
val x44 = Map("&x" -> x21, "&y" -> x25, "A" -> x41, "&a" -> x7)
lub(x8, x44) = ?
lub_x9(x8,x35,x44)
lub_x9_&x(x1,x20,x21)
lub_x9_&x_val(0,x19,x10)
val x45 = x10 * -1
val x46 = x45 + 1
x10 + -1

x10

1

confirmed iterative loop, d = 1
Set(("val",(x19,x10)))
lub_x9_&y(x3,x24,x25)
lub_x9_&y_val(10,x22,x23)
val x47 = x45 + -9
x10 + 9

x10 + 10

1

confirmed iterative loop, d = 1
Set(("val",(x22,x23)))
lub_x9_A(x5,x33,x41)
lub_x9_A_top(Map(),x31,x40)
val x48 = x31 * -1
val x49 = x40 + x48
Map(0 -> if (0 < x10) x9_A_top_0(x10 + -1) else "undefined")

Map(0 -> if (0 < x10) x9_A_top_0(x10 + -1) else "undefined") + (x10 + -1 -> x10 * 2 + -2)

Map(0 -> if (0 < x10) x9_A_top_0(x10 + -1) else "undefined") + (x10 + -1 -> x10 * 2 + -2) + Map(0 -> if (0 < x10) x9_A_top_0(x10 + -1) else "undefined") * -1

poly: List()
giving up: deriv List()
recursive fun x9_A_top
val x50 = x9_A_top(x19)
val x51 = if (x27) x50 else Map()
val x52 = x9_A_top(x10)
val x53 = if (x27) x52 else Map()
Set(("top",(x51,x53)))
val x54 = Map("top" -> x51)
val x55 = Map("top" -> x53)
lub_x9_&a(x7,x7,x7)
Set(("&x",(x20,x21)), ("&y",(x24,x25)), ("A",(x54,x55)), ("&a",(x7,x7)))
val x56 = Map("&x" -> x20, "&y" -> x24, "A" -> x54, "&a" -> x7)
val x57 = Map("&x" -> x21, "&y" -> x25, "A" -> x55, "&a" -> x7)
lub(x8, x44) = x56
starting spec loop with x56
val x58 = x50 + (x19 -> x39)
val x59 = x0 + (x19 -> x39)
val x60 = if (x27) x58 else x59
val x61 = Map("top" -> x60)
val x62 = Map("&x" -> x20, "&y" -> x24, "A" -> x61, "&a" -> x7)
val x63 = Map("&x" -> x21, "&y" -> x24, "A" -> x61, "&a" -> x7)
val x64 = Map("&x" -> x21, "&y" -> x25, "A" -> x61, "&a" -> x7)
lub(x8, x64) = ?
lub_x9(x8,x56,x64)
lub_x9_&x(x1,x20,x21)
lub_x9_&x_val(0,x19,x10)
x10 + -1

x10

1

confirmed iterative loop, d = 1
Set(("val",(x19,x10)))
lub_x9_&y(x3,x24,x25)
lub_x9_&y_val(10,x22,x23)
x10 + 9

x10 + 10

1

confirmed iterative loop, d = 1
Set(("val",(x22,x23)))
lub_x9_A(x5,x54,x61)
lub_x9_A_top(Map(),x51,x60)
val x65 = x50 * -1
val x66 = Map() * -1
val x67 = if (x27) x65 else x66
val x68 = x58 + x67
val x69 = x59 + x67
val x70 = x58 + x65
val x71 = x59 + x66
val x72 = if (x27) x70 else x71
if (0 < x10) x9_A_top(x10 + -1) else Map()

if (0 < x10) x9_A_top(x10 + -1) + (x10 + -1 -> x10 * 2 + -2) else Map() + (x10 + -1 -> x10 * 2 + -2)

if (0 < x10) x9_A_top(x10 + -1) + (x10 + -1 -> x10 * 2 + -2) + x9_A_top(x10 + -1) * -1 else Map() + (x10 + -1 -> x10 * 2 + -2) + Map() * -1

poly: List()
giving up: deriv List()
recursive fun x9_A_top
Set(("top",(x51,x53)))
lub_x9_&a(x7,x7,x7)
Set(("&x",(x20,x21)), ("&y",(x24,x25)), ("A",(x54,x55)), ("&a",(x7,x7)))
lub(x8, x64) = x56
val x9_&x_val = { x10 => x10 }
val x9_&y_val = { x10 => x23 }
val x9_A_top = { x10 => x60 }
val x73 = Map("top" -> x52)
val x74 = Map("&x" -> x21, "&y" -> x25, "A" -> x73, "&a" -> x7)
val x9 = { x10 => x74 }
fixindex: 100
val x75 = Map("val" -> 100)
val x76 = Map("val" -> 110)
val x77 = x9_A_top(100)
val x78 = Map("top" -> x77)
val x79 = Map("&x" -> x75, "&y" -> x76, "A" -> x78, "&a" -> x7)
*** after loop x79 ***
val x80 = Map("&x" -> x75, "&y" -> x76, "&a" -> x7, "&r" -> x7, "A" -> x78)
res: ()
store: x80
transformed: x80
sched:
val x38 = x10 * 2
val x39 = x38 + -2
val x19 = x10 + -1
val x0 = Map()
val x59 = x0 + (x19 -> x39)
val x27 = 0 < x10
val x50 = x9_A_top(x19)
val x58 = x50 + (x19 -> x39)
val x60 = if (x27) x58 else x59
val x9_A_top = { x10 => x60 }
val x77 = x9_A_top(100)
val x78 = Map("top" -> x77)
val x76 = Map("val" -> 110)
val x75 = Map("val" -> 100)
val x7 = Map("val" -> (A,top))
val x80 = Map("&x" -> x75, "&y" -> x76, "&a" -> x7, "&r" -> x7, "A" -> x78)
term:
val x9_A_top = { x10 => if (0 < x10) x9_A_top(x10 + -1) + (x10 + -1 -> x10 * 2 + -2) else Map() + (x10 + -1 -> x10 * 2 + -2) }
Map("&a" -> Map("val" -> (A,top)), "A" -> Map("top" -> x9_A_top(100)), "&x" -> Map("val" -> 100), "&y" -> Map("val" -> 110), "&r" -> Map("val" -> (A,top)))

----
