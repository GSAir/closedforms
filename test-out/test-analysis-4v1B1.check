prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
  Assign(s,Const(0))
  Assign(i,Get(Ref(x),Const(head)))
  Assign(x,Get(Ref(x),Const(tail)))
  Assign(s,Plus(Ref(s),Ref(i)))
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map("top" -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,top))
val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
val x10 = ("top",x9)
starting spec loop with x7
val x11 = ("B",x10)
val x12 = x0 + (x9 -> Map())
val x13 = Map("top" -> x12)
val x14 = Map("&x" -> x5, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x15 = Map("val" -> x11)
val x16 = Map("&x" -> x5, "&y" -> x15, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x17 = Map("head" -> 0)
val x18 = x0 + (x9 -> x17)
val x19 = Map("top" -> x18)
val x20 = Map("&x" -> x5, "&y" -> x15, "B" -> x19, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x21 = Map("head" -> 0, "tail" -> (A,top))
val x22 = x0 + (x9 -> x21)
val x23 = Map("top" -> x22)
val x24 = Map("&x" -> x5, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x25 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
val x26 = Map("val" -> 1)
val x27 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x26, "A" -> x3)
lub(x7, x27) = ?
lub_x8(x7,x7,x27)
lub_x8_&x(x5,x5,x15)
lub_x8_&x_val((A,top),(A,top),x11)
(A,top)

(A,top)

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
val x28 = x9 + -1
val x29 = ("top",x28)
val x30 = ("B",x29)
val x31 = 0 < x9
val x32 = if (x31) x30 else (A,top)
val x33 = if (x31) x11 else (A,top)
Set(("val",(x32,x33)))
val x34 = Map("val" -> x32)
val x35 = Map("val" -> x33)
lub_x8_&y("undefined","undefined",x15)
lub_x8_&y_val("undefined","undefined",x11)
"undefined"

"undefined"

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
val x36 = if (x31) x30 else "undefined"
val x37 = if (x31) x11 else "undefined"
Set(("val",(x36,x37)))
val x38 = Map("val" -> x36)
val x39 = Map("val" -> x37)
lub_x8_B("undefined","undefined",x23)
lub_x8_B_top("undefined","undefined",x22)
recursive fun x8_B_top
val x40 = x8_B_top(x28)
val x41 = if (x31) x40 else "undefined"
val x42 = x8_B_top(x9)
val x43 = if (x31) x42 else "undefined"
Set(("top",(x41,x43)))
val x44 = Map("top" -> x41)
val x45 = Map("top" -> x43)
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x1,x26)
lub_x8_&i_val(0,0,1)
0

1

1

confirmed iterative loop, d = 1
Set(("val",(x28,x9)))
val x46 = Map("val" -> x28)
val x47 = Map("val" -> x9)
lub_x8_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("&i",(x46,x47)), ("B",(x44,x45)), ("&y",(x38,x39)), ("A",(x3,x3)), ("&x",(x34,x35)))
val x48 = Map("&x" -> x34, "&y" -> x38, "B" -> x44, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x49 = Map("&x" -> x35, "&y" -> x39, "B" -> x45, "&z" -> x5, "&i" -> x47, "A" -> x3)
lub(x7, x27) = x48
starting spec loop with x48
val x50 = x9 < 101
val x51 = x40 + (x9 -> Map())
val x52 = if (x31) x51 else x12
val x53 = Map("top" -> x52)
val x54 = Map("&x" -> x34, "&y" -> x38, "B" -> x53, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x55 = Map("&x" -> x34, "&y" -> x15, "B" -> x53, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x56 = x40(x9)
val x57 = Map("head" -> x28)
val x58 = x40 + (x9 -> x57)
val x59 = x0 + (x9 -> x57)
val x60 = if (x31) x58 else x59
val x61 = Map("top" -> x60)
val x62 = Map("&x" -> x34, "&y" -> x15, "B" -> x61, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x63 = Map("head" -> x28, "tail" -> x32)
val x64 = x40 + (x9 -> x63)
val x65 = x0 + (x9 -> x63)
val x66 = Map("head" -> x28, "tail" -> x30)
val x67 = x40 + (x9 -> x66)
val x68 = Map("head" -> x28, "tail" -> (A,top))
val x69 = x0 + (x9 -> x68)
val x70 = if (x31) x67 else x69
val x71 = Map("top" -> x70)
val x72 = Map("&x" -> x34, "&y" -> x15, "B" -> x71, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x73 = Map("&x" -> x15, "&y" -> x15, "B" -> x71, "&z" -> x5, "&i" -> x46, "A" -> x3)
val x74 = Map("&x" -> x15, "&y" -> x15, "B" -> x71, "&z" -> x5, "&i" -> x47, "A" -> x3)
lub(x7, x74) = ?
lub_x8(x7,x48,x74)
lub_x8_&x(x5,x34,x15)
lub_x8_&x_val((A,top),x32,x11)
(A,top)

if (0 < x9) ("B",("top",x9 + -1)) else (A,top)

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x32,x33)))
lub_x8_&y("undefined",x38,x15)
lub_x8_&y_val("undefined",x36,x11)
"undefined"

if (0 < x9) ("B",("top",x9 + -1)) else "undefined"

("B",("top",x9))

hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x36,x37)))
lub_x8_B("undefined",x44,x71)
lub_x8_B_top("undefined",x41,x70)
val x75 = x40 * -1
val x76 = if (x31) x75 else "undefined"
val x77 = x67 + x76
val x78 = x69 + x76
val x79 = x67 + x75
val x80 = if (x31) x79 else "undefined"
if (0 < x9) x8_B_top(x9 + -1) else "undefined"

if (0 < x9) x8_B_top(x9 + -1) + (x9 -> Map("head" -> x9 + -1, "tail" -> ("B",("top",x9 + -1)))) else Map() + (x9 -> Map("head" -> x9 + -1, "tail" -> (A,top)))

if (0 < x9) x8_B_top(x9 + -1) + (x9 -> Map("head" -> x9 + -1, "tail" -> ("B",("top",x9 + -1)))) + x8_B_top(x9 + -1) * -1 else "undefined"

poly: List()
giving up: deriv List()
recursive fun x8_B_top
Set(("top",(x41,x43)))
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x46,x47)
lub_x8_&i_val(0,x28,x9)
val x81 = x9 * -1
val x82 = x81 + 1
x9 + -1

x9

1

confirmed iterative loop, d = 1
Set(("val",(x28,x9)))
lub_x8_A(x3,x3,x3)
Set(("&z",(x5,x5)), ("&i",(x46,x47)), ("B",(x44,x45)), ("&y",(x38,x39)), ("A",(x3,x3)), ("&x",(x34,x35)))
lub(x7, x74) = x48
val x8_&x_val = { x9 => x11 }
val x8_&y_val = { x9 => x11 }
val x8_B_top = { x9 => x70 }
val x83 = Map("top" -> x42)
val x8_&i_val = { x9 => x9 }
val x84 = Map("&x" -> x15, "&y" -> x15, "B" -> x83, "&z" -> x5, "&i" -> x47, "A" -> x3)
val x8 = { x9 => x84 }
fixindex: 100
val x85 = Map("val" -> (B,(top,100)))
val x86 = x8_B_top(100)
val x87 = Map("top" -> x86)
val x88 = Map("val" -> 100)
val x89 = Map("&x" -> x85, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x88, "A" -> x3)
*** after loop x89 ***
val x90 = Map("&x" -> x85, "&s" -> x1, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x88, "A" -> x3)
val x91 = x86(100)
val x92 = x91("head")
val x93 = Map("val" -> x92)
val x94 = Map("&x" -> x85, "&s" -> x1, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x93, "A" -> x3)
val x95 = x91("tail")
val x96 = Map("val" -> x95)
val x97 = Map("&x" -> x96, "&s" -> x1, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x93, "A" -> x3)
val x98 = Map("&x" -> x96, "&s" -> x93, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x93, "A" -> x3)
res: ()
store: x98
transformed: x98
sched:
val x28 = x9 + -1
val x68 = Map("head" -> x28, "tail" -> (A,top))
val x0 = Map()
val x69 = x0 + (x9 -> x68)
val x29 = ("top",x28)
val x30 = ("B",x29)
val x66 = Map("head" -> x28, "tail" -> x30)
val x31 = 0 < x9
val x40 = x8_B_top(x28)
val x67 = x40 + (x9 -> x66)
val x70 = if (x31) x67 else x69
val x8_B_top = { x9 => x70 }
val x86 = x8_B_top(100)
val x91 = x86(100)
val x95 = x91("tail")
val x96 = Map("val" -> x95)
val x92 = x91("head")
val x93 = Map("val" -> x92)
val x87 = Map("top" -> x86)
val x85 = Map("val" -> (B,(top,100)))
val x5 = Map("val" -> (A,top))
val x3 = Map("top" -> Map())
val x98 = Map("&x" -> x96, "&s" -> x93, "&y" -> x85, "B" -> x87, "&z" -> x5, "&i" -> x93, "A" -> x3)
term:
val x8_B_top = { x9 => if (0 < x9) x8_B_top(x9 + -1) + (x9 -> Map("head" -> x9 + -1, "tail" -> ("B",("top",x9 + -1)))) else Map() + (x9 -> Map("head" -> x9 + -1, "tail" -> (A,top))) }
Map("&i" -> Map("val" -> x8_B_top(100)(100)("head")), "B" -> Map("top" -> x8_B_top(100)), "&s" -> Map("val" -> x8_B_top(100)(100)("head")), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> x8_B_top(100)(100)("tail")), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,(top,100))))

----
