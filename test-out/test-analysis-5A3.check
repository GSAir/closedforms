# prog: {
    Assign(x,Const(0))
    Assign(a,New(A))
    Put(Ref(a),Const(field),Const(7))
    While(Less(Ref(x),Const(100)),{
      Put(Ref(a),Const(field),Const(7))
      Assign(x,Plus(Ref(x),Const(1)))
    })
    Assign(r,Ref(a))
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 0)
  val x2 = Map("&x" -> x1)
  val x3 = Map("top" -> Map())
  val x4 = Map("&x" -> x1, "A" -> x3)
  val x5 = Map("val" -> (A,top))
  val x6 = Map("&x" -> x1, "A" -> x3, "&a" -> x5)
  val x7 = Map("field" -> 7)
  val x8 = Map("top" -> x7)
  val x9 = Map("&x" -> x1, "A" -> x8, "&a" -> x5)
  val x12 = ("top",x11)
  begin loop f(n)=x10(x11), iteration vector x12 {
    initial assumption: f(0)=x9, f(x11)=x9, f(x11+1)=x9
    ## iteration 0, f(0)=x9, f(x11)=x9
      val x13 = Map("val" -> 1)
      val x14 = Map("&x" -> x13, "A" -> x8, "&a" -> x5)
      val x15 = x11 < 0
      val x16 = fixindex { x11 => 1 }
      val x17 = x16 < x11
      trip count: fixindex { x11 => 1 }
      approx f(0)=x9, f(x11)=x9, f(x11+1)=x14) = {
        lub_x10(x9,x9,x14)
        lub_x10_&x(x1,x1,x13)
        lub_x10_&x_val(0,0,1)
        numerical diff d=f(x11+1)-f(x11) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        val x18 = x11 + 1
        Set(("val",(x11,x18)))
        val x19 = Map("val" -> x11)
        val x20 = Map("val" -> x18)
        lub_x10_A(x8,x8,x8)
        lub_x10_&a(x5,x5,x5)
        Set(("&x",(x19,x20)), ("A",(x8,x8)), ("&a",(x5,x5)))
        val x21 = Map("&x" -> x19, "A" -> x8, "&a" -> x5)
        val x22 = Map("&x" -> x20, "A" -> x8, "&a" -> x5)
      } -> f(x11)=x21, f(x11+1)=x22
    ## iteration 1, f(0)=x9, f(x11)=x21
      val x23 = x11 < 100
      val x24 = 100 < x11
      trip count: 100
      approx f(0)=x9, f(x11)=x21, f(x11+1)=x22) = {
        lub_x10(x9,x21,x22)
        lub_x10_&x(x1,x19,x20)
        lub_x10_&x_val(0,x11,x18)
        numerical diff d=f(x11+1)-f(x11) = x11 + 1 - x11 = {
          val x25 = x11 * -1
          val x26 = x25 + 1
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x11,x18)))
        lub_x10_A(x8,x8,x8)
        lub_x10_&a(x5,x5,x5)
        Set(("&x",(x19,x20)), ("A",(x8,x8)), ("&a",(x5,x5)))
      } -> f(x11)=x21, f(x11+1)=x22
      create function def f(n) = x10(x11) {
        val x27 = 0 < x11
        val x28 = x11 + -1
        val x29 = if (x27) x11 else 0
        val x30 = Map("val" -> x29)
        val x31 = Map("&x" -> x30, "A" -> x8, "&a" -> x5)
        val x32 = x10_&x_val(x28)
        val x10_&x_val = { x11 => x29 }
        val x10_&x = { x11 => x30 }
        val x10_A_top_field = { x11 => 7 }
        val x10_A_top = { x11 => x7 }
        val x10_A = { x11 => x8 }
        val x10_&a_val = { x11 => (A,top) }
        val x10_&a = { x11 => x5 }
        val x10 = { x11 => x31 }
      }
      val x33 = Map("val" -> 100)
      val x34 = Map("&x" -> x33, "A" -> x8, "&a" -> x5)
    } end loop x10, trip count 100, state x34
    val x35 = Map("&x" -> x33, "A" -> x8, "&a" -> x5, "&r" -> x5)
# result:
  res: ()
  store: x35
  transformed: x35
  ## sched:
    val x33 = Map("val" -> 100)
    val x7 = Map("field" -> 7)
    val x8 = Map("top" -> x7)
    val x5 = Map("val" -> (A,top))
    val x35 = Map("&x" -> x33, "A" -> x8, "&a" -> x5, "&r" -> x5)
  ## term:
    Map("&x" -> Map("val" -> 100), "A" -> Map("top" -> Map("field" -> 7)), "&a" -> Map("val" -> (A,top)), "&r" -> Map("val" -> (A,top)))
# done
