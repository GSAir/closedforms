# prog: {
    Assign(x,Const(0))
    Assign(y,Const(10))
    Assign(a,New(A))
    While(Less(Ref(x),Const(100)),{
      Put(Ref(a),Ref(x),Times(Ref(x),Const(2)))
      Assign(x,Plus(Ref(x),Const(1)))
      Assign(y,Plus(Ref(y),Const(1)))
    })
    Assign(r,Ref(a))
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 0)
  val x2 = Map("&x" -> x1)
  val x3 = Map("val" -> 10)
  val x4 = Map("&x" -> x1, "&y" -> x3)
  val x5 = Map("top" -> Map())
  val x6 = Map("&x" -> x1, "&y" -> x3, "A" -> x5)
  val x7 = Map("val" -> (A,top))
  val x8 = Map("&x" -> x1, "&y" -> x3, "A" -> x5, "&a" -> x7)
  val x11 = ("top",x10)
  begin loop f(n)=x9(x10), iteration vector x11 {
    initial assumption: f(0)=x8, f(x10)=x8, f(x10+1)=x8
    ## iteration 0, f(0)=x8, f(x10)=x8
      val x12 = Map(0 -> 0)
      val x13 = Map("top" -> x12)
      val x14 = Map("&x" -> x1, "&y" -> x3, "A" -> x13, "&a" -> x7)
      val x15 = Map("val" -> 1)
      val x16 = Map("&x" -> x15, "&y" -> x3, "A" -> x13, "&a" -> x7)
      val x17 = Map("val" -> 11)
      val x18 = Map("&x" -> x15, "&y" -> x17, "A" -> x13, "&a" -> x7)
      val x19 = x10 < 0
      val x20 = fixindex { x10 => 1 }
      val x21 = x20 < x10
      trip count: fixindex { x10 => 1 }
      approx f(0)=x8, f(x10)=x8, f(x10+1)=x18) = {
        lub_x9(x8,x8,x18)
        lub_x9_&x(x1,x1,x15)
        lub_x9_&x_val(0,0,1)
        numerical diff d=f(x10+1)-f(x10) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        val x22 = x10 + 1
        Set(("val",(x10,x22)))
        val x23 = Map("val" -> x10)
        val x24 = Map("val" -> x22)
        lub_x9_&y(x3,x3,x17)
        lub_x9_&y_val(10,10,11)
        numerical diff d=f(x10+1)-f(x10) = 11 - 10 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        val x25 = x10 + 10
        val x26 = x10 + 11
        Set(("val",(x25,x26)))
        val x27 = Map("val" -> x25)
        val x28 = Map("val" -> x26)
        lub_x9_A(x5,x5,x13)
        lub_x9_A_top(Map(),Map(),x12)
        lub_x9_A_top_0("undefined","undefined",0)
        numerical diff d=f(x10+1)-f(x10) = 0 - "undefined" = {
        } = "undefined"
        recursive fun x9_A_top_0 (init "undefined")
        val x29 = x9_A_top_0(x10)
        Set((0,(x29,0)))
        val x30 = Map(0 -> x29)
        Set(("top",(x30,x12)))
        val x31 = Map("top" -> x30)
        lub_x9_&a(x7,x7,x7)
        Set(("&x",(x23,x24)), ("&y",(x27,x28)), ("A",(x31,x13)), ("&a",(x7,x7)))
        val x32 = Map("&x" -> x23, "&y" -> x27, "A" -> x31, "&a" -> x7)
        val x33 = Map("&x" -> x24, "&y" -> x28, "A" -> x13, "&a" -> x7)
      } -> f(x10)=x32, f(x10+1)=x33
    ## iteration 1, f(0)=x8, f(x10)=x32
      val x34 = x10 < 100
      val x35 = x10 * 2
      val x36 = x30 + (x10 -> x35)
      val x37 = Map("top" -> x36)
      val x38 = Map("&x" -> x23, "&y" -> x27, "A" -> x37, "&a" -> x7)
      val x39 = Map("&x" -> x24, "&y" -> x27, "A" -> x37, "&a" -> x7)
      val x40 = Map("&x" -> x24, "&y" -> x28, "A" -> x37, "&a" -> x7)
      val x41 = 100 < x10
      trip count: 100
      approx f(0)=x8, f(x10)=x32, f(x10+1)=x40) = {
        lub_x9(x8,x32,x40)
        lub_x9_&x(x1,x23,x24)
        lub_x9_&x_val(0,x10,x22)
        numerical diff d=f(x10+1)-f(x10) = x10 + 1 - x10 = {
          val x42 = x10 * -1
          val x43 = x42 + 1
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x10,x22)))
        lub_x9_&y(x3,x27,x28)
        lub_x9_&y_val(10,x25,x26)
        numerical diff d=f(x10+1)-f(x10) = x10 + 11 - x10 + 10 = {
          val x44 = x42 + -10
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x25,x26)))
        lub_x9_A(x5,x31,x37)
        lub_x9_A_top(Map(),x30,x36)
        Map()
        Map(0 -> x9_A_top_0(x10))
        Map(0 -> x9_A_top_0(x10)) + (x10 -> x10 * 2)
        hit update at loop index -- assume collect
        val x45 = x9_A_top_x10 * 2
        val x46 = collect(x22) { x9_A_top_x10 => x45 }
        Set(("top",(x46,x46)))
        val x47 = Map("top" -> x46)
        lub_x9_&a(x7,x7,x7)
        Set(("&x",(x23,x24)), ("&y",(x27,x28)), ("A",(x47,x47)), ("&a",(x7,x7)))
        val x48 = Map("&x" -> x23, "&y" -> x27, "A" -> x47, "&a" -> x7)
        val x49 = Map("&x" -> x24, "&y" -> x28, "A" -> x47, "&a" -> x7)
      } -> f(x10)=x48, f(x10+1)=x49
    ## iteration 2, f(0)=x8, f(x10)=x48
      val x50 = x46 + (x10 -> x35)
      val x51 = Map("top" -> x50)
      val x52 = Map("&x" -> x23, "&y" -> x27, "A" -> x51, "&a" -> x7)
      val x53 = Map("&x" -> x24, "&y" -> x27, "A" -> x51, "&a" -> x7)
      val x54 = Map("&x" -> x24, "&y" -> x28, "A" -> x51, "&a" -> x7)
      trip count: 100
      approx f(0)=x8, f(x10)=x48, f(x10+1)=x54) = {
        lub_x9(x8,x48,x54)
        lub_x9_&x(x1,x23,x24)
        lub_x9_&x_val(0,x10,x22)
        numerical diff d=f(x10+1)-f(x10) = x10 + 1 - x10 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x10,x22)))
        lub_x9_&y(x3,x27,x28)
        lub_x9_&y_val(10,x25,x26)
        numerical diff d=f(x10+1)-f(x10) = x10 + 11 - x10 + 10 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x25,x26)))
        lub_x9_A(x5,x47,x51)
        lub_x9_A_top(Map(),x46,x50)
        Map()
        collect(x10 + 1) { x9_A_top_x10 => x9_A_top_x10 * 2 }
        collect(x10 + 1) { x9_A_top_x10 => x9_A_top_x10 * 2 } + (x10 -> x10 * 2)
        hit update at loop index -- assume collect
        Set(("top",(x46,x46)))
        lub_x9_&a(x7,x7,x7)
        Set(("&x",(x23,x24)), ("&y",(x27,x28)), ("A",(x47,x47)), ("&a",(x7,x7)))
      } -> f(x10)=x48, f(x10+1)=x49
      create function def f(n) = x9(x10) {
        val x55 = 0 < x10
        val x56 = x10 + -1
        val x57 = collect(x10) { x9_A_top_x10 => x45 }
        val x58 = Map("top" -> x57)
        val x59 = Map("&x" -> x23, "&y" -> x27, "A" -> x58, "&a" -> x7)
        val x60 = if (x55) x10 else 0
        val x61 = Map("val" -> x60)
        val x62 = if (x55) x25 else 10
        val x63 = Map("val" -> x62)
        val x64 = if (x55) x57 else Map()
        val x65 = Map("top" -> x64)
        val x66 = Map("&x" -> x61, "&y" -> x63, "A" -> x65, "&a" -> x7)
        val x67 = x9_&x_val(x56)
        val x9_&x_val = { x10 => x60 }
        val x9_&x = { x10 => x61 }
        val x68 = x9_&y_val(x56)
        val x9_&y_val = { x10 => x62 }
        val x9_&y = { x10 => x63 }
        val x69 = x9_A_top(x56)
        val x9_A_top = { x10 => x64 }
        val x9_A = { x10 => x65 }
        val x9_&a_val = { x10 => (A,top) }
        val x9_&a = { x10 => x7 }
        val x9 = { x10 => x66 }
      }
      val x70 = Map("val" -> 100)
      val x71 = Map("val" -> 110)
      val x72 = collect(100) { x9_A_top_x10 => x45 }
      val x73 = Map("top" -> x72)
      val x74 = Map("&x" -> x70, "&y" -> x71, "A" -> x73, "&a" -> x7)
    } end loop x9, trip count 100, state x74
    val x75 = Map("&x" -> x70, "&y" -> x71, "&a" -> x7, "&r" -> x7, "A" -> x73)
# result:
  res: ()
  store: x75
  transformed: x75
  ## sched:
    val x45 = x9_A_top_x10 * 2
    val x72 = collect(100) { x9_A_top_x10 => x45 }
    val x73 = Map("top" -> x72)
    val x71 = Map("val" -> 110)
    val x70 = Map("val" -> 100)
    val x7 = Map("val" -> (A,top))
    val x75 = Map("&x" -> x70, "&y" -> x71, "&a" -> x7, "&r" -> x7, "A" -> x73)
  ## term:
    Map("&a" -> Map("val" -> (A,top)), "A" -> Map("top" -> collect(100) { x9_A_top_x10 => x9_A_top_x10 * 2 }), "&x" -> Map("val" -> 100), "&y" -> Map("val" -> 110), "&r" -> Map("val" -> (A,top)))
# done
