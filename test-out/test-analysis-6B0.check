# prog: {
    Assign(i,Const(0))
    Assign(z,New(A))
    Assign(x,Ref(z))
    While(Less(Ref(i),Const(100)),{
      Assign(y,New(B))
      Put(Ref(y),Const(head),Ref(i))
      Put(Ref(y),Const(tail),Ref(x))
      Assign(x,Ref(y))
      Assign(i,Plus(Ref(i),Const(1)))
    })
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 0)
  val x2 = Map("&i" -> x1)
  val x3 = Map("top" -> Map())
  val x4 = Map("&i" -> x1, "A" -> x3)
  val x5 = Map("val" -> (A,top))
  val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
  val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
  val x10 = ("top",x9)
  begin loop f(n)=x8(x9), iteration vector x10 {
    initial assumption: f(0)=x7, f(x9)=x7, f(x9+1)=x7
    ## iteration 0, f(0)=x7, f(x9)=x7
      val x11 = ("B",x10)
      val x12 = x0 + (x9 -> Map())
      val x13 = Map("top" -> x12)
      val x14 = Map("&x" -> x5, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x15 = Map("val" -> x11)
      val x16 = Map("&x" -> x5, "&y" -> x15, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x17 = Map("head" -> 0)
      val x18 = x0 + (x9 -> x17)
      val x19 = Map("top" -> x18)
      val x20 = Map("&x" -> x5, "&y" -> x15, "B" -> x19, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x21 = Map("head" -> 0, "tail" -> (A,top))
      val x22 = x0 + (x9 -> x21)
      val x23 = Map("top" -> x22)
      val x24 = Map("&x" -> x5, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x25 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x26 = Map("val" -> 1)
      val x27 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x26, "A" -> x3)
      val x28 = x9 < 0
      val x29 = fixindex { x9 => 1 }
      val x30 = x29 < x9
      trip count: fixindex { x9 => 1 }
      approx f(0)=x7, f(x9)=x7, f(x9+1)=x27) = {
        lub_x8(x7,x7,x27)
        lub_x8_&x(x5,x5,x15)
        lub_x8_&x_val((A,top),(A,top),x11)
        val x31 = "A" * -1
        val x32 = "top" * -1
        val x33 = (x31,x32)
        val x34 = x31 + "B"
        val x35 = x10 + x32
        val x36 = (x34,x35)
        (A,top)
        (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        val x37 = x9 + -1
        val x38 = ("top",x37)
        val x39 = ("B",x38)
        val x40 = 0 < x9
        val x41 = if (x40) x39 else (A,top)
        val x42 = if (x40) x11 else (A,top)
        Set(("val",(x41,x42)))
        val x43 = Map("val" -> x41)
        val x44 = Map("val" -> x42)
        lub_x8_&y("undefined","undefined",x15)
        lub_x8_&y_val("undefined","undefined",x11)
        numerical diff d=f(x9+1)-f(x9) = ("B",("top",x9)) - "undefined" = {
        } = "undefined"
        recursive fun x8_&y_val (init "undefined")
        val x45 = x8_&y_val(x37)
        val x46 = if (x40) x45 else "undefined"
        Set(("val",(x46,x11)))
        val x47 = Map("val" -> x46)
        lub_x8_B("undefined","undefined",x23)
        lub_x8_B_top("undefined","undefined",x22)
        "undefined"
        "undefined"
        Map() + (x9 -> Map("head" -> 0, "tail" -> (A,top)))
        hit update at loop index -- assume collect
        val x48 = x9 + 1
        val x49 = collect(x48) { x8_B_top_x9 => x21 }
        Set(("top",(x49,x49)))
        val x50 = Map("top" -> x49)
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x1,x26)
        lub_x8_&i_val(0,0,1)
        numerical diff d=f(x9+1)-f(x9) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x48)))
        val x51 = Map("val" -> x9)
        val x52 = Map("val" -> x48)
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&y",(x47,x15)), ("&x",(x43,x44)), ("B",(x50,x50)), ("A",(x3,x3)), ("&i",(x51,x52)))
        val x53 = Map("&x" -> x43, "&y" -> x47, "B" -> x50, "&z" -> x5, "&i" -> x51, "A" -> x3)
        val x54 = Map("&x" -> x44, "&y" -> x15, "B" -> x50, "&z" -> x5, "&i" -> x52, "A" -> x3)
      } -> f(x9)=x53, f(x9+1)=x54
    ## iteration 1, f(0)=x7, f(x9)=x53
      val x55 = x9 < 100
      val x56 = x49 + (x9 -> Map())
      val x57 = Map("top" -> x56)
      val x58 = Map("&x" -> x43, "&y" -> x47, "B" -> x57, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x59 = Map("&x" -> x43, "&y" -> x15, "B" -> x57, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x60 = Map("head" -> x9)
      val x61 = x49 + (x9 -> x60)
      val x62 = Map("top" -> x61)
      val x63 = Map("&x" -> x43, "&y" -> x15, "B" -> x62, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x64 = Map("head" -> x9, "tail" -> x41)
      val x65 = x49 + (x9 -> x64)
      val x66 = Map("top" -> x65)
      val x67 = Map("&x" -> x43, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x68 = Map("&x" -> x15, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x69 = Map("&x" -> x15, "&y" -> x15, "B" -> x66, "&z" -> x5, "&i" -> x52, "A" -> x3)
      val x70 = 100 < x9
      trip count: 100
      approx f(0)=x7, f(x9)=x53, f(x9+1)=x69) = {
        lub_x8(x7,x53,x69)
        lub_x8_&x(x5,x43,x15)
        lub_x8_&x_val((A,top),x41,x11)
        val x71 = "B" * -1
        val x72 = x9 * -1
        val x73 = x72 + 1
        val x74 = (x32,x73)
        val x75 = (x71,x74)
        val x76 = if (x40) x75 else x33
        val x77 = x11 + x76
        (A,top)
        if (0 < x9) ("B",("top",x9 + -1)) else (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x41,x42)))
        lub_x8_&y("undefined",x47,x15)
        lub_x8_&y_val("undefined",x46,x11)
        val x78 = x45 * -1
        val x79 = if (x40) x78 else "undefined"
        val x80 = x11 + x79
        "undefined"
        if (0 < x9) x8_&y_val(x9 + -1) else "undefined"
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        val x81 = if (x40) x39 else "undefined"
        val x82 = if (x40) x11 else "undefined"
        Set(("val",(x81,x82)))
        val x83 = Map("val" -> x81)
        val x84 = Map("val" -> x82)
        lub_x8_B("undefined",x50,x66)
        lub_x8_B_top("undefined",x49,x65)
        "undefined"
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) }
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))
        hit update at loop index -- assume collect
        val x85 = 0 < x8_B_top_x9
        val x86 = x8_B_top_x9 + -1
        val x87 = ("top",x86)
        val x88 = ("B",x87)
        val x89 = if (x85) x88 else (A,top)
        val x90 = Map("head" -> x8_B_top_x9, "tail" -> x89)
        val x91 = collect(x48) { x8_B_top_x9 => x90 }
        Set(("top",(x91,x91)))
        val x92 = Map("top" -> x91)
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x51,x52)
        lub_x8_&i_val(0,x9,x48)
        numerical diff d=f(x9+1)-f(x9) = x9 + 1 - x9 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x48)))
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("B",(x92,x92)), ("&y",(x83,x84)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&i",(x51,x52)))
        val x93 = Map("&x" -> x43, "&y" -> x83, "B" -> x92, "&z" -> x5, "&i" -> x51, "A" -> x3)
        val x94 = Map("&x" -> x44, "&y" -> x84, "B" -> x92, "&z" -> x5, "&i" -> x52, "A" -> x3)
      } -> f(x9)=x93, f(x9+1)=x94
    ## iteration 2, f(0)=x7, f(x9)=x93
      val x95 = x91 + (x9 -> Map())
      val x96 = Map("top" -> x95)
      val x97 = Map("&x" -> x43, "&y" -> x83, "B" -> x96, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x98 = Map("&x" -> x43, "&y" -> x15, "B" -> x96, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x99 = x91 + (x9 -> x60)
      val x100 = Map("top" -> x99)
      val x101 = Map("&x" -> x43, "&y" -> x15, "B" -> x100, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x102 = x91 + (x9 -> x64)
      val x103 = Map("top" -> x102)
      val x104 = Map("&x" -> x43, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x105 = Map("&x" -> x15, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x106 = Map("&x" -> x15, "&y" -> x15, "B" -> x103, "&z" -> x5, "&i" -> x52, "A" -> x3)
      trip count: 100
      approx f(0)=x7, f(x9)=x93, f(x9+1)=x106) = {
        lub_x8(x7,x93,x106)
        lub_x8_&x(x5,x43,x15)
        lub_x8_&x_val((A,top),x41,x11)
        (A,top)
        if (0 < x9) ("B",("top",x9 + -1)) else (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x41,x42)))
        lub_x8_&y("undefined",x83,x15)
        lub_x8_&y_val("undefined",x81,x11)
        val x107 = if (x40) x75 else "undefined"
        val x108 = x11 + x107
        "undefined"
        if (0 < x9) ("B",("top",x9 + -1)) else "undefined"
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x81,x82)))
        lub_x8_B("undefined",x92,x103)
        lub_x8_B_top("undefined",x91,x102)
        "undefined"
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))
        hit update at loop index -- assume collect
        Set(("top",(x91,x91)))
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x51,x52)
        lub_x8_&i_val(0,x9,x48)
        numerical diff d=f(x9+1)-f(x9) = x9 + 1 - x9 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x48)))
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("B",(x92,x92)), ("&y",(x83,x84)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&i",(x51,x52)))
      } -> f(x9)=x93, f(x9+1)=x94
      done
      val x109 = x8_&x_val(x37)
      val x8_&x_val = { x9 => x42 }
      val x8_&x = { x9 => x44 }
      val x8_&y_val = { x9 => x82 }
      val x8_&y = { x9 => x84 }
      val x8_B_top = { x9 => x91 }
      val x8_B = { x9 => x92 }
      val x8_&z_val = { x9 => (A,top) }
      val x8_&z = { x9 => x5 }
      val x8_&i_val = { x9 => x48 }
      val x8_&i = { x9 => x52 }
      val x8_A_top = { x9 => Map() }
      val x8_A = { x9 => x3 }
      val x8 = { x9 => x94 }
      fixindex: 100
      val x110 = Map("val" -> (B,(top,99)))
      val x111 = collect(100) { x8_B_top_x9 => x90 }
      val x112 = Map("top" -> x111)
      val x113 = Map("val" -> 100)
      val x114 = Map("&x" -> x110, "&y" -> x110, "B" -> x112, "&z" -> x5, "&i" -> x113, "A" -> x3)
    } end loop x8, trip count 100, state x114
# result:
  res: ()
  store: x114
  transformed: x114
  ## sched:
    val x113 = Map("val" -> 100)
    val x86 = x8_B_top_x9 + -1
    val x87 = ("top",x86)
    val x88 = ("B",x87)
    val x85 = 0 < x8_B_top_x9
    val x89 = if (x85) x88 else (A,top)
    val x90 = Map("head" -> x8_B_top_x9, "tail" -> x89)
    val x111 = collect(100) { x8_B_top_x9 => x90 }
    val x112 = Map("top" -> x111)
    val x110 = Map("val" -> (B,(top,99)))
    val x5 = Map("val" -> (A,top))
    val x3 = Map("top" -> Map())
    val x114 = Map("&x" -> x110, "&y" -> x110, "B" -> x112, "&z" -> x5, "&i" -> x113, "A" -> x3)
  ## term:
    Map("&i" -> Map("val" -> 100), "B" -> Map("top" -> collect(100) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> (B,(top,99))), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,(top,99))))
# done
