# prog: {
    Assign(i,Const(0))
    Assign(z,New(A))
    Assign(x,Ref(z))
    While(Less(Ref(i),Const(100)),{
      Assign(y,New(B))
      Put(Ref(y),Const(head),Ref(i))
      Put(Ref(y),Const(tail),Ref(x))
      Assign(x,Ref(y))
      Assign(i,Plus(Ref(i),Const(1)))
    })
    Assign(s,Const(0))
    Assign(i2,Ref(i))
    Assign(x2,Ref(x))
    While(NotEqual(Ref(x2),Ref(z)),{
      Assign(i2,Get(Ref(x2),Const(head)))
      Assign(x2,Get(Ref(x2),Const(tail)))
      Assign(s,Plus(Ref(s),Ref(i2)))
    })
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 0)
  val x2 = Map("&i" -> x1)
  val x3 = Map("top" -> Map())
  val x4 = Map("&i" -> x1, "A" -> x3)
  val x5 = Map("val" -> (A,top))
  val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
  val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
  val x10 = ("top",x9)
  begin loop f(n)=x8(x9), iteration vector x10 {
    initial assumption: f(0)=x7, f(x9)=x7, f(x9+1)=x7
    ## iteration 0, f(0)=x7, f(x9)=x7
      val x11 = ("B",x10)
      val x12 = x0 + (x9 -> Map())
      val x13 = Map("top" -> x12)
      val x14 = Map("&x" -> x5, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x15 = Map("val" -> x11)
      val x16 = Map("&x" -> x5, "&y" -> x15, "B" -> x13, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x17 = Map("head" -> 0)
      val x18 = x0 + (x9 -> x17)
      val x19 = Map("top" -> x18)
      val x20 = Map("&x" -> x5, "&y" -> x15, "B" -> x19, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x21 = Map("head" -> 0, "tail" -> (A,top))
      val x22 = x0 + (x9 -> x21)
      val x23 = Map("top" -> x22)
      val x24 = Map("&x" -> x5, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x25 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x26 = Map("val" -> 1)
      val x27 = Map("&x" -> x15, "&y" -> x15, "B" -> x23, "&z" -> x5, "&i" -> x26, "A" -> x3)
      val x28 = x9 < 0
      val x29 = fixindex { x9 => 1 }
      val x30 = x29 < x9
      trip count: fixindex { x9 => 1 }
      approx f(0)=x7, f(x9)=x7, f(x9+1)=x27) = {
        lub_x8(x7,x7,x27)
        lub_x8_&x(x5,x5,x15)
        lub_x8_&x_val((A,top),(A,top),x11)
        val x31 = "A" * -1
        val x32 = "top" * -1
        val x33 = (x31,x32)
        val x34 = x31 + "B"
        val x35 = x10 + x32
        val x36 = (x34,x35)
        (A,top)
        (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        val x37 = x9 + -1
        val x38 = ("top",x37)
        val x39 = ("B",x38)
        val x40 = 0 < x9
        val x41 = if (x40) x39 else (A,top)
        val x42 = if (x40) x11 else (A,top)
        Set(("val",(x41,x42)))
        val x43 = Map("val" -> x41)
        val x44 = Map("val" -> x42)
        lub_x8_&y("undefined","undefined",x15)
        lub_x8_&y_val("undefined","undefined",x11)
        numerical diff d=f(x9+1)-f(x9) = ("B",("top",x9)) - "undefined" = {
        } = "undefined"
        recursive fun x8_&y_val (init "undefined")
        val x45 = x8_&y_val(x9)
        Set(("val",(x45,x11)))
        val x46 = Map("val" -> x45)
        lub_x8_B("undefined","undefined",x23)
        lub_x8_B_top("undefined","undefined",x22)
        "undefined"
        "undefined"
        Map() + (x9 -> Map("head" -> 0, "tail" -> (A,top)))
        hit update at loop index -- assume collect
        val x47 = x9 + 1
        val x48 = collect(x47) { x8_B_top_x9 => x21 }
        Set(("top",(x48,x48)))
        val x49 = Map("top" -> x48)
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x1,x26)
        lub_x8_&i_val(0,0,1)
        numerical diff d=f(x9+1)-f(x9) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x47)))
        val x50 = Map("val" -> x9)
        val x51 = Map("val" -> x47)
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&x",(x43,x44)), ("A",(x3,x3)), ("B",(x49,x49)), ("&y",(x46,x15)), ("&i",(x50,x51)))
        val x52 = Map("&x" -> x43, "&y" -> x46, "B" -> x49, "&z" -> x5, "&i" -> x50, "A" -> x3)
        val x53 = Map("&x" -> x44, "&y" -> x15, "B" -> x49, "&z" -> x5, "&i" -> x51, "A" -> x3)
      } -> f(x9)=x52, f(x9+1)=x53
    ## iteration 1, f(0)=x7, f(x9)=x52
      val x54 = x9 < 100
      val x55 = x48 + (x9 -> Map())
      val x56 = Map("top" -> x55)
      val x57 = Map("&x" -> x43, "&y" -> x46, "B" -> x56, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x58 = Map("&x" -> x43, "&y" -> x15, "B" -> x56, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x59 = Map("head" -> x9)
      val x60 = x48 + (x9 -> x59)
      val x61 = Map("top" -> x60)
      val x62 = Map("&x" -> x43, "&y" -> x15, "B" -> x61, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x63 = Map("head" -> x9, "tail" -> x41)
      val x64 = x48 + (x9 -> x63)
      val x65 = Map("top" -> x64)
      val x66 = Map("&x" -> x43, "&y" -> x15, "B" -> x65, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x67 = Map("&x" -> x15, "&y" -> x15, "B" -> x65, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x68 = Map("&x" -> x15, "&y" -> x15, "B" -> x65, "&z" -> x5, "&i" -> x51, "A" -> x3)
      val x69 = 100 < x9
      trip count: 100
      approx f(0)=x7, f(x9)=x52, f(x9+1)=x68) = {
        lub_x8(x7,x52,x68)
        lub_x8_&x(x5,x43,x15)
        lub_x8_&x_val((A,top),x41,x11)
        val x70 = "B" * -1
        val x71 = x9 * -1
        val x72 = x71 + 1
        val x73 = (x32,x72)
        val x74 = (x70,x73)
        val x75 = if (x40) x74 else x33
        val x76 = x11 + x75
        (A,top)
        if (0 < x9) ("B",("top",x9 + -1)) else (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x41,x42)))
        lub_x8_&y("undefined",x46,x15)
        lub_x8_&y_val("undefined",x45,x11)
        val x77 = x45 * -1
        val x78 = x11 + x77
        "undefined"
        x8_&y_val(x9)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        val x79 = if (x40) x39 else "undefined"
        val x80 = if (x40) x11 else "undefined"
        Set(("val",(x79,x80)))
        val x81 = Map("val" -> x79)
        val x82 = Map("val" -> x80)
        lub_x8_B("undefined",x49,x65)
        lub_x8_B_top("undefined",x48,x64)
        "undefined"
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) }
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> 0, "tail" -> (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))
        hit update at loop index -- assume collect
        val x83 = 0 < x8_B_top_x9
        val x84 = x8_B_top_x9 + -1
        val x85 = ("top",x84)
        val x86 = ("B",x85)
        val x87 = if (x83) x86 else (A,top)
        val x88 = Map("head" -> x8_B_top_x9, "tail" -> x87)
        val x89 = collect(x47) { x8_B_top_x9 => x88 }
        Set(("top",(x89,x89)))
        val x90 = Map("top" -> x89)
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x50,x51)
        lub_x8_&i_val(0,x9,x47)
        numerical diff d=f(x9+1)-f(x9) = x9 + 1 - x9 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x47)))
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&y",(x81,x82)), ("&i",(x50,x51)), ("B",(x90,x90)))
        val x91 = Map("&x" -> x43, "&y" -> x81, "B" -> x90, "&z" -> x5, "&i" -> x50, "A" -> x3)
        val x92 = Map("&x" -> x44, "&y" -> x82, "B" -> x90, "&z" -> x5, "&i" -> x51, "A" -> x3)
      } -> f(x9)=x91, f(x9+1)=x92
    ## iteration 2, f(0)=x7, f(x9)=x91
      val x93 = x89 + (x9 -> Map())
      val x94 = Map("top" -> x93)
      val x95 = Map("&x" -> x43, "&y" -> x81, "B" -> x94, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x96 = Map("&x" -> x43, "&y" -> x15, "B" -> x94, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x97 = x89 + (x9 -> x59)
      val x98 = Map("top" -> x97)
      val x99 = Map("&x" -> x43, "&y" -> x15, "B" -> x98, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x100 = x89 + (x9 -> x63)
      val x101 = Map("top" -> x100)
      val x102 = Map("&x" -> x43, "&y" -> x15, "B" -> x101, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x103 = Map("&x" -> x15, "&y" -> x15, "B" -> x101, "&z" -> x5, "&i" -> x50, "A" -> x3)
      val x104 = Map("&x" -> x15, "&y" -> x15, "B" -> x101, "&z" -> x5, "&i" -> x51, "A" -> x3)
      trip count: 100
      approx f(0)=x7, f(x9)=x91, f(x9+1)=x104) = {
        lub_x8(x7,x91,x104)
        lub_x8_&x(x5,x43,x15)
        lub_x8_&x_val((A,top),x41,x11)
        (A,top)
        if (0 < x9) ("B",("top",x9 + -1)) else (A,top)
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x41,x42)))
        lub_x8_&y("undefined",x81,x15)
        lub_x8_&y_val("undefined",x79,x11)
        val x105 = if (x40) x74 else "undefined"
        val x106 = x11 + x105
        "undefined"
        if (0 < x9) ("B",("top",x9 + -1)) else "undefined"
        ("B",("top",x9))
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x79,x80)))
        lub_x8_B("undefined",x90,x101)
        lub_x8_B_top("undefined",x89,x100)
        "undefined"
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }
        collect(x9 + 1) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) } + (x9 -> Map("head" -> x9, "tail" -> if (0 < x9) ("B",("top",x9 + -1)) else (A,top)))
        hit update at loop index -- assume collect
        Set(("top",(x89,x89)))
        lub_x8_&z(x5,x5,x5)
        lub_x8_&i(x1,x50,x51)
        lub_x8_&i_val(0,x9,x47)
        numerical diff d=f(x9+1)-f(x9) = x9 + 1 - x9 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x9,x47)))
        lub_x8_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&x",(x43,x44)), ("A",(x3,x3)), ("&y",(x81,x82)), ("&i",(x50,x51)), ("B",(x90,x90)))
      } -> f(x9)=x91, f(x9+1)=x92
      create function def f(n) = x8(x9) {
        val x107 = 1 < x9
        val x108 = if (x107) x39 else (A,top)
        val x109 = Map("val" -> x108)
        val x110 = if (x107) x39 else "undefined"
        val x111 = Map("val" -> x110)
        val x112 = collect(x9) { x8_B_top_x9 => x88 }
        val x113 = Map("top" -> x112)
        val x114 = Map("&x" -> x109, "&y" -> x111, "B" -> x113, "&z" -> x5, "&i" -> x50, "A" -> x3)
        val x115 = if (x40) x108 else (A,top)
        val x116 = Map("val" -> x115)
        val x117 = if (x40) x111 else "nil"
        val x118 = if (x40) x113 else "nil"
        val x119 = if (x40) x9 else 0
        val x120 = Map("val" -> x119)
        val x121 = Map("&x" -> x116, "&y" -> x117, "B" -> x118, "&z" -> x5, "&i" -> x120, "A" -> x3)
        val x122 = x8_&x_val(x37)
        val x8_&x_val = { x9 => x115 }
        val x8_&x = { x9 => x116 }
        val x123 = x8_&y(x37)
        val x8_&y = { x9 => x117 }
        val x124 = x8_B(x37)
        val x8_B = { x9 => x118 }
        val x8_&z_val = { x9 => (A,top) }
        val x8_&z = { x9 => x5 }
        val x125 = x8_&i_val(x37)
        val x8_&i_val = { x9 => x119 }
        val x8_&i = { x9 => x120 }
        val x8_A_top = { x9 => Map() }
        val x8_A = { x9 => x3 }
        val x8 = { x9 => x121 }
      }
      val x126 = Map("val" -> (B,(top,99)))
      val x127 = collect(100) { x8_B_top_x9 => x88 }
      val x128 = Map("top" -> x127)
      val x129 = Map("val" -> 100)
      val x130 = Map("&x" -> x126, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i" -> x129, "A" -> x3)
    } end loop x8, trip count 100, state x130
    val x131 = Map("&x" -> x126, "&s" -> x1, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i" -> x129, "A" -> x3)
    val x132 = Map("&x" -> x126, "&s" -> x1, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x129, "&i" -> x129, "A" -> x3)
    val x133 = Map("&x" -> x126, "&s" -> x1, "&x2" -> x126, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x129, "&i" -> x129, "A" -> x3)
    val x136 = ("top",x135)
    begin loop f(n)=x134(x135), iteration vector x136 {
      initial assumption: f(0)=x133, f(x135)=x133, f(x135+1)=x133
    ## iteration 0, f(0)=x133, f(x135)=x133
      val x137 = Map("head" -> 99, "tail" -> (B,(top,98)))
      val x138 = Map("val" -> 99)
      val x139 = Map("&x" -> x126, "&s" -> x1, "&x2" -> x126, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x138, "&i" -> x129, "A" -> x3)
      val x140 = Map("val" -> (B,(top,98)))
      val x141 = Map("&x" -> x126, "&s" -> x1, "&x2" -> x140, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x138, "&i" -> x129, "A" -> x3)
      val x142 = Map("&x" -> x126, "&s" -> x138, "&x2" -> x140, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x138, "&i" -> x129, "A" -> x3)
      val x143 = x135 < 0
      val x144 = fixindex { x135 => 1 }
      val x145 = x144 < x135
      trip count: fixindex { x135 => 1 }
      approx f(0)=x133, f(x135)=x133, f(x135+1)=x142) = {
        lub_x134(x133,x133,x142)
        lub_x134_&x(x126,x126,x126)
        lub_x134_&s(x1,x1,x138)
        lub_x134_&s_val(0,0,99)
        numerical diff d=f(x135+1)-f(x135) = 99 - 0 = {
        } = 99
        poly: List(99)
        confirmed iterative loop, d = 99
        val x146 = x135 * 99
        val x147 = x135 + 1
        val x148 = x146 + 99
        Set(("val",(x146,x148)))
        val x149 = Map("val" -> x146)
        val x150 = Map("val" -> x148)
        lub_x134_&x2(x126,x126,x140)
        lub_x134_&x2_val((B,(top,99)),(B,(top,99)),(B,(top,98)))
        val x151 = (x32,-99)
        val x152 = (x70,x151)
        numerical diff d=f(x135+1)-f(x135) = (B,(top,98)) - (B,(top,99)) = {
        } = (0,(0,-1))
        poly: List((0,(0,-1)))
        confirmed iterative loop, d = (0,(0,-1))
        val x153 = x135 * -1
        val x154 = (0,x153)
        val x155 = (0,x154)
        val x156 = x153 + 99
        val x157 = ("top",x156)
        val x158 = ("B",x157)
        val x159 = x153 + -1
        val x160 = (0,x159)
        val x161 = (0,x160)
        val x162 = x153 + 98
        val x163 = ("top",x162)
        val x164 = ("B",x163)
        Set(("val",(x158,x164)))
        val x165 = Map("val" -> x158)
        val x166 = Map("val" -> x164)
        lub_x134_&y(x126,x126,x126)
        lub_x134_B(x128,x128,x128)
        lub_x134_&z(x5,x5,x5)
        lub_x134_&i2(x129,x129,x138)
        lub_x134_&i2_val(100,100,99)
        numerical diff d=f(x135+1)-f(x135) = 99 - 100 = {
        } = -1
        poly: List(-1)
        confirmed iterative loop, d = -1
        val x167 = x153 + 100
        Set(("val",(x167,x156)))
        val x168 = Map("val" -> x167)
        val x169 = Map("val" -> x156)
        lub_x134_&i(x129,x129,x129)
        lub_x134_A(x3,x3,x3)
        Set(("&x2",(x165,x166)), ("&z",(x5,x5)), ("&i",(x129,x129)), ("B",(x128,x128)), ("&i2",(x168,x169)), ("&y",(x126,x126)), ("&x",(x126,x126)), ("A",(x3,x3)), ("&s",(x149,x150)))
        val x170 = Map("&x" -> x126, "&s" -> x149, "&x2" -> x165, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x168, "&i" -> x129, "A" -> x3)
        val x171 = Map("&x" -> x126, "&s" -> x150, "&x2" -> x166, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      } -> f(x135)=x170, f(x135+1)=x171
    ## iteration 1, f(0)=x133, f(x135)=x170
      val x172 = x135 < 99
      val x173 = if (x172) x164 else (A,top)
      val x174 = Map("head" -> x156, "tail" -> x173)
      val x175 = Map("&x" -> x126, "&s" -> x149, "&x2" -> x165, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      val x176 = Map("val" -> x173)
      val x177 = Map("&x" -> x126, "&s" -> x149, "&x2" -> x176, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      val x178 = x135 * 98
      val x179 = x178 + 99
      val x180 = Map("val" -> x179)
      val x181 = Map("&x" -> x126, "&s" -> x180, "&x2" -> x176, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      trip count: fixindex { x135 => 1 }
      approx f(0)=x133, f(x135)=x170, f(x135+1)=x181) = {
        lub_x134(x133,x170,x181)
        lub_x134_&x(x126,x126,x126)
        lub_x134_&s(x1,x149,x180)
        lub_x134_&s_val(0,x146,x179)
        numerical diff d=f(x135+1)-f(x135) = x135 * 98 + 99 - x135 * 99 = {
          val x182 = x135 * -99
          val x183 = x182 + 99
        } = x135 * -1 + 99
        poly: List(99, -1)
        found 2nd order polynomial: f'(x135)=-1*x135+99 -> f(x135)=-1*x135/2(x135+1)+99*x135
        val x184 = x135 + -1
        val x185 = x135 * x135
        val x186 = x185 + x153
        val x187 = x135 * 0.5
        val x188 = x135 * x187
        val x189 = x135 * -0.5
        val x190 = x188 + x189
        val x191 = x135 * x189
        val x192 = x191 + x187
        val x193 = x187 + x146
        val x194 = x191 + x193
        val x195 = x185 + x135
        val x196 = x188 + x187
        val x197 = x191 + x189
        val x198 = x189 + x148
        val x199 = x191 + x198
        x135 * x135 * -0.5 + x135 * 0.5 + x135 * 99
        x135 * x135 * -0.5 + x135 * -0.5 + x135 * 99 + 99
        val x200 = x189 + x182
        val x201 = x188 + x200
        val x202 = x189 + x183
        val x203 = x188 + x202
        val x204 = x146 + x203
        val x205 = x189 + x204
        val x206 = x191 + x205
        x135 * x135 * -0.5 + x135 * -0.5 + x135 * 99 + x135 * x135 * 0.5 + x135 * -0.5 + x135 * -99 + 99
        poly2: List(99, -1)
        Set(("val",(x194,x199)))
        val x207 = Map("val" -> x194)
        val x208 = Map("val" -> x199)
        lub_x134_&x2(x126,x165,x176)
        lub_x134_&x2_val((B,(top,99)),x158,x173)
        (B,(top,99))
        ("B",("top",x135 * -1 + 99))
        if (x135 < 99) ("B",("top",x135 * -1 + 98)) else (A,top)
        hit if dual -- assume only last case differs
        val x209 = x153 + 1
        val x210 = x135 < 100
        val x211 = if (x210) x158 else (A,top)
        Set(("val",(x211,x173)))
        val x212 = Map("val" -> x211)
        lub_x134_&y(x126,x126,x126)
        lub_x134_B(x128,x128,x128)
        lub_x134_&z(x5,x5,x5)
        lub_x134_&i2(x129,x168,x169)
        lub_x134_&i2_val(100,x167,x156)
        numerical diff d=f(x135+1)-f(x135) = x135 * -1 + 99 - x135 * -1 + 100 = {
          val x213 = x135 + -100
        } = -1
        poly: List(-1)
        confirmed iterative loop, d = -1
        Set(("val",(x167,x156)))
        lub_x134_&i(x129,x129,x129)
        lub_x134_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&i",(x129,x129)), ("&x2",(x212,x176)), ("B",(x128,x128)), ("&s",(x207,x208)), ("&i2",(x168,x169)), ("&y",(x126,x126)), ("&x",(x126,x126)), ("A",(x3,x3)))
        val x214 = Map("&x" -> x126, "&s" -> x207, "&x2" -> x212, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x168, "&i" -> x129, "A" -> x3)
        val x215 = Map("&x" -> x126, "&s" -> x208, "&x2" -> x176, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      } -> f(x135)=x214, f(x135+1)=x215
    ## iteration 2, f(0)=x133, f(x135)=x214
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      val x216 = if (x210) x174 else Map()
      val x217 = if (x210) x156 else "undefined"
      val x218 = Map("val" -> x217)
      val x219 = Map("&x" -> x126, "&s" -> x207, "&x2" -> x212, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x218, "&i" -> x129, "A" -> x3)
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      val x220 = if (x210) x173 else "undefined"
      val x221 = Map("val" -> x220)
      val x222 = Map("&x" -> x126, "&s" -> x207, "&x2" -> x221, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x218, "&i" -> x129, "A" -> x3)
      val x223 = x146 + x217
      val x224 = x187 + x223
      val x225 = x191 + x224
      val x226 = Map("val" -> x225)
      val x227 = Map("&x" -> x126, "&s" -> x226, "&x2" -> x221, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x218, "&i" -> x129, "A" -> x3)
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      val x228 = 100 < x135
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      trip count: 100
      val x229 = x187 + x179
      val x230 = x191 + x229
      val x231 = Map("val" -> x230)
      hit2: x135<100 and ¬x135<100-1 implies x135=100-1 in if (x172) x164 else (A,top)
      val x232 = Map("&x" -> x126, "&s" -> x231, "&x2" -> x176, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x169, "&i" -> x129, "A" -> x3)
      approx f(0)=x133, f(x135)=x214, f(x135+1)=x232) = {
        lub_x134(x133,x214,x232)
        lub_x134_&x(x126,x126,x126)
        lub_x134_&s(x1,x207,x231)
        lub_x134_&s_val(0,x194,x230)
        numerical diff d=f(x135+1)-f(x135) = x135 * x135 * -0.5 + x135 * 0.5 + x135 * 98 + 99 - x135 * x135 * -0.5 + x135 * 0.5 + x135 * 99 = {
          val x233 = x178 + x203
          val x234 = x187 + x233
          val x235 = x191 + x234
        } = x135 * x135 * -0.5 + x135 * 0.5 + x135 * 98 + x135 * x135 * 0.5 + x135 * -0.5 + x135 * -99 + 99
        poly: List(99, -1)
        found 2nd order polynomial: f'(x135)=-1*x135+99 -> f(x135)=-1*x135/2(x135+1)+99*x135
        x135 * x135 * -0.5 + x135 * 0.5 + x135 * 99
        x135 * x135 * -0.5 + x135 * -0.5 + x135 * 99 + 99
        x135 * x135 * -0.5 + x135 * -0.5 + x135 * 99 + x135 * x135 * 0.5 + x135 * -0.5 + x135 * -99 + 99
        poly2: List(99, -1)
        Set(("val",(x194,x199)))
        lub_x134_&x2(x126,x212,x176)
        lub_x134_&x2_val((B,(top,99)),x211,x173)
        (B,(top,99))
        if (x135 < 100) ("B",("top",x135 * -1 + 99)) else (A,top)
        if (x135 < 99) ("B",("top",x135 * -1 + 98)) else (A,top)
        hit if dual -- assume only last case differs
        Set(("val",(x211,x173)))
        lub_x134_&y(x126,x126,x126)
        lub_x134_B(x128,x128,x128)
        lub_x134_&z(x5,x5,x5)
        lub_x134_&i2(x129,x168,x169)
        lub_x134_&i2_val(100,x167,x156)
        numerical diff d=f(x135+1)-f(x135) = x135 * -1 + 99 - x135 * -1 + 100 = {
        } = -1
        poly: List(-1)
        confirmed iterative loop, d = -1
        Set(("val",(x167,x156)))
        lub_x134_&i(x129,x129,x129)
        lub_x134_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&i",(x129,x129)), ("&x2",(x212,x176)), ("B",(x128,x128)), ("&s",(x207,x208)), ("&i2",(x168,x169)), ("&y",(x126,x126)), ("&x",(x126,x126)), ("A",(x3,x3)))
      } -> f(x135)=x214, f(x135+1)=x215
      create function def f(n) = x134(x135) {
        val x236 = 0 < x135
        val x237 = x189 + 0.5
        val x238 = x187 + -0.5
        val x239 = x187 + x238
        val x240 = x191 + x239
        val x241 = x146 + -99
        val x242 = x146 + 0.5
        val x243 = x189 + x242
        val x244 = x189 + x146
        val x245 = x187 + x244
        val x246 = x187 + x245
        val x247 = x191 + x246
        val x248 = Map("val" -> x247)
        val x249 = Map("&x" -> x126, "&s" -> x248, "&x2" -> x212, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x168, "&i" -> x129, "A" -> x3)
        val x250 = if (x236) x247 else 0
        val x251 = Map("val" -> x250)
        val x252 = if (x236) x211 else (B,(top,99))
        val x253 = Map("val" -> x252)
        val x254 = if (x236) x167 else 100
        val x255 = Map("val" -> x254)
        val x256 = Map("&x" -> x126, "&s" -> x251, "&x2" -> x253, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x255, "&i" -> x129, "A" -> x3)
        val x134_&x_val = { x135 => (B,(top,99)) }
        val x134_&x = { x135 => x126 }
        val x257 = x134_&s_val(x184)
        val x134_&s_val = { x135 => x250 }
        val x134_&s = { x135 => x251 }
        val x258 = x134_&x2_val(x184)
        val x134_&x2_val = { x135 => x252 }
        val x134_&x2 = { x135 => x253 }
        val x134_&y_val = { x135 => (B,(top,99)) }
        val x134_&y = { x135 => x126 }
        val x134_B_top = { x135 => x127 }
        val x134_B = { x135 => x128 }
        val x134_&z_val = { x135 => (A,top) }
        val x134_&z = { x135 => x5 }
        val x259 = x134_&i2_val(x184)
        val x134_&i2_val = { x135 => x254 }
        val x134_&i2 = { x135 => x255 }
        val x134_&i_val = { x135 => 100 }
        val x134_&i = { x135 => x129 }
        val x134_A_top = { x135 => Map() }
        val x134_A = { x135 => x3 }
        val x134 = { x135 => x256 }
      }
      val x260 = Map("val" -> 4950)
      val x261 = Map("&x" -> x126, "&s" -> x260, "&x2" -> x5, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x1, "&i" -> x129, "A" -> x3)
    } end loop x134, trip count 100, state x261
# result:
  res: ()
  store: x261
  transformed: x261
  ## sched:
    val x260 = Map("val" -> 4950)
    val x129 = Map("val" -> 100)
    val x84 = x8_B_top_x9 + -1
    val x85 = ("top",x84)
    val x86 = ("B",x85)
    val x83 = 0 < x8_B_top_x9
    val x87 = if (x83) x86 else (A,top)
    val x88 = Map("head" -> x8_B_top_x9, "tail" -> x87)
    val x127 = collect(100) { x8_B_top_x9 => x88 }
    val x128 = Map("top" -> x127)
    val x126 = Map("val" -> (B,(top,99)))
    val x5 = Map("val" -> (A,top))
    val x3 = Map("top" -> Map())
    val x1 = Map("val" -> 0)
    val x261 = Map("&x" -> x126, "&s" -> x260, "&x2" -> x5, "&y" -> x126, "B" -> x128, "&z" -> x5, "&i2" -> x1, "&i" -> x129, "A" -> x3)
  ## term:
    Map("&i" -> Map("val" -> 100), "&i2" -> Map("val" -> 0), "&x2" -> Map("val" -> (A,top)), "B" -> Map("top" -> collect(100) { x8_B_top_x9 => Map("head" -> x8_B_top_x9, "tail" -> if (0 < x8_B_top_x9) ("B",("top",x8_B_top_x9 + -1)) else (A,top)) }), "&s" -> Map("val" -> 4950), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> (B,(top,99))), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,(top,99))))
# done
