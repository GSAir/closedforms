# prog: {
    Assign(i,Const(0))
    Assign(z,New(A))
    Assign(x,Ref(z))
    Assign(y,New(B))
    While(Less(Ref(i),Const(100)),{
      Put(Ref(y),Const(head),Ref(i))
      Put(Ref(y),Const(tail),Ref(x))
      Assign(x,Ref(y))
      Assign(i,Plus(Ref(i),Const(1)))
    })
    Put(Ref(y),Const(tail),Ref(z))
    Put(Ref(y),Const(head),Const(7))
  }
# eval:
  val x0 = Map()
  val x1 = Map("val" -> 0)
  val x2 = Map("&i" -> x1)
  val x3 = Map("top" -> Map())
  val x4 = Map("&i" -> x1, "A" -> x3)
  val x5 = Map("val" -> (A,top))
  val x6 = Map("&i" -> x1, "A" -> x3, "&z" -> x5)
  val x7 = Map("&i" -> x1, "A" -> x3, "&z" -> x5, "&x" -> x5)
  val x8 = Map("&x" -> x5, "B" -> x3, "&z" -> x5, "&i" -> x1, "A" -> x3)
  val x9 = Map("val" -> (B,top))
  val x10 = Map("&x" -> x5, "&y" -> x9, "B" -> x3, "&z" -> x5, "&i" -> x1, "A" -> x3)
  val x13 = ("top",x12)
  begin loop f(n)=x11(x12), iteration vector x13 {
    initial assumption: f(0)=x10, f(x12)=x10, f(x12+1)=x10
    ## iteration 0, f(0)=x10, f(x12)=x10
      val x14 = Map("head" -> 0)
      val x15 = Map("top" -> x14)
      val x16 = Map("&x" -> x5, "&y" -> x9, "B" -> x15, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x17 = Map("head" -> 0, "tail" -> (A,top))
      val x18 = Map("top" -> x17)
      val x19 = Map("&x" -> x5, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x20 = Map("&x" -> x9, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x1, "A" -> x3)
      val x21 = Map("val" -> 1)
      val x22 = Map("&x" -> x9, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x21, "A" -> x3)
      val x23 = x12 < 0
      val x24 = fixindex { x12 => 1 }
      val x25 = x24 < x12
      trip count: fixindex { x12 => 1 }
      approx f(0)=x10, f(x12)=x10, f(x12+1)=x22) = {
        lub_x11(x10,x10,x22)
        lub_x11_&x(x5,x5,x9)
        lub_x11_&x_val((A,top),(A,top),(B,top))
        val x26 = "A" * -1
        val x27 = "top" * -1
        val x28 = (x26,x27)
        val x29 = x26 + "B"
        val x30 = (x29,0)
        (A,top)
        (A,top)
        (B,top)
        hit pair -- assume only 0 case differs (loop peeling)
        val x31 = x12 + -1
        val x32 = 0 < x12
        val x33 = if (x32) (B,top) else (A,top)
        Set(("val",(x33,x33)))
        val x34 = Map("val" -> x33)
        lub_x11_&y(x9,x9,x9)
        lub_x11_B(x3,x3,x18)
        lub_x11_B_top(Map(),Map(),x17)
        lub_x11_B_top_head("undefined","undefined",0)
        numerical diff d=f(x12+1)-f(x12) = 0 - "undefined" = {
        } = "undefined"
        recursive fun x11_B_top_head (init "undefined")
        val x35 = x11_B_top_head(x12)
        lub_x11_B_top_tail("undefined","undefined",(A,top))
        numerical diff d=f(x12+1)-f(x12) = (A,top) - "undefined" = {
        } = "undefined"
        recursive fun x11_B_top_tail (init "undefined")
        val x36 = x11_B_top_tail(x12)
        Set(("head",(x35,0)), ("tail",(x36,(A,top))))
        val x37 = Map("head" -> x35, "tail" -> x36)
        Set(("top",(x37,x17)))
        val x38 = Map("top" -> x37)
        lub_x11_&z(x5,x5,x5)
        lub_x11_&i(x1,x1,x21)
        lub_x11_&i_val(0,0,1)
        numerical diff d=f(x12+1)-f(x12) = 1 - 0 = {
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        val x39 = x12 + 1
        Set(("val",(x12,x39)))
        val x40 = Map("val" -> x12)
        val x41 = Map("val" -> x39)
        lub_x11_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&y",(x9,x9)), ("B",(x38,x18)), ("A",(x3,x3)), ("&x",(x34,x34)), ("&i",(x40,x41)))
        val x42 = Map("&x" -> x34, "&y" -> x9, "B" -> x38, "&z" -> x5, "&i" -> x40, "A" -> x3)
        val x43 = Map("&x" -> x34, "&y" -> x9, "B" -> x18, "&z" -> x5, "&i" -> x41, "A" -> x3)
      } -> f(x12)=x42, f(x12+1)=x43
    ## iteration 1, f(0)=x10, f(x12)=x42
      val x44 = x12 < 100
      val x45 = Map("head" -> x12, "tail" -> x36)
      val x46 = Map("top" -> x45)
      val x47 = Map("&x" -> x34, "&y" -> x9, "B" -> x46, "&z" -> x5, "&i" -> x40, "A" -> x3)
      val x48 = Map("head" -> x12, "tail" -> x33)
      val x49 = Map("top" -> x48)
      val x50 = Map("&x" -> x34, "&y" -> x9, "B" -> x49, "&z" -> x5, "&i" -> x40, "A" -> x3)
      val x51 = Map("&x" -> x9, "&y" -> x9, "B" -> x49, "&z" -> x5, "&i" -> x40, "A" -> x3)
      val x52 = Map("&x" -> x9, "&y" -> x9, "B" -> x49, "&z" -> x5, "&i" -> x41, "A" -> x3)
      val x53 = 100 < x12
      trip count: 100
      approx f(0)=x10, f(x12)=x42, f(x12+1)=x52) = {
        lub_x11(x10,x42,x52)
        lub_x11_&x(x5,x34,x9)
        lub_x11_&x_val((A,top),x33,(B,top))
        val x54 = "B" * -1
        val x55 = (x54,x27)
        val x56 = if (x32) x55 else x28
        val x57 = if (x32) (0,0) else x30
        (A,top)
        if (0 < x12) (B,top) else (A,top)
        (B,top)
        hit pair -- assume only 0 case differs (loop peeling)
        Set(("val",(x33,x33)))
        lub_x11_&y(x9,x9,x9)
        lub_x11_B(x3,x38,x49)
        lub_x11_B_top(Map(),x37,x48)
        lub_x11_B_top_head("undefined",x35,x12)
        numerical diff d=f(x12+1)-f(x12) = x12 - x11_B_top_head(x12) = {
          val x58 = x35 * -1
          val x59 = x12 + x58
        } = x12 + x11_B_top_head(x12) * -1
        poly: List()
        giving up for term:
        x12 + x11_B_top_head(x12) * -1
        recursive fun x11_B_top_head (init "undefined")
        lub_x11_B_top_tail("undefined",x36,x33)
        numerical diff d=f(x12+1)-f(x12) = if (0 < x12) (B,top) else (A,top) - x11_B_top_tail(x12) = {
          val x60 = x36 * -1
          val x61 = x60 + (B,top)
          val x62 = x60 + (A,top)
          val x63 = if (x32) x61 else x62
        } = if (0 < x12) x11_B_top_tail(x12) * -1 + (B,top) else x11_B_top_tail(x12) * -1 + (A,top)
        poly: List()
        giving up for term:
        if (0 < x12) x11_B_top_tail(x12) * -1 + (B,top) else x11_B_top_tail(x12) * -1 + (A,top)
        recursive fun x11_B_top_tail (init "undefined")
        Set(("head",(x35,x12)), ("tail",(x36,x33)))
        Set(("top",(x37,x48)))
        lub_x11_&z(x5,x5,x5)
        lub_x11_&i(x1,x40,x41)
        lub_x11_&i_val(0,x12,x39)
        numerical diff d=f(x12+1)-f(x12) = x12 + 1 - x12 = {
          val x64 = x12 * -1
          val x65 = x64 + 1
        } = 1
        poly: List(1)
        confirmed iterative loop, d = 1
        Set(("val",(x12,x39)))
        lub_x11_A(x3,x3,x3)
        Set(("&z",(x5,x5)), ("&y",(x9,x9)), ("B",(x38,x49)), ("A",(x3,x3)), ("&x",(x34,x34)), ("&i",(x40,x41)))
        val x66 = Map("&x" -> x34, "&y" -> x9, "B" -> x49, "&z" -> x5, "&i" -> x41, "A" -> x3)
      } -> f(x12)=x42, f(x12+1)=x66
      create function def f(n) = x11(x12) {
        val x67 = 1 < x12
        val x68 = if (x67) (B,top) else (A,top)
        val x69 = Map("val" -> x68)
        val x70 = Map("head" -> x31, "tail" -> x68)
        val x71 = Map("top" -> x70)
        val x72 = Map("&x" -> x69, "&y" -> x9, "B" -> x71, "&z" -> x5, "&i" -> x40, "A" -> x3)
        val x73 = if (x32) x68 else (A,top)
        val x74 = Map("val" -> x73)
        val x75 = if (x32) x70 else Map()
        val x76 = Map("top" -> x75)
        val x77 = if (x32) x12 else 0
        val x78 = Map("val" -> x77)
        val x79 = Map("&x" -> x74, "&y" -> x9, "B" -> x76, "&z" -> x5, "&i" -> x78, "A" -> x3)
        val x80 = x11_&x_val(x31)
        val x11_&x_val = { x12 => x73 }
        val x11_&x = { x12 => x74 }
        val x11_&y_val = { x12 => (B,top) }
        val x11_&y = { x12 => x9 }
        val x81 = x11_B_top(x31)
        val x11_B_top = { x12 => x75 }
        val x11_B = { x12 => x76 }
        val x11_&z_val = { x12 => (A,top) }
        val x11_&z = { x12 => x5 }
        val x82 = x11_&i_val(x31)
        val x11_&i_val = { x12 => x77 }
        val x11_&i = { x12 => x78 }
        val x11_A_top = { x12 => Map() }
        val x11_A = { x12 => x3 }
        val x11 = { x12 => x79 }
      }
      val x83 = Map("head" -> 99, "tail" -> (B,top))
      val x84 = Map("top" -> x83)
      val x85 = Map("val" -> 100)
      val x86 = Map("&x" -> x9, "&y" -> x9, "B" -> x84, "&z" -> x5, "&i" -> x85, "A" -> x3)
    } end loop x11, trip count 100, state x86
    val x87 = Map("head" -> 99, "tail" -> (A,top))
    val x88 = Map("top" -> x87)
    val x89 = Map("&x" -> x9, "&y" -> x9, "B" -> x88, "&z" -> x5, "&i" -> x85, "A" -> x3)
    val x90 = Map("head" -> 7, "tail" -> (A,top))
    val x91 = Map("top" -> x90)
    val x92 = Map("&x" -> x9, "&y" -> x9, "B" -> x91, "&z" -> x5, "&i" -> x85, "A" -> x3)
# result:
  res: ()
  store: x92
  transformed: x92
  ## sched:
    val x90 = Map("head" -> 7, "tail" -> (A,top))
    val x91 = Map("top" -> x90)
    val x85 = Map("val" -> 100)
    val x9 = Map("val" -> (B,top))
    val x5 = Map("val" -> (A,top))
    val x3 = Map("top" -> Map())
    val x92 = Map("&x" -> x9, "&y" -> x9, "B" -> x91, "&z" -> x5, "&i" -> x85, "A" -> x3)
  ## term:
    Map("&i" -> Map("val" -> 100), "B" -> Map("top" -> Map("head" -> 7, "tail" -> (A,top))), "A" -> Map("top" -> Map()), "&x" -> Map("val" -> (B,top)), "&z" -> Map("val" -> (A,top)), "&y" -> Map("val" -> (B,top)))
# done
